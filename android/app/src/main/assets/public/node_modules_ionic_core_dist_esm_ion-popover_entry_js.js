"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-popover_entry_js"],{

/***/ 8050:
/*!****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-popover.entry.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_popover": () => (/* binding */ Popover)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-be218d70.js */ 9866);
/* harmony import */ var _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-3b28a225.js */ 3053);
/* harmony import */ var _framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./framework-delegate-28f7ea29.js */ 6425);
/* harmony import */ var _helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers-5eb6364d.js */ 9364);
/* harmony import */ var _index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-e86f0117.js */ 7584);
/* harmony import */ var _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./overlays-166b34ae.js */ 4477);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./theme-7670341c.js */ 320);
/* harmony import */ var _index_93867f4c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-93867f4c.js */ 656);
/* harmony import */ var _animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./animation-9a890cad.js */ 9989);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 159);
/* harmony import */ var _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-33ffec25.js */ 2286);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */












/**
 * Returns the dimensions of the popover
 * arrow on `ios` mode. If arrow is disabled
 * returns (0, 0).
 */
const getArrowDimensions = arrowEl => {
  if (!arrowEl) {
    return {
      arrowWidth: 0,
      arrowHeight: 0
    };
  }
  const {
    width,
    height
  } = arrowEl.getBoundingClientRect();
  return {
    arrowWidth: width,
    arrowHeight: height
  };
};
/**
 * Returns the recommended dimensions of the popover
 * that takes into account whether or not the width
 * should match the trigger width.
 */
const getPopoverDimensions = (size, contentEl, triggerEl) => {
  const contentDimentions = contentEl.getBoundingClientRect();
  const contentHeight = contentDimentions.height;
  let contentWidth = contentDimentions.width;
  if (size === 'cover' && triggerEl) {
    const triggerDimensions = triggerEl.getBoundingClientRect();
    contentWidth = triggerDimensions.width;
  }
  return {
    contentWidth,
    contentHeight
  };
};
const configureDismissInteraction = (triggerEl, triggerAction, popoverEl, parentPopoverEl) => {
  let dismissCallbacks = [];
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(parentPopoverEl);
  const parentContentEl = root.querySelector('.popover-content');
  switch (triggerAction) {
    case 'hover':
      dismissCallbacks = [{
        /**
         * Do not use mouseover here
         * as this will causes the event to
         * be dispatched on each underlying
         * element rather than on the popover
         * content as a whole.
         */
        eventName: 'mouseenter',
        callback: ev => {
          /**
           * Do not dismiss the popover is we
           * are hovering over its trigger.
           * This would be easier if we used mouseover
           * but this would cause the event to be dispatched
           * more often than we would like, potentially
           * causing performance issues.
           */
          const element = document.elementFromPoint(ev.clientX, ev.clientY);
          if (element === triggerEl) {
            return;
          }
          popoverEl.dismiss(undefined, undefined, false);
        }
      }];
      break;
    case 'context-menu':
    case 'click':
    default:
      dismissCallbacks = [{
        eventName: 'click',
        callback: ev => {
          /**
           * Do not dismiss the popover is we
           * are hovering over its trigger.
           */
          const target = ev.target;
          const closestTrigger = target.closest('[data-ion-popover-trigger]');
          if (closestTrigger === triggerEl) {
            /**
             * stopPropagation here so if the
             * popover has dismissOnSelect="true"
             * the popover does not dismiss since
             * we just clicked a trigger element.
             */
            ev.stopPropagation();
            return;
          }
          popoverEl.dismiss(undefined, undefined, false);
        }
      }];
      break;
  }
  dismissCallbacks.forEach(({
    eventName,
    callback
  }) => parentContentEl.addEventListener(eventName, callback));
  return () => {
    dismissCallbacks.forEach(({
      eventName,
      callback
    }) => parentContentEl.removeEventListener(eventName, callback));
  };
};
/**
 * Configures the triggerEl to respond
 * to user interaction based upon the triggerAction
 * prop that devs have defined.
 */
const configureTriggerInteraction = (triggerEl, triggerAction, popoverEl) => {
  let triggerCallbacks = [];
  /**
   * Based upon the kind of trigger interaction
   * the user wants, we setup the correct event
   * listeners.
   */
  switch (triggerAction) {
    case 'hover':
      let hoverTimeout;
      triggerCallbacks = [{
        eventName: 'mouseenter',
        callback: function () {
          var _ref = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (ev) {
            ev.stopPropagation();
            if (hoverTimeout) {
              clearTimeout(hoverTimeout);
            }
            /**
             * Hovering over a trigger should not
             * immediately open the next popover.
             */
            hoverTimeout = setTimeout(() => {
              (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)(() => {
                popoverEl.presentFromTrigger(ev);
                hoverTimeout = undefined;
              });
            }, 100);
          });
          return function callback(_x) {
            return _ref.apply(this, arguments);
          };
        }()
      }, {
        eventName: 'mouseleave',
        callback: ev => {
          if (hoverTimeout) {
            clearTimeout(hoverTimeout);
          }
          /**
           * If mouse is over another popover
           * that is not this popover then we should
           * close this popover.
           */
          const target = ev.relatedTarget;
          if (!target) {
            return;
          }
          if (target.closest('ion-popover') !== popoverEl) {
            popoverEl.dismiss(undefined, undefined, false);
          }
        }
      }, {
        /**
         * stopPropagation here prevents the popover
         * from dismissing when dismiss-on-select="true".
         */
        eventName: 'click',
        callback: ev => ev.stopPropagation()
      }, {
        eventName: 'ionPopoverActivateTrigger',
        callback: ev => popoverEl.presentFromTrigger(ev, true)
      }];
      break;
    case 'context-menu':
      triggerCallbacks = [{
        eventName: 'contextmenu',
        callback: ev => {
          /**
           * Prevents the platform context
           * menu from appearing.
           */
          ev.preventDefault();
          popoverEl.presentFromTrigger(ev);
        }
      }, {
        eventName: 'click',
        callback: ev => ev.stopPropagation()
      }, {
        eventName: 'ionPopoverActivateTrigger',
        callback: ev => popoverEl.presentFromTrigger(ev, true)
      }];
      break;
    case 'click':
    default:
      triggerCallbacks = [{
        /**
         * Do not do a stopPropagation() here
         * because if you had two click triggers
         * then clicking the first trigger and then
         * clicking the second trigger would not cause
         * the first popover to dismiss.
         */
        eventName: 'click',
        callback: ev => popoverEl.presentFromTrigger(ev)
      }, {
        eventName: 'ionPopoverActivateTrigger',
        callback: ev => popoverEl.presentFromTrigger(ev, true)
      }];
      break;
  }
  triggerCallbacks.forEach(({
    eventName,
    callback
  }) => triggerEl.addEventListener(eventName, callback));
  triggerEl.setAttribute('data-ion-popover-trigger', 'true');
  return () => {
    triggerCallbacks.forEach(({
      eventName,
      callback
    }) => triggerEl.removeEventListener(eventName, callback));
    triggerEl.removeAttribute('data-ion-popover-trigger');
  };
};
/**
 * Returns the index of an ion-item in an array of ion-items.
 */
const getIndexOfItem = (items, item) => {
  if (!item || item.tagName !== 'ION-ITEM') {
    return -1;
  }
  return items.findIndex(el => el === item);
};
/**
 * Given an array of elements and a currently focused ion-item
 * returns the next ion-item relative to the focused one or
 * undefined.
 */
const getNextItem = (items, currentItem) => {
  const currentItemIndex = getIndexOfItem(items, currentItem);
  return items[currentItemIndex + 1];
};
/**
 * Given an array of elements and a currently focused ion-item
 * returns the previous ion-item relative to the focused one or
 * undefined.
 */
const getPrevItem = (items, currentItem) => {
  const currentItemIndex = getIndexOfItem(items, currentItem);
  return items[currentItemIndex - 1];
};
/** Focus the internal button of the ion-item */
const focusItem = item => {
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(item);
  const button = root.querySelector('button');
  if (button) {
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)(() => button.focus());
  }
};
/**
 * Returns `true` if `el` has been designated
 * as a trigger element for an ion-popover.
 */
const isTriggerElement = el => el.hasAttribute('data-ion-popover-trigger');
const configureKeyboardInteraction = popoverEl => {
  const callback = /*#__PURE__*/function () {
    var _ref2 = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (ev) {
      var _a;
      const activeElement = document.activeElement;
      let items = [];
      const targetTagName = (_a = ev.target) === null || _a === void 0 ? void 0 : _a.tagName;
      /**
       * Only handle custom keyboard interactions for the host popover element
       * and children ion-item elements.
       */
      if (targetTagName !== 'ION-POPOVER' && targetTagName !== 'ION-ITEM') {
        return;
      }
      /**
       * Complex selectors with :not() are :not supported
       * in older versions of Chromium so we need to do a
       * try/catch here so errors are not thrown.
       */
      try {
        /**
         * Select all ion-items that are not children of child popovers.
         * i.e. only select ion-item elements that are part of this popover
         */
        items = Array.from(popoverEl.querySelectorAll('ion-item:not(ion-popover ion-popover *):not([disabled])'));
        /* eslint-disable-next-line */
      } catch (_b) {}
      switch (ev.key) {
        /**
         * If we are in a child popover
         * then pressing the left arrow key
         * should close this popover and move
         * focus to the popover that presented
         * this one.
         */
        case 'ArrowLeft':
          const parentPopover = yield popoverEl.getParentPopover();
          if (parentPopover) {
            popoverEl.dismiss(undefined, undefined, false);
          }
          break;
        /**
         * ArrowDown should move focus to the next focusable ion-item.
         */
        case 'ArrowDown':
          // Disable movement/scroll with keyboard
          ev.preventDefault();
          const nextItem = getNextItem(items, activeElement);
          if (nextItem !== undefined) {
            focusItem(nextItem);
          }
          break;
        /**
         * ArrowUp should move focus to the previous focusable ion-item.
         */
        case 'ArrowUp':
          // Disable movement/scroll with keyboard
          ev.preventDefault();
          const prevItem = getPrevItem(items, activeElement);
          if (prevItem !== undefined) {
            focusItem(prevItem);
          }
          break;
        /**
         * Home should move focus to the first focusable ion-item.
         */
        case 'Home':
          ev.preventDefault();
          const firstItem = items[0];
          if (firstItem !== undefined) {
            focusItem(firstItem);
          }
          break;
        /**
         * End should move focus to the last focusable ion-item.
         */
        case 'End':
          ev.preventDefault();
          const lastItem = items[items.length - 1];
          if (lastItem !== undefined) {
            focusItem(lastItem);
          }
          break;
        /**
         * ArrowRight, Spacebar, or Enter should activate
         * the currently focused trigger item to open a
         * popover if the element is a trigger item.
         */
        case 'ArrowRight':
        case ' ':
        case 'Enter':
          if (activeElement && isTriggerElement(activeElement)) {
            const rightEvent = new CustomEvent('ionPopoverActivateTrigger');
            activeElement.dispatchEvent(rightEvent);
          }
          break;
      }
    });
    return function callback(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  popoverEl.addEventListener('keydown', callback);
  return () => popoverEl.removeEventListener('keydown', callback);
};
/**
 * Positions a popover by taking into account
 * the reference point, preferred side, alignment
 * and viewport dimensions.
 */
const getPopoverPosition = (isRTL, contentWidth, contentHeight, arrowWidth, arrowHeight, reference, side, align, defaultPosition, triggerEl, event) => {
  var _a;
  let referenceCoordinates = {
    top: 0,
    left: 0,
    width: 0,
    height: 0
  };
  /**
   * Calculate position relative to the
   * x-y coordinates in the event that
   * was passed in
   */
  switch (reference) {
    case 'event':
      if (!event) {
        return defaultPosition;
      }
      const mouseEv = event;
      referenceCoordinates = {
        top: mouseEv.clientY,
        left: mouseEv.clientX,
        width: 1,
        height: 1
      };
      break;
    /**
     * Calculate position relative to the bounding
     * box on either the trigger element
     * specified via the `trigger` prop or
     * the target specified on the event
     * that was passed in.
     */
    case 'trigger':
    default:
      const customEv = event;
      /**
       * ionShadowTarget is used when we need to align the
       * popover with an element inside of the shadow root
       * of an Ionic component. Ex: Presenting a popover
       * by clicking on the collapsed indicator inside
       * of `ion-breadcrumb` and centering it relative
       * to the indicator rather than `ion-breadcrumb`
       * as a whole.
       */
      const actualTriggerEl = triggerEl || ((_a = customEv === null || customEv === void 0 ? void 0 : customEv.detail) === null || _a === void 0 ? void 0 : _a.ionShadowTarget) || (customEv === null || customEv === void 0 ? void 0 : customEv.target);
      if (!actualTriggerEl) {
        return defaultPosition;
      }
      const triggerBoundingBox = actualTriggerEl.getBoundingClientRect();
      referenceCoordinates = {
        top: triggerBoundingBox.top,
        left: triggerBoundingBox.left,
        width: triggerBoundingBox.width,
        height: triggerBoundingBox.height
      };
      break;
  }
  /**
   * Get top/left offset that would allow
   * popover to be positioned on the
   * preferred side of the reference.
   */
  const coordinates = calculatePopoverSide(side, referenceCoordinates, contentWidth, contentHeight, arrowWidth, arrowHeight, isRTL);
  /**
   * Get the top/left adjustments that
   * would allow the popover content
   * to have the correct alignment.
   */
  const alignedCoordinates = calculatePopoverAlign(align, side, referenceCoordinates, contentWidth, contentHeight);
  const top = coordinates.top + alignedCoordinates.top;
  const left = coordinates.left + alignedCoordinates.left;
  const {
    arrowTop,
    arrowLeft
  } = calculateArrowPosition(side, arrowWidth, arrowHeight, top, left, contentWidth, contentHeight, isRTL);
  const {
    originX,
    originY
  } = calculatePopoverOrigin(side, align, isRTL);
  return {
    top,
    left,
    referenceCoordinates,
    arrowTop,
    arrowLeft,
    originX,
    originY
  };
};
/**
 * Determines the transform-origin
 * of the popover animation so that it
 * is in line with what the side and alignment
 * prop values are. Currently only used
 * with the MD animation.
 */
const calculatePopoverOrigin = (side, align, isRTL) => {
  switch (side) {
    case 'top':
      return {
        originX: getOriginXAlignment(align),
        originY: 'bottom'
      };
    case 'bottom':
      return {
        originX: getOriginXAlignment(align),
        originY: 'top'
      };
    case 'left':
      return {
        originX: 'right',
        originY: getOriginYAlignment(align)
      };
    case 'right':
      return {
        originX: 'left',
        originY: getOriginYAlignment(align)
      };
    case 'start':
      return {
        originX: isRTL ? 'left' : 'right',
        originY: getOriginYAlignment(align)
      };
    case 'end':
      return {
        originX: isRTL ? 'right' : 'left',
        originY: getOriginYAlignment(align)
      };
  }
};
const getOriginXAlignment = align => {
  switch (align) {
    case 'start':
      return 'left';
    case 'center':
      return 'center';
    case 'end':
      return 'right';
  }
};
const getOriginYAlignment = align => {
  switch (align) {
    case 'start':
      return 'top';
    case 'center':
      return 'center';
    case 'end':
      return 'bottom';
  }
};
/**
 * Calculates where the arrow positioning
 * should be relative to the popover content.
 */
const calculateArrowPosition = (side, arrowWidth, arrowHeight, top, left, contentWidth, contentHeight, isRTL) => {
  /**
   * Note: When side is left, right, start, or end, the arrow is
   * been rotated using a `transform`, so to move the arrow up or down
   * by its dimension, you need to use `arrowWidth`.
   */
  const leftPosition = {
    arrowTop: top + contentHeight / 2 - arrowWidth / 2,
    arrowLeft: left + contentWidth - arrowWidth / 2
  };
  /**
   * Move the arrow to the left by arrowWidth and then
   * again by half of its width because we have rotated
   * the arrow using a transform.
   */
  const rightPosition = {
    arrowTop: top + contentHeight / 2 - arrowWidth / 2,
    arrowLeft: left - arrowWidth * 1.5
  };
  switch (side) {
    case 'top':
      return {
        arrowTop: top + contentHeight,
        arrowLeft: left + contentWidth / 2 - arrowWidth / 2
      };
    case 'bottom':
      return {
        arrowTop: top - arrowHeight,
        arrowLeft: left + contentWidth / 2 - arrowWidth / 2
      };
    case 'left':
      return leftPosition;
    case 'right':
      return rightPosition;
    case 'start':
      return isRTL ? rightPosition : leftPosition;
    case 'end':
      return isRTL ? leftPosition : rightPosition;
    default:
      return {
        arrowTop: 0,
        arrowLeft: 0
      };
  }
};
/**
 * Calculates the required top/left
 * values needed to position the popover
 * content on the side specified in the
 * `side` prop.
 */
const calculatePopoverSide = (side, triggerBoundingBox, contentWidth, contentHeight, arrowWidth, arrowHeight, isRTL) => {
  const sideLeft = {
    top: triggerBoundingBox.top,
    left: triggerBoundingBox.left - contentWidth - arrowWidth
  };
  const sideRight = {
    top: triggerBoundingBox.top,
    left: triggerBoundingBox.left + triggerBoundingBox.width + arrowWidth
  };
  switch (side) {
    case 'top':
      return {
        top: triggerBoundingBox.top - contentHeight - arrowHeight,
        left: triggerBoundingBox.left
      };
    case 'right':
      return sideRight;
    case 'bottom':
      return {
        top: triggerBoundingBox.top + triggerBoundingBox.height + arrowHeight,
        left: triggerBoundingBox.left
      };
    case 'left':
      return sideLeft;
    case 'start':
      return isRTL ? sideRight : sideLeft;
    case 'end':
      return isRTL ? sideLeft : sideRight;
  }
};
/**
 * Calculates the required top/left
 * offset values needed to provide the
 * correct alignment regardless while taking
 * into account the side the popover is on.
 */
const calculatePopoverAlign = (align, side, triggerBoundingBox, contentWidth, contentHeight) => {
  switch (align) {
    case 'center':
      return calculatePopoverCenterAlign(side, triggerBoundingBox, contentWidth, contentHeight);
    case 'end':
      return calculatePopoverEndAlign(side, triggerBoundingBox, contentWidth, contentHeight);
    case 'start':
    default:
      return {
        top: 0,
        left: 0
      };
  }
};
/**
 * Calculate the end alignment for
 * the popover. If side is on the x-axis
 * then the align values refer to the top
 * and bottom margins of the content.
 * If side is on the y-axis then the
 * align values refer to the left and right
 * margins of the content.
 */
const calculatePopoverEndAlign = (side, triggerBoundingBox, contentWidth, contentHeight) => {
  switch (side) {
    case 'start':
    case 'end':
    case 'left':
    case 'right':
      return {
        top: -(contentHeight - triggerBoundingBox.height),
        left: 0
      };
    case 'top':
    case 'bottom':
    default:
      return {
        top: 0,
        left: -(contentWidth - triggerBoundingBox.width)
      };
  }
};
/**
 * Calculate the center alignment for
 * the popover. If side is on the x-axis
 * then the align values refer to the top
 * and bottom margins of the content.
 * If side is on the y-axis then the
 * align values refer to the left and right
 * margins of the content.
 */
const calculatePopoverCenterAlign = (side, triggerBoundingBox, contentWidth, contentHeight) => {
  switch (side) {
    case 'start':
    case 'end':
    case 'left':
    case 'right':
      return {
        top: -(contentHeight / 2 - triggerBoundingBox.height / 2),
        left: 0
      };
    case 'top':
    case 'bottom':
    default:
      return {
        top: 0,
        left: -(contentWidth / 2 - triggerBoundingBox.width / 2)
      };
  }
};
/**
 * Adjusts popover positioning coordinates
 * such that popover does not appear offscreen
 * or overlapping safe area bounds.
 */
const calculateWindowAdjustment = (side, coordTop, coordLeft, bodyPadding, bodyWidth, bodyHeight, contentWidth, contentHeight, safeAreaMargin, contentOriginX, contentOriginY, triggerCoordinates, coordArrowTop = 0, coordArrowLeft = 0, arrowHeight = 0) => {
  let arrowTop = coordArrowTop;
  const arrowLeft = coordArrowLeft;
  let left = coordLeft;
  let top = coordTop;
  let bottom;
  let originX = contentOriginX;
  let originY = contentOriginY;
  let checkSafeAreaLeft = false;
  let checkSafeAreaRight = false;
  const triggerTop = triggerCoordinates ? triggerCoordinates.top + triggerCoordinates.height : bodyHeight / 2 - contentHeight / 2;
  const triggerHeight = triggerCoordinates ? triggerCoordinates.height : 0;
  let addPopoverBottomClass = false;
  /**
   * Adjust popover so it does not
   * go off the left of the screen.
   */
  if (left < bodyPadding + safeAreaMargin) {
    left = bodyPadding;
    checkSafeAreaLeft = true;
    originX = 'left';
    /**
     * Adjust popover so it does not
     * go off the right of the screen.
     */
  } else if (contentWidth + bodyPadding + left + safeAreaMargin > bodyWidth) {
    checkSafeAreaRight = true;
    left = bodyWidth - contentWidth - bodyPadding;
    originX = 'right';
  }
  /**
   * Adjust popover so it does not
   * go off the top of the screen.
   * If popover is on the left or the right of
   * the trigger, then we should not adjust top
   * margins.
   */
  if (triggerTop + triggerHeight + contentHeight > bodyHeight && (side === 'top' || side === 'bottom')) {
    if (triggerTop - contentHeight > 0) {
      /**
       * While we strive to align the popover with the trigger
       * on smaller screens this is not always possible. As a result,
       * we adjust the popover up so that it does not hang
       * off the bottom of the screen. However, we do not want to move
       * the popover up so much that it goes off the top of the screen.
       *
       * We chose 12 here so that the popover position looks a bit nicer as
       * it is not right up against the edge of the screen.
       */
      top = Math.max(12, triggerTop - contentHeight - triggerHeight - (arrowHeight - 1));
      arrowTop = top + contentHeight;
      originY = 'bottom';
      addPopoverBottomClass = true;
      /**
       * If not enough room for popover to appear
       * above trigger, then cut it off.
       */
    } else {
      bottom = bodyPadding;
    }
  }
  return {
    top,
    left,
    bottom,
    originX,
    originY,
    checkSafeAreaLeft,
    checkSafeAreaRight,
    arrowTop,
    arrowLeft,
    addPopoverBottomClass
  };
};
const shouldShowArrow = (side, didAdjustBounds = false, ev, trigger) => {
  /**
   * If no event provided and
   * we do not have a trigger,
   * then this popover was likely
   * presented via the popoverController
   * or users called `present` manually.
   * In this case, the arrow should not be
   * shown as we do not have a reference.
   */
  if (!ev && !trigger) {
    return false;
  }
  /**
   * If popover is on the left or the right
   * of a trigger, but we needed to adjust the
   * popover due to screen bounds, then we should
   * hide the arrow as it will never be pointing
   * at the trigger.
   */
  if (side !== 'top' && side !== 'bottom' && didAdjustBounds) {
    return false;
  }
  return true;
};
const POPOVER_IOS_BODY_PADDING = 5;
/**
 * iOS Popover Enter Animation
 */
// TODO(FW-2832): types
const iosEnterAnimation = (baseEl, opts) => {
  var _a;
  const {
    event: ev,
    size,
    trigger,
    reference,
    side,
    align
  } = opts;
  const doc = baseEl.ownerDocument;
  const isRTL = doc.dir === 'rtl';
  const bodyWidth = doc.defaultView.innerWidth;
  const bodyHeight = doc.defaultView.innerHeight;
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(baseEl);
  const contentEl = root.querySelector('.popover-content');
  const arrowEl = root.querySelector('.popover-arrow');
  const referenceSizeEl = trigger || ((_a = ev === null || ev === void 0 ? void 0 : ev.detail) === null || _a === void 0 ? void 0 : _a.ionShadowTarget) || (ev === null || ev === void 0 ? void 0 : ev.target);
  const {
    contentWidth,
    contentHeight
  } = getPopoverDimensions(size, contentEl, referenceSizeEl);
  const {
    arrowWidth,
    arrowHeight
  } = getArrowDimensions(arrowEl);
  const defaultPosition = {
    top: bodyHeight / 2 - contentHeight / 2,
    left: bodyWidth / 2 - contentWidth / 2,
    originX: isRTL ? 'right' : 'left',
    originY: 'top'
  };
  const results = getPopoverPosition(isRTL, contentWidth, contentHeight, arrowWidth, arrowHeight, reference, side, align, defaultPosition, trigger, ev);
  const padding = size === 'cover' ? 0 : POPOVER_IOS_BODY_PADDING;
  const margin = size === 'cover' ? 0 : 25;
  const {
    originX,
    originY,
    top,
    left,
    bottom,
    checkSafeAreaLeft,
    checkSafeAreaRight,
    arrowTop,
    arrowLeft,
    addPopoverBottomClass
  } = calculateWindowAdjustment(side, results.top, results.left, padding, bodyWidth, bodyHeight, contentWidth, contentHeight, margin, results.originX, results.originY, results.referenceCoordinates, results.arrowTop, results.arrowLeft, arrowHeight);
  const baseAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  backdropAnimation.addElement(root.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
    'pointer-events': 'none'
  }).afterClearStyles(['pointer-events']);
  wrapperAnimation.addElement(root.querySelector('.popover-wrapper')).fromTo('opacity', 0.01, 1);
  return baseAnimation.easing('ease').duration(100).beforeAddWrite(() => {
    if (size === 'cover') {
      baseEl.style.setProperty('--width', `${contentWidth}px`);
    }
    if (addPopoverBottomClass) {
      baseEl.classList.add('popover-bottom');
    }
    if (bottom !== undefined) {
      contentEl.style.setProperty('bottom', `${bottom}px`);
    }
    const safeAreaLeft = ' + var(--ion-safe-area-left, 0)';
    const safeAreaRight = ' - var(--ion-safe-area-right, 0)';
    let leftValue = `${left}px`;
    if (checkSafeAreaLeft) {
      leftValue = `${left}px${safeAreaLeft}`;
    }
    if (checkSafeAreaRight) {
      leftValue = `${left}px${safeAreaRight}`;
    }
    contentEl.style.setProperty('top', `calc(${top}px + var(--offset-y, 0))`);
    contentEl.style.setProperty('left', `calc(${leftValue} + var(--offset-x, 0))`);
    contentEl.style.setProperty('transform-origin', `${originY} ${originX}`);
    if (arrowEl !== null) {
      const didAdjustBounds = results.top !== top || results.left !== left;
      const showArrow = shouldShowArrow(side, didAdjustBounds, ev, trigger);
      if (showArrow) {
        arrowEl.style.setProperty('top', `calc(${arrowTop}px + var(--offset-y, 0))`);
        arrowEl.style.setProperty('left', `calc(${arrowLeft}px + var(--offset-x, 0))`);
      } else {
        arrowEl.style.setProperty('display', 'none');
      }
    }
  }).addAnimation([backdropAnimation, wrapperAnimation]);
};

/**
 * iOS Popover Leave Animation
 */
const iosLeaveAnimation = baseEl => {
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(baseEl);
  const contentEl = root.querySelector('.popover-content');
  const arrowEl = root.querySelector('.popover-arrow');
  const baseAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  backdropAnimation.addElement(root.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0);
  wrapperAnimation.addElement(root.querySelector('.popover-wrapper')).fromTo('opacity', 0.99, 0);
  return baseAnimation.easing('ease').afterAddWrite(() => {
    baseEl.style.removeProperty('--width');
    baseEl.classList.remove('popover-bottom');
    contentEl.style.removeProperty('top');
    contentEl.style.removeProperty('left');
    contentEl.style.removeProperty('bottom');
    contentEl.style.removeProperty('transform-origin');
    if (arrowEl) {
      arrowEl.style.removeProperty('top');
      arrowEl.style.removeProperty('left');
      arrowEl.style.removeProperty('display');
    }
  }).duration(300).addAnimation([backdropAnimation, wrapperAnimation]);
};
const POPOVER_MD_BODY_PADDING = 12;
/**
 * Md Popover Enter Animation
 */
// TODO(FW-2832): types
const mdEnterAnimation = (baseEl, opts) => {
  var _a;
  const {
    event: ev,
    size,
    trigger,
    reference,
    side,
    align
  } = opts;
  const doc = baseEl.ownerDocument;
  const isRTL = doc.dir === 'rtl';
  const bodyWidth = doc.defaultView.innerWidth;
  const bodyHeight = doc.defaultView.innerHeight;
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(baseEl);
  const contentEl = root.querySelector('.popover-content');
  const referenceSizeEl = trigger || ((_a = ev === null || ev === void 0 ? void 0 : ev.detail) === null || _a === void 0 ? void 0 : _a.ionShadowTarget) || (ev === null || ev === void 0 ? void 0 : ev.target);
  const {
    contentWidth,
    contentHeight
  } = getPopoverDimensions(size, contentEl, referenceSizeEl);
  const defaultPosition = {
    top: bodyHeight / 2 - contentHeight / 2,
    left: bodyWidth / 2 - contentWidth / 2,
    originX: isRTL ? 'right' : 'left',
    originY: 'top'
  };
  const results = getPopoverPosition(isRTL, contentWidth, contentHeight, 0, 0, reference, side, align, defaultPosition, trigger, ev);
  const padding = size === 'cover' ? 0 : POPOVER_MD_BODY_PADDING;
  const {
    originX,
    originY,
    top,
    left,
    bottom
  } = calculateWindowAdjustment(side, results.top, results.left, padding, bodyWidth, bodyHeight, contentWidth, contentHeight, 0, results.originX, results.originY, results.referenceCoordinates);
  const baseAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const contentAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const viewportAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  backdropAnimation.addElement(root.querySelector('ion-backdrop')).fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
    'pointer-events': 'none'
  }).afterClearStyles(['pointer-events']);
  wrapperAnimation.addElement(root.querySelector('.popover-wrapper')).duration(150).fromTo('opacity', 0.01, 1);
  contentAnimation.addElement(contentEl).beforeStyles({
    top: `calc(${top}px + var(--offset-y, 0px))`,
    left: `calc(${left}px + var(--offset-x, 0px))`,
    'transform-origin': `${originY} ${originX}`
  }).beforeAddWrite(() => {
    if (bottom !== undefined) {
      contentEl.style.setProperty('bottom', `${bottom}px`);
    }
  }).fromTo('transform', 'scale(0.8)', 'scale(1)');
  viewportAnimation.addElement(root.querySelector('.popover-viewport')).fromTo('opacity', 0.01, 1);
  return baseAnimation.easing('cubic-bezier(0.36,0.66,0.04,1)').duration(300).beforeAddWrite(() => {
    if (size === 'cover') {
      baseEl.style.setProperty('--width', `${contentWidth}px`);
    }
    if (originY === 'bottom') {
      baseEl.classList.add('popover-bottom');
    }
  }).addAnimation([backdropAnimation, wrapperAnimation, contentAnimation, viewportAnimation]);
};

/**
 * Md Popover Leave Animation
 */
const mdLeaveAnimation = baseEl => {
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(baseEl);
  const contentEl = root.querySelector('.popover-content');
  const baseAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_9__.c)();
  backdropAnimation.addElement(root.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0);
  wrapperAnimation.addElement(root.querySelector('.popover-wrapper')).fromTo('opacity', 0.99, 0);
  return baseAnimation.easing('ease').afterAddWrite(() => {
    baseEl.style.removeProperty('--width');
    baseEl.classList.remove('popover-bottom');
    contentEl.style.removeProperty('top');
    contentEl.style.removeProperty('left');
    contentEl.style.removeProperty('bottom');
    contentEl.style.removeProperty('transform-origin');
  }).duration(150).addAnimation([backdropAnimation, wrapperAnimation]);
};
const popoverIosCss = ":host{--background:var(--ion-background-color, #fff);--min-width:0;--min-height:0;--max-width:auto;--height:auto;--offset-x:0px;--offset-y:0px;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:fixed;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;color:var(--ion-text-color, #000);z-index:1001}:host(.popover-nested){pointer-events:none}:host(.popover-nested) .popover-wrapper{pointer-events:auto}:host(.overlay-hidden){display:none}.popover-wrapper{opacity:0;z-index:10}.popover-content{display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:auto;z-index:10}.popover-viewport{--ion-safe-area-top:0px;--ion-safe-area-right:0px;--ion-safe-area-bottom:0px;--ion-safe-area-left:0px;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}:host(.popover-nested.popover-side-left){--offset-x:5px}:host(.popover-nested.popover-side-right){--offset-x:-5px}:host(.popover-nested.popover-side-start){--offset-x:5px}:host-context([dir=rtl]):host(.popover-nested.popover-side-start),:host-context([dir=rtl]).popover-nested.popover-side-start{--offset-x:-5px}:host(.popover-nested.popover-side-end){--offset-x:-5px}:host-context([dir=rtl]):host(.popover-nested.popover-side-end),:host-context([dir=rtl]).popover-nested.popover-side-end{--offset-x:5px}:host{--width:200px;--max-height:90%;--box-shadow:none;--backdrop-opacity:var(--ion-backdrop-opacity, 0.08)}:host(.popover-desktop){--box-shadow:0px 4px 16px 0px rgba(0, 0, 0, 0.12)}.popover-content{border-radius:10px}:host(.popover-desktop) .popover-content{border:0.5px solid var(--ion-color-step-100, #e6e6e6)}.popover-arrow{display:block;position:absolute;width:20px;height:10px;overflow:hidden}.popover-arrow::after{top:3px;border-radius:3px;position:absolute;width:14px;height:14px;-webkit-transform:rotate(45deg);transform:rotate(45deg);background:var(--background);content:\"\";z-index:10}@supports (inset-inline-start: 0){.popover-arrow::after{inset-inline-start:3px}}@supports not (inset-inline-start: 0){.popover-arrow::after{left:3px}[dir=rtl] .popover-arrow::after,:host-context([dir=rtl]) .popover-arrow::after{left:unset;right:unset;right:3px}}:host(.popover-bottom) .popover-arrow{top:auto;bottom:-10px}:host(.popover-bottom) .popover-arrow::after{top:-6px}:host(.popover-side-left) .popover-arrow{-webkit-transform:rotate(90deg);transform:rotate(90deg)}:host(.popover-side-right) .popover-arrow{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}:host(.popover-side-top) .popover-arrow{-webkit-transform:rotate(180deg);transform:rotate(180deg)}:host(.popover-side-start) .popover-arrow{-webkit-transform:rotate(90deg);transform:rotate(90deg)}:host-context([dir=rtl]):host(.popover-side-start) .popover-arrow,:host-context([dir=rtl]).popover-side-start .popover-arrow{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}:host(.popover-side-end) .popover-arrow{-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}:host-context([dir=rtl]):host(.popover-side-end) .popover-arrow,:host-context([dir=rtl]).popover-side-end .popover-arrow{-webkit-transform:rotate(90deg);transform:rotate(90deg)}@supports ((-webkit-backdrop-filter: blur(0)) or (backdrop-filter: blur(0))){:host(.popover-translucent) .popover-content,:host(.popover-translucent) .popover-arrow::after{background:rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);-webkit-backdrop-filter:saturate(180%) blur(20px);backdrop-filter:saturate(180%) blur(20px)}}";
const popoverMdCss = ":host{--background:var(--ion-background-color, #fff);--min-width:0;--min-height:0;--max-width:auto;--height:auto;--offset-x:0px;--offset-y:0px;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:fixed;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;color:var(--ion-text-color, #000);z-index:1001}:host(.popover-nested){pointer-events:none}:host(.popover-nested) .popover-wrapper{pointer-events:auto}:host(.overlay-hidden){display:none}.popover-wrapper{opacity:0;z-index:10}.popover-content{display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:auto;z-index:10}.popover-viewport{--ion-safe-area-top:0px;--ion-safe-area-right:0px;--ion-safe-area-bottom:0px;--ion-safe-area-left:0px;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;overflow:hidden}:host(.popover-nested.popover-side-left){--offset-x:5px}:host(.popover-nested.popover-side-right){--offset-x:-5px}:host(.popover-nested.popover-side-start){--offset-x:5px}:host-context([dir=rtl]):host(.popover-nested.popover-side-start),:host-context([dir=rtl]).popover-nested.popover-side-start{--offset-x:-5px}:host(.popover-nested.popover-side-end){--offset-x:-5px}:host-context([dir=rtl]):host(.popover-nested.popover-side-end),:host-context([dir=rtl]).popover-nested.popover-side-end{--offset-x:5px}:host{--width:250px;--max-height:90%;--box-shadow:0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);--backdrop-opacity:var(--ion-backdrop-opacity, 0.32)}.popover-content{border-radius:4px;-webkit-transform-origin:left top;transform-origin:left top}[dir=rtl] .popover-content,:host-context([dir=rtl]) .popover-content{-webkit-transform-origin:right top;transform-origin:right top}.popover-viewport{-webkit-transition-delay:100ms;transition-delay:100ms}";
const Popover = class {
  constructor(hostRef) {
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.didPresent = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionPopoverDidPresent", 7);
    this.willPresent = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionPopoverWillPresent", 7);
    this.willDismiss = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionPopoverWillDismiss", 7);
    this.didDismiss = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionPopoverDidDismiss", 7);
    this.didPresentShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "didPresent", 7);
    this.willPresentShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "willPresent", 7);
    this.willDismissShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "willDismiss", 7);
    this.didDismissShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "didDismiss", 7);
    this.ionMount = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionMount", 7);
    this.parentPopover = null;
    this.popoverIndex = popoverIds++;
    this.coreDelegate = (0,_framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_3__.C)();
    this.inline = false;
    this.focusDescendantOnPresent = false;
    this.onBackdropTap = () => {
      this.dismiss(undefined, _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.B);
    };
    this.onLifecycle = modalEvent => {
      const el = this.usersElement;
      const name = LIFECYCLE_MAP[modalEvent.type];
      if (el && name) {
        const event = new CustomEvent(name, {
          bubbles: false,
          cancelable: false,
          detail: modalEvent.detail
        });
        el.dispatchEvent(event);
      }
    };
    this.configureTriggerInteraction = () => {
      const {
        trigger,
        triggerAction,
        el,
        destroyTriggerInteraction
      } = this;
      if (destroyTriggerInteraction) {
        destroyTriggerInteraction();
      }
      if (trigger === undefined) {
        return;
      }
      const triggerEl = this.triggerEl = trigger !== undefined ? document.getElementById(trigger) : null;
      if (!triggerEl) {
        (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__.p)(`A trigger element with the ID "${trigger}" was not found in the DOM. The trigger element must be in the DOM when the "trigger" property is set on ion-popover.`, this.el);
        return;
      }
      this.destroyTriggerInteraction = configureTriggerInteraction(triggerEl, triggerAction, el);
    };
    this.configureKeyboardInteraction = () => {
      const {
        destroyKeyboardInteraction,
        el
      } = this;
      if (destroyKeyboardInteraction) {
        destroyKeyboardInteraction();
      }
      this.destroyKeyboardInteraction = configureKeyboardInteraction(el);
    };
    this.configureDismissInteraction = () => {
      const {
        destroyDismissInteraction,
        parentPopover,
        triggerAction,
        triggerEl,
        el
      } = this;
      if (!parentPopover || !triggerEl) {
        return;
      }
      if (destroyDismissInteraction) {
        destroyDismissInteraction();
      }
      this.destroyDismissInteraction = configureDismissInteraction(triggerEl, triggerAction, el, parentPopover);
    };
    this.presented = false;
    this.hasController = false;
    this.delegate = undefined;
    this.overlayIndex = undefined;
    this.enterAnimation = undefined;
    this.leaveAnimation = undefined;
    this.component = undefined;
    this.componentProps = undefined;
    this.keyboardClose = true;
    this.cssClass = undefined;
    this.backdropDismiss = true;
    this.event = undefined;
    this.showBackdrop = true;
    this.translucent = false;
    this.animated = true;
    this.htmlAttributes = undefined;
    this.triggerAction = 'click';
    this.trigger = undefined;
    this.size = 'auto';
    this.dismissOnSelect = false;
    this.reference = 'trigger';
    this.side = 'bottom';
    this.alignment = undefined;
    this.arrow = true;
    this.isOpen = false;
    this.keyboardEvents = false;
    this.keepContentsMounted = false;
  }
  onTriggerChange() {
    this.configureTriggerInteraction();
  }
  onIsOpenChange(newValue, oldValue) {
    if (newValue === true && oldValue === false) {
      this.present();
    } else if (newValue === false && oldValue === true) {
      this.dismiss();
    }
  }
  connectedCallback() {
    const {
      configureTriggerInteraction,
      el
    } = this;
    (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.j)(el);
    configureTriggerInteraction();
  }
  disconnectedCallback() {
    const {
      destroyTriggerInteraction
    } = this;
    if (destroyTriggerInteraction) {
      destroyTriggerInteraction();
    }
  }
  componentWillLoad() {
    /**
     * If user has custom ID set then we should
     * not assign the default incrementing ID.
     */
    this.popoverId = this.el.hasAttribute('id') ? this.el.getAttribute('id') : `ion-popover-${this.popoverIndex}`;
    this.parentPopover = this.el.closest(`ion-popover:not(#${this.popoverId})`);
    if (this.alignment === undefined) {
      this.alignment = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this) === 'ios' ? 'center' : 'start';
    }
  }
  componentDidLoad() {
    const {
      parentPopover,
      isOpen
    } = this;
    /**
     * If popover was rendered with isOpen="true"
     * then we should open popover immediately.
     */
    if (isOpen === true) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)(() => this.present());
    }
    if (parentPopover) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.a)(parentPopover, 'ionPopoverWillDismiss', () => {
        this.dismiss(undefined, undefined, false);
      });
    }
  }
  /**
   * When opening a popover from a trigger, we should not be
   * modifying the `event` prop from inside the component.
   * Additionally, when pressing the "Right" arrow key, we need
   * to shift focus to the first descendant in the newly presented
   * popover.
   *
   * @internal
   */
  presentFromTrigger(event, focusDescendant = false) {
    var _this = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this.focusDescendantOnPresent = focusDescendant;
      yield _this.present(event);
      _this.focusDescendantOnPresent = false;
    })();
  }
  /**
   * Determines whether or not an overlay
   * is being used inline or via a controller/JS
   * and returns the correct delegate.
   * By default, subsequent calls to getDelegate
   * will use a cached version of the delegate.
   * This is useful for calling dismiss after
   * present so that the correct delegate is given.
   */
  getDelegate(force = false) {
    if (this.workingDelegate && !force) {
      return {
        delegate: this.workingDelegate,
        inline: this.inline
      };
    }
    /**
     * If using overlay inline
     * we potentially need to use the coreDelegate
     * so that this works in vanilla JS apps.
     * If a developer has presented this component
     * via a controller, then we can assume
     * the component is already in the
     * correct place.
     */
    const parentEl = this.el.parentNode;
    const inline = this.inline = parentEl !== null && !this.hasController;
    const delegate = this.workingDelegate = inline ? this.delegate || this.coreDelegate : this.delegate;
    return {
      inline,
      delegate
    };
  }
  /**
   * Present the popover overlay after it has been created.
   * Developers can pass a mouse, touch, or pointer event
   * to position the popover relative to where that event
   * was dispatched.
   */
  present(event) {
    var _this2 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.presented) {
        return;
      }
      /**
       * When using an inline popover
       * and dismissing a popover it is possible to
       * quickly present the popover while it is
       * dismissing. We need to await any current
       * transition to allow the dismiss to finish
       * before presenting again.
       */
      if (_this2.currentTransition !== undefined) {
        yield _this2.currentTransition;
      }
      const {
        el
      } = _this2;
      const {
        inline,
        delegate
      } = _this2.getDelegate(true);
      _this2.usersElement = yield (0,_framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_3__.a)(delegate, el, _this2.component, ['popover-viewport'], _this2.componentProps, inline);
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.m)(el) && (yield (0,_index_93867f4c_js__WEBPACK_IMPORTED_MODULE_8__.e)(_this2.usersElement));
      if (!_this2.keyboardEvents) {
        _this2.configureKeyboardInteraction();
      }
      _this2.configureDismissInteraction();
      _this2.ionMount.emit();
      return new Promise(resolve => {
        /**
         * Wait two request animation frame loops before presenting the popover.
         * This allows the framework implementations enough time to mount
         * the popover contents, so the bounding box is set when the popover
         * transition starts.
         *
         * On Angular and React, a single raf is enough time, but for Vue
         * we need to wait two rafs. As a result we are using two rafs for
         * all frameworks to ensure the popover is presented correctly.
         */
        (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)(() => {
          (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)( /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
            _this2.currentTransition = (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.f)(_this2, 'popoverEnter', iosEnterAnimation, mdEnterAnimation, {
              event: event || _this2.event,
              size: _this2.size,
              trigger: _this2.triggerEl,
              reference: _this2.reference,
              side: _this2.side,
              align: _this2.alignment
            });
            yield _this2.currentTransition;
            _this2.currentTransition = undefined;
            /**
             * If popover is nested and was
             * presented using the "Right" arrow key,
             * we need to move focus to the first
             * descendant inside of the popover.
             */
            if (_this2.focusDescendantOnPresent) {
              (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.n)(_this2.el, _this2.el);
            }
            resolve();
          }));
        });
      });
    })();
  }
  /**
   * Dismiss the popover overlay after it has been presented.
   *
   * @param data Any data to emit in the dismiss events.
   * @param role The role of the element that is dismissing the popover. For example, 'cancel' or 'backdrop'.
   * @param dismissParentPopover If `true`, dismissing this popover will also dismiss
   * a parent popover if this popover is nested. Defaults to `true`.
   */
  dismiss(data, role, dismissParentPopover = true) {
    var _this3 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      /**
       * When using an inline popover
       * and presenting a popover it is possible to
       * quickly dismiss the popover while it is
       * presenting. We need to await any current
       * transition to allow the present to finish
       * before dismissing again.
       */
      if (_this3.currentTransition !== undefined) {
        yield _this3.currentTransition;
      }
      const {
        destroyKeyboardInteraction,
        destroyDismissInteraction
      } = _this3;
      if (dismissParentPopover && _this3.parentPopover) {
        _this3.parentPopover.dismiss(data, role, dismissParentPopover);
      }
      _this3.currentTransition = (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.g)(_this3, data, role, 'popoverLeave', iosLeaveAnimation, mdLeaveAnimation, _this3.event);
      const shouldDismiss = yield _this3.currentTransition;
      if (shouldDismiss) {
        if (destroyKeyboardInteraction) {
          destroyKeyboardInteraction();
          _this3.destroyKeyboardInteraction = undefined;
        }
        if (destroyDismissInteraction) {
          destroyDismissInteraction();
          _this3.destroyDismissInteraction = undefined;
        }
        /**
         * If using popover inline
         * we potentially need to use the coreDelegate
         * so that this works in vanilla JS apps
         */
        const {
          delegate
        } = _this3.getDelegate();
        yield (0,_framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_3__.d)(delegate, _this3.usersElement);
      }
      _this3.currentTransition = undefined;
      return shouldDismiss;
    })();
  }
  /**
   * @internal
   */
  getParentPopover() {
    var _this4 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this4.parentPopover;
    })();
  }
  /**
   * Returns a promise that resolves when the popover did dismiss.
   */
  onDidDismiss() {
    return (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.h)(this.el, 'ionPopoverDidDismiss');
  }
  /**
   * Returns a promise that resolves when the popover will dismiss.
   */
  onWillDismiss() {
    return (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_6__.h)(this.el, 'ionPopoverWillDismiss');
  }
  render() {
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const {
      onLifecycle,
      popoverId,
      parentPopover,
      dismissOnSelect,
      side,
      arrow,
      htmlAttributes
    } = this;
    const desktop = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.a)('desktop');
    const enableArrow = arrow && !parentPopover;
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, Object.assign({
      "aria-modal": "true",
      "no-router": true,
      tabindex: "-1"
    }, htmlAttributes, {
      style: {
        zIndex: `${20000 + this.overlayIndex}`
      },
      id: popoverId,
      class: Object.assign(Object.assign({}, (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_7__.g)(this.cssClass)), {
        [mode]: true,
        'popover-translucent': this.translucent,
        'overlay-hidden': true,
        'popover-desktop': desktop,
        [`popover-side-${side}`]: true,
        'popover-nested': !!parentPopover
      }),
      onIonPopoverDidPresent: onLifecycle,
      onIonPopoverWillPresent: onLifecycle,
      onIonPopoverWillDismiss: onLifecycle,
      onIonPopoverDidDismiss: onLifecycle,
      onIonBackdropTap: this.onBackdropTap
    }), !parentPopover && (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-backdrop", {
      tappable: this.backdropDismiss,
      visible: this.showBackdrop,
      part: "backdrop"
    }), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "popover-wrapper ion-overlay-wrapper",
      onClick: dismissOnSelect ? () => this.dismiss() : undefined
    }, enableArrow && (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "popover-arrow",
      part: "arrow"
    }), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "popover-content",
      part: "content"
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null))));
  }
  get el() {
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "trigger": ["onTriggerChange"],
      "triggerAction": ["onTriggerChange"],
      "isOpen": ["onIsOpenChange"]
    };
  }
};
const LIFECYCLE_MAP = {
  ionPopoverDidPresent: 'ionViewDidEnter',
  ionPopoverWillPresent: 'ionViewWillEnter',
  ionPopoverWillDismiss: 'ionViewWillLeave',
  ionPopoverDidDismiss: 'ionViewDidLeave'
};
let popoverIds = 0;
Popover.style = {
  ios: popoverIosCss,
  md: popoverMdCss
};


/***/ }),

/***/ 320:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */
const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};
const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }
  return [];
};
const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};
const SCHEME = /^[a-z][a-z0-9+\-.]*:/;
const openURL = /*#__PURE__*/function () {
  var _ref = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');
      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }
        return router.push(url, direction, animation);
      }
    }
    return false;
  });
  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXBvcG92ZXJfZW50cnlfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDNkc7QUFDL0I7QUFDbUM7QUFDRDtBQUNyRDtBQUMwRjtBQUM5RjtBQUNGO0FBQ1U7QUFDbkI7QUFDZjs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU11QyxrQkFBa0IsR0FBSUMsT0FBTyxJQUFLO0VBQ3RDLElBQUksQ0FBQ0EsT0FBTyxFQUFFO0lBQ1osT0FBTztNQUFFQyxVQUFVLEVBQUUsQ0FBQztNQUFFQyxXQUFXLEVBQUU7SUFBRSxDQUFDO0VBQzFDO0VBQ0EsTUFBTTtJQUFFQyxLQUFLO0lBQUVDO0VBQU8sQ0FBQyxHQUFHSixPQUFPLENBQUNLLHFCQUFxQixFQUFFO0VBQ3pELE9BQU87SUFBRUosVUFBVSxFQUFFRSxLQUFLO0lBQUVELFdBQVcsRUFBRUU7RUFBTyxDQUFDO0FBQ25ELENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUUsb0JBQW9CLEdBQUdBLENBQUNDLElBQUksRUFBRUMsU0FBUyxFQUFFQyxTQUFTLEtBQUs7RUFDM0QsTUFBTUMsaUJBQWlCLEdBQUdGLFNBQVMsQ0FBQ0gscUJBQXFCLEVBQUU7RUFDM0QsTUFBTU0sYUFBYSxHQUFHRCxpQkFBaUIsQ0FBQ04sTUFBTTtFQUM5QyxJQUFJUSxZQUFZLEdBQUdGLGlCQUFpQixDQUFDUCxLQUFLO0VBQzFDLElBQUlJLElBQUksS0FBSyxPQUFPLElBQUlFLFNBQVMsRUFBRTtJQUNqQyxNQUFNSSxpQkFBaUIsR0FBR0osU0FBUyxDQUFDSixxQkFBcUIsRUFBRTtJQUMzRE8sWUFBWSxHQUFHQyxpQkFBaUIsQ0FBQ1YsS0FBSztFQUN4QztFQUNBLE9BQU87SUFDTFMsWUFBWTtJQUNaRDtFQUNGLENBQUM7QUFDSCxDQUFDO0FBQ0QsTUFBTUcsMkJBQTJCLEdB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b2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1wb3BvdmVyLmVudHJ5LmpzIiwiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vdGhlbWUtNzY3MDM0MWMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgZCBhcyBjcmVhdGVFdmVudCwgaCwgSCBhcyBIb3N0LCBmIGFzIGdldEVsZW1lbnQgfSBmcm9tICcuL2luZGV4LWJlMjE4ZDcwLmpzJztcbmltcG9ydCB7IGIgYXMgZ2V0SW9uTW9kZSwgYSBhcyBpc1BsYXRmb3JtIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtM2IyOGEyMjUuanMnO1xuaW1wb3J0IHsgQyBhcyBDb3JlRGVsZWdhdGUsIGEgYXMgYXR0YWNoQ29tcG9uZW50LCBkIGFzIGRldGFjaENvbXBvbmVudCB9IGZyb20gJy4vZnJhbWV3b3JrLWRlbGVnYXRlLTI4ZjdlYTI5LmpzJztcbmltcG9ydCB7IHIgYXMgcmFmLCBnIGFzIGdldEVsZW1lbnRSb290LCBhIGFzIGFkZEV2ZW50TGlzdGVuZXIsIG0gYXMgaGFzTGF6eUJ1aWxkIH0gZnJvbSAnLi9oZWxwZXJzLTVlYjYzNjRkLmpzJztcbmltcG9ydCB7IHAgYXMgcHJpbnRJb25XYXJuaW5nIH0gZnJvbSAnLi9pbmRleC1lODZmMDExNy5qcyc7XG5pbXBvcnQgeyBCIGFzIEJBQ0tEUk9QLCBqIGFzIHByZXBhcmVPdmVybGF5LCBmIGFzIHByZXNlbnQsIG4gYXMgZm9jdXNGaXJzdERlc2NlbmRhbnQsIGcgYXMgZGlzbWlzcywgaCBhcyBldmVudE1ldGhvZCB9IGZyb20gJy4vb3ZlcmxheXMtMTY2YjM0YWUuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRDbGFzc01hcCB9IGZyb20gJy4vdGhlbWUtNzY3MDM0MWMuanMnO1xuaW1wb3J0IHsgZSBhcyBkZWVwUmVhZHkgfSBmcm9tICcuL2luZGV4LTkzODY3ZjRjLmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlQW5pbWF0aW9uIH0gZnJvbSAnLi9hbmltYXRpb24tOWE4OTBjYWQuanMnO1xuaW1wb3J0ICcuL2hhcmR3YXJlLWJhY2stYnV0dG9uLTQ5MGRmMTE1LmpzJztcbmltcG9ydCAnLi9pbmRleC0zM2ZmZWMyNS5qcyc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGltZW5zaW9ucyBvZiB0aGUgcG9wb3ZlclxuICogYXJyb3cgb24gYGlvc2AgbW9kZS4gSWYgYXJyb3cgaXMgZGlzYWJsZWRcbiAqIHJldHVybnMgKDAsIDApLlxuICovXG5jb25zdCBnZXRBcnJvd0RpbWVuc2lvbnMgPSAoYXJyb3dFbCkgPT4ge1xuICBpZiAoIWFycm93RWwpIHtcbiAgICByZXR1cm4geyBhcnJvd1dpZHRoOiAwLCBhcnJvd0hlaWdodDogMCB9O1xuICB9XG4gIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gYXJyb3dFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHsgYXJyb3dXaWR0aDogd2lkdGgsIGFycm93SGVpZ2h0OiBoZWlnaHQgfTtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIHJlY29tbWVuZGVkIGRpbWVuc2lvbnMgb2YgdGhlIHBvcG92ZXJcbiAqIHRoYXQgdGFrZXMgaW50byBhY2NvdW50IHdoZXRoZXIgb3Igbm90IHRoZSB3aWR0aFxuICogc2hvdWxkIG1hdGNoIHRoZSB0cmlnZ2VyIHdpZHRoLlxuICovXG5jb25zdCBnZXRQb3BvdmVyRGltZW5zaW9ucyA9IChzaXplLCBjb250ZW50RWwsIHRyaWdnZXJFbCkgPT4ge1xuICBjb25zdCBjb250ZW50RGltZW50aW9ucyA9IGNvbnRlbnRFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY29udGVudEhlaWdodCA9IGNvbnRlbnREaW1lbnRpb25zLmhlaWdodDtcbiAgbGV0IGNvbnRlbnRXaWR0aCA9IGNvbnRlbnREaW1lbnRpb25zLndpZHRoO1xuICBpZiAoc2l6ZSA9PT0gJ2NvdmVyJyAmJiB0cmlnZ2VyRWwpIHtcbiAgICBjb25zdCB0cmlnZ2VyRGltZW5zaW9ucyA9IHRyaWdnZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb250ZW50V2lkdGggPSB0cmlnZ2VyRGltZW5zaW9ucy53aWR0aDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGNvbnRlbnRXaWR0aCxcbiAgICBjb250ZW50SGVpZ2h0LFxuICB9O1xufTtcbmNvbnN0IGNvbmZpZ3VyZURpc21pc3NJbnRlcmFjdGlvbiA9ICh0cmlnZ2VyRWwsIHRyaWdnZXJBY3Rpb24sIHBvcG92ZXJFbCwgcGFyZW50UG9wb3ZlckVsKSA9PiB7XG4gIGxldCBkaXNtaXNzQ2FsbGJhY2tzID0gW107XG4gIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChwYXJlbnRQb3BvdmVyRWwpO1xuICBjb25zdCBwYXJlbnRDb250ZW50RWwgPSByb290LnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWNvbnRlbnQnKTtcbiAgc3dpdGNoICh0cmlnZ2VyQWN0aW9uKSB7XG4gICAgY2FzZSAnaG92ZXInOlxuICAgICAgZGlzbWlzc0NhbGxiYWNrcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIERvIG5vdCB1c2UgbW91c2VvdmVyIGhlcmVcbiAgICAgICAgICAgKiBhcyB0aGlzIHdpbGwgY2F1c2VzIHRoZSBldmVudCB0b1xuICAgICAgICAgICAqIGJlIGRpc3BhdGNoZWQgb24gZWFjaCB1bmRlcmx5aW5nXG4gICAgICAgICAgICogZWxlbWVudCByYXRoZXIgdGhhbiBvbiB0aGUgcG9wb3ZlclxuICAgICAgICAgICAqIGNvbnRlbnQgYXMgYSB3aG9sZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBldmVudE5hbWU6ICdtb3VzZWVudGVyJyxcbiAgICAgICAgICBjYWxsYmFjazogKGV2KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERvIG5vdCBkaXNtaXNzIHRoZSBwb3BvdmVyIGlzIHdlXG4gICAgICAgICAgICAgKiBhcmUgaG92ZXJpbmcgb3ZlciBpdHMgdHJpZ2dlci5cbiAgICAgICAgICAgICAqIFRoaXMgd291bGQgYmUgZWFzaWVyIGlmIHdlIHVzZWQgbW91c2VvdmVyXG4gICAgICAgICAgICAgKiBidXQgdGhpcyB3b3VsZCBjYXVzZSB0aGUgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgICogbW9yZSBvZnRlbiB0aGFuIHdlIHdvdWxkIGxpa2UsIHBvdGVudGlhbGx5XG4gICAgICAgICAgICAgKiBjYXVzaW5nIHBlcmZvcm1hbmNlIGlzc3Vlcy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmVsZW1lbnRGcm9tUG9pbnQoZXYuY2xpZW50WCwgZXYuY2xpZW50WSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PT0gdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcG92ZXJFbC5kaXNtaXNzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjb250ZXh0LW1lbnUnOlxuICAgIGNhc2UgJ2NsaWNrJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGlzbWlzc0NhbGxiYWNrcyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50TmFtZTogJ2NsaWNrJyxcbiAgICAgICAgICBjYWxsYmFjazogKGV2KSA9PiB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERvIG5vdCBkaXNtaXNzIHRoZSBwb3BvdmVyIGlzIHdlXG4gICAgICAgICAgICAgKiBhcmUgaG92ZXJpbmcgb3ZlciBpdHMgdHJpZ2dlci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICAgICAgY29uc3QgY2xvc2VzdFRyaWdnZXIgPSB0YXJnZXQuY2xvc2VzdCgnW2RhdGEtaW9uLXBvcG92ZXItdHJpZ2dlcl0nKTtcbiAgICAgICAgICAgIGlmIChjbG9zZXN0VHJpZ2dlciA9PT0gdHJpZ2dlckVsKSB7XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBzdG9wUHJvcGFnYXRpb24gaGVyZSBzbyBpZiB0aGVcbiAgICAgICAgICAgICAgICogcG9wb3ZlciBoYXMgZGlzbWlzc09uU2VsZWN0PVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAqIHRoZSBwb3BvdmVyIGRvZXMgbm90IGRpc21pc3Mgc2luY2VcbiAgICAgICAgICAgICAgICogd2UganVzdCBjbGlja2VkIGEgdHJpZ2dlciBlbGVtZW50LlxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBvcG92ZXJFbC5kaXNtaXNzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgICBicmVhaztcbiAgfVxuICBkaXNtaXNzQ2FsbGJhY2tzLmZvckVhY2goKHsgZXZlbnROYW1lLCBjYWxsYmFjayB9KSA9PiBwYXJlbnRDb250ZW50RWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgZGlzbWlzc0NhbGxiYWNrcy5mb3JFYWNoKCh7IGV2ZW50TmFtZSwgY2FsbGJhY2sgfSkgPT4gcGFyZW50Q29udGVudEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykpO1xuICB9O1xufTtcbi8qKlxuICogQ29uZmlndXJlcyB0aGUgdHJpZ2dlckVsIHRvIHJlc3BvbmRcbiAqIHRvIHVzZXIgaW50ZXJhY3Rpb24gYmFzZWQgdXBvbiB0aGUgdHJpZ2dlckFjdGlvblxuICogcHJvcCB0aGF0IGRldnMgaGF2ZSBkZWZpbmVkLlxuICovXG5jb25zdCBjb25maWd1cmVUcmlnZ2VySW50ZXJhY3Rpb24gPSAodHJpZ2dlckVsLCB0cmlnZ2VyQWN0aW9uLCBwb3BvdmVyRWwpID0+IHtcbiAgbGV0IHRyaWdnZXJDYWxsYmFja3MgPSBbXTtcbiAgLyoqXG4gICAqIEJhc2VkIHVwb24gdGhlIGtpbmQgb2YgdHJpZ2dlciBpbnRlcmFjdGlvblxuICAgKiB0aGUgdXNlciB3YW50cywgd2Ugc2V0dXAgdGhlIGNvcnJlY3QgZXZlbnRcbiAgICogbGlzdGVuZXJzLlxuICAgKi9cbiAgc3dpdGNoICh0cmlnZ2VyQWN0aW9uKSB7XG4gICAgY2FzZSAnaG92ZXInOlxuICAgICAgbGV0IGhvdmVyVGltZW91dDtcbiAgICAgIHRyaWdnZXJDYWxsYmFja3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudE5hbWU6ICdtb3VzZWVudGVyJyxcbiAgICAgICAgICBjYWxsYmFjazogYXN5bmMgKGV2KSA9PiB7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGlmIChob3ZlclRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhvdmVyVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEhvdmVyaW5nIG92ZXIgYSB0cmlnZ2VyIHNob3VsZCBub3RcbiAgICAgICAgICAgICAqIGltbWVkaWF0ZWx5IG9wZW4gdGhlIG5leHQgcG9wb3Zlci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaG92ZXJUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgIHJhZigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcG9wb3ZlckVsLnByZXNlbnRGcm9tVHJpZ2dlcihldik7XG4gICAgICAgICAgICAgICAgaG92ZXJUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGV2ZW50TmFtZTogJ21vdXNlbGVhdmUnLFxuICAgICAgICAgIGNhbGxiYWNrOiAoZXYpID0+IHtcbiAgICAgICAgICAgIGlmIChob3ZlclRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGhvdmVyVGltZW91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIElmIG1vdXNlIGlzIG92ZXIgYW5vdGhlciBwb3BvdmVyXG4gICAgICAgICAgICAgKiB0aGF0IGlzIG5vdCB0aGlzIHBvcG92ZXIgdGhlbiB3ZSBzaG91bGRcbiAgICAgICAgICAgICAqIGNsb3NlIHRoaXMgcG9wb3Zlci5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYucmVsYXRlZFRhcmdldDtcbiAgICAgICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnaW9uLXBvcG92ZXInKSAhPT0gcG9wb3ZlckVsKSB7XG4gICAgICAgICAgICAgIHBvcG92ZXJFbC5kaXNtaXNzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIHN0b3BQcm9wYWdhdGlvbiBoZXJlIHByZXZlbnRzIHRoZSBwb3BvdmVyXG4gICAgICAgICAgICogZnJvbSBkaXNtaXNzaW5nIHdoZW4gZGlzbWlzcy1vbi1zZWxlY3Q9XCJ0cnVlXCIuXG4gICAgICAgICAgICovXG4gICAgICAgICAgZXZlbnROYW1lOiAnY2xpY2snLFxuICAgICAgICAgIGNhbGxiYWNrOiAoZXYpID0+IGV2LnN0b3BQcm9wYWdhdGlvbigpLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZXZlbnROYW1lOiAnaW9uUG9wb3ZlckFjdGl2YXRlVHJpZ2dlcicsXG4gICAgICAgICAgY2FsbGJhY2s6IChldikgPT4gcG9wb3ZlckVsLnByZXNlbnRGcm9tVHJpZ2dlcihldiwgdHJ1ZSksXG4gICAgICAgIH0sXG4gICAgICBdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY29udGV4dC1tZW51JzpcbiAgICAgIHRyaWdnZXJDYWxsYmFja3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudE5hbWU6ICdjb250ZXh0bWVudScsXG4gICAgICAgICAgY2FsbGJhY2s6IChldikgPT4ge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcmV2ZW50cyB0aGUgcGxhdGZvcm0gY29udGV4dFxuICAgICAgICAgICAgICogbWVudSBmcm9tIGFwcGVhcmluZy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHBvcG92ZXJFbC5wcmVzZW50RnJvbVRyaWdnZXIoZXYpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgICAgICAgY2FsbGJhY2s6IChldikgPT4gZXYuc3RvcFByb3BhZ2F0aW9uKCksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudE5hbWU6ICdpb25Qb3BvdmVyQWN0aXZhdGVUcmlnZ2VyJyxcbiAgICAgICAgICBjYWxsYmFjazogKGV2KSA9PiBwb3BvdmVyRWwucHJlc2VudEZyb21UcmlnZ2VyKGV2LCB0cnVlKSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjbGljayc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHRyaWdnZXJDYWxsYmFja3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBEbyBub3QgZG8gYSBzdG9wUHJvcGFnYXRpb24oKSBoZXJlXG4gICAgICAgICAgICogYmVjYXVzZSBpZiB5b3UgaGFkIHR3byBjbGljayB0cmlnZ2Vyc1xuICAgICAgICAgICAqIHRoZW4gY2xpY2tpbmcgdGhlIGZpcnN0IHRyaWdnZXIgYW5kIHRoZW5cbiAgICAgICAgICAgKiBjbGlja2luZyB0aGUgc2Vjb25kIHRyaWdnZXIgd291bGQgbm90IGNhdXNlXG4gICAgICAgICAgICogdGhlIGZpcnN0IHBvcG92ZXIgdG8gZGlzbWlzcy5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBldmVudE5hbWU6ICdjbGljaycsXG4gICAgICAgICAgY2FsbGJhY2s6IChldikgPT4gcG9wb3ZlckVsLnByZXNlbnRGcm9tVHJpZ2dlcihldiksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBldmVudE5hbWU6ICdpb25Qb3BvdmVyQWN0aXZhdGVUcmlnZ2VyJyxcbiAgICAgICAgICBjYWxsYmFjazogKGV2KSA9PiBwb3BvdmVyRWwucHJlc2VudEZyb21UcmlnZ2VyKGV2LCB0cnVlKSxcbiAgICAgICAgfSxcbiAgICAgIF07XG4gICAgICBicmVhaztcbiAgfVxuICB0cmlnZ2VyQ2FsbGJhY2tzLmZvckVhY2goKHsgZXZlbnROYW1lLCBjYWxsYmFjayB9KSA9PiB0cmlnZ2VyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSk7XG4gIHRyaWdnZXJFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaW9uLXBvcG92ZXItdHJpZ2dlcicsICd0cnVlJyk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgdHJpZ2dlckNhbGxiYWNrcy5mb3JFYWNoKCh7IGV2ZW50TmFtZSwgY2FsbGJhY2sgfSkgPT4gdHJpZ2dlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykpO1xuICAgIHRyaWdnZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaW9uLXBvcG92ZXItdHJpZ2dlcicpO1xuICB9O1xufTtcbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgYW4gaW9uLWl0ZW0gaW4gYW4gYXJyYXkgb2YgaW9uLWl0ZW1zLlxuICovXG5jb25zdCBnZXRJbmRleE9mSXRlbSA9IChpdGVtcywgaXRlbSkgPT4ge1xuICBpZiAoIWl0ZW0gfHwgaXRlbS50YWdOYW1lICE9PSAnSU9OLUlURU0nKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHJldHVybiBpdGVtcy5maW5kSW5kZXgoKGVsKSA9PiBlbCA9PT0gaXRlbSk7XG59O1xuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgYSBjdXJyZW50bHkgZm9jdXNlZCBpb24taXRlbVxuICogcmV0dXJucyB0aGUgbmV4dCBpb24taXRlbSByZWxhdGl2ZSB0byB0aGUgZm9jdXNlZCBvbmUgb3JcbiAqIHVuZGVmaW5lZC5cbiAqL1xuY29uc3QgZ2V0TmV4dEl0ZW0gPSAoaXRlbXMsIGN1cnJlbnRJdGVtKSA9PiB7XG4gIGNvbnN0IGN1cnJlbnRJdGVtSW5kZXggPSBnZXRJbmRleE9mSXRlbShpdGVtcywgY3VycmVudEl0ZW0pO1xuICByZXR1cm4gaXRlbXNbY3VycmVudEl0ZW1JbmRleCArIDFdO1xufTtcbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIGEgY3VycmVudGx5IGZvY3VzZWQgaW9uLWl0ZW1cbiAqIHJldHVybnMgdGhlIHByZXZpb3VzIGlvbi1pdGVtIHJlbGF0aXZlIHRvIHRoZSBmb2N1c2VkIG9uZSBvclxuICogdW5kZWZpbmVkLlxuICovXG5jb25zdCBnZXRQcmV2SXRlbSA9IChpdGVtcywgY3VycmVudEl0ZW0pID0+IHtcbiAgY29uc3QgY3VycmVudEl0ZW1JbmRleCA9IGdldEluZGV4T2ZJdGVtKGl0ZW1zLCBjdXJyZW50SXRlbSk7XG4gIHJldHVybiBpdGVtc1tjdXJyZW50SXRlbUluZGV4IC0gMV07XG59O1xuLyoqIEZvY3VzIHRoZSBpbnRlcm5hbCBidXR0b24gb2YgdGhlIGlvbi1pdGVtICovXG5jb25zdCBmb2N1c0l0ZW0gPSAoaXRlbSkgPT4ge1xuICBjb25zdCByb290ID0gZ2V0RWxlbWVudFJvb3QoaXRlbSk7XG4gIGNvbnN0IGJ1dHRvbiA9IHJvb3QucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XG4gIGlmIChidXR0b24pIHtcbiAgICByYWYoKCkgPT4gYnV0dG9uLmZvY3VzKCkpO1xuICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIGB0cnVlYCBpZiBgZWxgIGhhcyBiZWVuIGRlc2lnbmF0ZWRcbiAqIGFzIGEgdHJpZ2dlciBlbGVtZW50IGZvciBhbiBpb24tcG9wb3Zlci5cbiAqL1xuY29uc3QgaXNUcmlnZ2VyRWxlbWVudCA9IChlbCkgPT4gZWwuaGFzQXR0cmlidXRlKCdkYXRhLWlvbi1wb3BvdmVyLXRyaWdnZXInKTtcbmNvbnN0IGNvbmZpZ3VyZUtleWJvYXJkSW50ZXJhY3Rpb24gPSAocG9wb3ZlckVsKSA9PiB7XG4gIGNvbnN0IGNhbGxiYWNrID0gYXN5bmMgKGV2KSA9PiB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IHRhcmdldFRhZ05hbWUgPSAoX2EgPSBldi50YXJnZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWdOYW1lO1xuICAgIC8qKlxuICAgICAqIE9ubHkgaGFuZGxlIGN1c3RvbSBrZXlib2FyZCBpbnRlcmFjdGlvbnMgZm9yIHRoZSBob3N0IHBvcG92ZXIgZWxlbWVudFxuICAgICAqIGFuZCBjaGlsZHJlbiBpb24taXRlbSBlbGVtZW50cy5cbiAgICAgKi9cbiAgICBpZiAodGFyZ2V0VGFnTmFtZSAhPT0gJ0lPTi1QT1BPVkVSJyAmJiB0YXJnZXRUYWdOYW1lICE9PSAnSU9OLUlURU0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbXBsZXggc2VsZWN0b3JzIHdpdGggOm5vdCgpIGFyZSA6bm90IHN1cHBvcnRlZFxuICAgICAqIGluIG9sZGVyIHZlcnNpb25zIG9mIENocm9taXVtIHNvIHdlIG5lZWQgdG8gZG8gYVxuICAgICAqIHRyeS9jYXRjaCBoZXJlIHNvIGVycm9ycyBhcmUgbm90IHRocm93bi5cbiAgICAgKi9cbiAgICB0cnkge1xuICAgICAgLyoqXG4gICAgICAgKiBTZWxlY3QgYWxsIGlvbi1pdGVtcyB0aGF0IGFyZSBub3QgY2hpbGRyZW4gb2YgY2hpbGQgcG9wb3ZlcnMuXG4gICAgICAgKiBpLmUuIG9ubHkgc2VsZWN0IGlvbi1pdGVtIGVsZW1lbnRzIHRoYXQgYXJlIHBhcnQgb2YgdGhpcyBwb3BvdmVyXG4gICAgICAgKi9cbiAgICAgIGl0ZW1zID0gQXJyYXkuZnJvbShwb3BvdmVyRWwucXVlcnlTZWxlY3RvckFsbCgnaW9uLWl0ZW06bm90KGlvbi1wb3BvdmVyIGlvbi1wb3BvdmVyICopOm5vdChbZGlzYWJsZWRdKScpKTtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSAqL1xuICAgIH1cbiAgICBjYXRjaCAoX2IpIHsgfVxuICAgIHN3aXRjaCAoZXYua2V5KSB7XG4gICAgICAvKipcbiAgICAgICAqIElmIHdlIGFyZSBpbiBhIGNoaWxkIHBvcG92ZXJcbiAgICAgICAqIHRoZW4gcHJlc3NpbmcgdGhlIGxlZnQgYXJyb3cga2V5XG4gICAgICAgKiBzaG91bGQgY2xvc2UgdGhpcyBwb3BvdmVyIGFuZCBtb3ZlXG4gICAgICAgKiBmb2N1cyB0byB0aGUgcG9wb3ZlciB0aGF0IHByZXNlbnRlZFxuICAgICAgICogdGhpcyBvbmUuXG4gICAgICAgKi9cbiAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgIGNvbnN0IHBhcmVudFBvcG92ZXIgPSBhd2FpdCBwb3BvdmVyRWwuZ2V0UGFyZW50UG9wb3ZlcigpO1xuICAgICAgICBpZiAocGFyZW50UG9wb3Zlcikge1xuICAgICAgICAgIHBvcG92ZXJFbC5kaXNtaXNzKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAvKipcbiAgICAgICAqIEFycm93RG93biBzaG91bGQgbW92ZSBmb2N1cyB0byB0aGUgbmV4dCBmb2N1c2FibGUgaW9uLWl0ZW0uXG4gICAgICAgKi9cbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgIC8vIERpc2FibGUgbW92ZW1lbnQvc2Nyb2xsIHdpdGgga2V5Ym9hcmRcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgbmV4dEl0ZW0gPSBnZXROZXh0SXRlbShpdGVtcywgYWN0aXZlRWxlbWVudCk7XG4gICAgICAgIGlmIChuZXh0SXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZm9jdXNJdGVtKG5leHRJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIC8qKlxuICAgICAgICogQXJyb3dVcCBzaG91bGQgbW92ZSBmb2N1cyB0byB0aGUgcHJldmlvdXMgZm9jdXNhYmxlIGlvbi1pdGVtLlxuICAgICAgICovXG4gICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgICAgLy8gRGlzYWJsZSBtb3ZlbWVudC9zY3JvbGwgd2l0aCBrZXlib2FyZFxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBwcmV2SXRlbSA9IGdldFByZXZJdGVtKGl0ZW1zLCBhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgaWYgKHByZXZJdGVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBmb2N1c0l0ZW0ocHJldkl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgLyoqXG4gICAgICAgKiBIb21lIHNob3VsZCBtb3ZlIGZvY3VzIHRvIHRoZSBmaXJzdCBmb2N1c2FibGUgaW9uLWl0ZW0uXG4gICAgICAgKi9cbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCBmaXJzdEl0ZW0gPSBpdGVtc1swXTtcbiAgICAgICAgaWYgKGZpcnN0SXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZm9jdXNJdGVtKGZpcnN0SXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICAvKipcbiAgICAgICAqIEVuZCBzaG91bGQgbW92ZSBmb2N1cyB0byB0aGUgbGFzdCBmb2N1c2FibGUgaW9uLWl0ZW0uXG4gICAgICAgKi9cbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IGxhc3RJdGVtID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChsYXN0SXRlbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZm9jdXNJdGVtKGxhc3RJdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIC8qKlxuICAgICAgICogQXJyb3dSaWdodCwgU3BhY2ViYXIsIG9yIEVudGVyIHNob3VsZCBhY3RpdmF0ZVxuICAgICAgICogdGhlIGN1cnJlbnRseSBmb2N1c2VkIHRyaWdnZXIgaXRlbSB0byBvcGVuIGFcbiAgICAgICAqIHBvcG92ZXIgaWYgdGhlIGVsZW1lbnQgaXMgYSB0cmlnZ2VyIGl0ZW0uXG4gICAgICAgKi9cbiAgICAgIGNhc2UgJ0Fycm93UmlnaHQnOlxuICAgICAgY2FzZSAnICc6XG4gICAgICBjYXNlICdFbnRlcic6XG4gICAgICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGlzVHJpZ2dlckVsZW1lbnQoYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICBjb25zdCByaWdodEV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpb25Qb3BvdmVyQWN0aXZhdGVUcmlnZ2VyJyk7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KHJpZ2h0RXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcbiAgcG9wb3ZlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjYWxsYmFjayk7XG4gIHJldHVybiAoKSA9PiBwb3BvdmVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGNhbGxiYWNrKTtcbn07XG4vKipcbiAqIFBvc2l0aW9ucyBhIHBvcG92ZXIgYnkgdGFraW5nIGludG8gYWNjb3VudFxuICogdGhlIHJlZmVyZW5jZSBwb2ludCwgcHJlZmVycmVkIHNpZGUsIGFsaWdubWVudFxuICogYW5kIHZpZXdwb3J0IGRpbWVuc2lvbnMuXG4gKi9cbmNvbnN0IGdldFBvcG92ZXJQb3NpdGlvbiA9IChpc1JUTCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCBhcnJvd1dpZHRoLCBhcnJvd0hlaWdodCwgcmVmZXJlbmNlLCBzaWRlLCBhbGlnbiwgZGVmYXVsdFBvc2l0aW9uLCB0cmlnZ2VyRWwsIGV2ZW50KSA9PiB7XG4gIHZhciBfYTtcbiAgbGV0IHJlZmVyZW5jZUNvb3JkaW5hdGVzID0ge1xuICAgIHRvcDogMCxcbiAgICBsZWZ0OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgfTtcbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGVcbiAgICogeC15IGNvb3JkaW5hdGVzIGluIHRoZSBldmVudCB0aGF0XG4gICAqIHdhcyBwYXNzZWQgaW5cbiAgICovXG4gIHN3aXRjaCAocmVmZXJlbmNlKSB7XG4gICAgY2FzZSAnZXZlbnQnOlxuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFBvc2l0aW9uO1xuICAgICAgfVxuICAgICAgY29uc3QgbW91c2VFdiA9IGV2ZW50O1xuICAgICAgcmVmZXJlbmNlQ29vcmRpbmF0ZXMgPSB7XG4gICAgICAgIHRvcDogbW91c2VFdi5jbGllbnRZLFxuICAgICAgICBsZWZ0OiBtb3VzZUV2LmNsaWVudFgsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBoZWlnaHQ6IDEsXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBib3VuZGluZ1xuICAgICAqIGJveCBvbiBlaXRoZXIgdGhlIHRyaWdnZXIgZWxlbWVudFxuICAgICAqIHNwZWNpZmllZCB2aWEgdGhlIGB0cmlnZ2VyYCBwcm9wIG9yXG4gICAgICogdGhlIHRhcmdldCBzcGVjaWZpZWQgb24gdGhlIGV2ZW50XG4gICAgICogdGhhdCB3YXMgcGFzc2VkIGluLlxuICAgICAqL1xuICAgIGNhc2UgJ3RyaWdnZXInOlxuICAgIGRlZmF1bHQ6XG4gICAgICBjb25zdCBjdXN0b21FdiA9IGV2ZW50O1xuICAgICAgLyoqXG4gICAgICAgKiBpb25TaGFkb3dUYXJnZXQgaXMgdXNlZCB3aGVuIHdlIG5lZWQgdG8gYWxpZ24gdGhlXG4gICAgICAgKiBwb3BvdmVyIHdpdGggYW4gZWxlbWVudCBpbnNpZGUgb2YgdGhlIHNoYWRvdyByb290XG4gICAgICAgKiBvZiBhbiBJb25pYyBjb21wb25lbnQuIEV4OiBQcmVzZW50aW5nIGEgcG9wb3ZlclxuICAgICAgICogYnkgY2xpY2tpbmcgb24gdGhlIGNvbGxhcHNlZCBpbmRpY2F0b3IgaW5zaWRlXG4gICAgICAgKiBvZiBgaW9uLWJyZWFkY3J1bWJgIGFuZCBjZW50ZXJpbmcgaXQgcmVsYXRpdmVcbiAgICAgICAqIHRvIHRoZSBpbmRpY2F0b3IgcmF0aGVyIHRoYW4gYGlvbi1icmVhZGNydW1iYFxuICAgICAgICogYXMgYSB3aG9sZS5cbiAgICAgICAqL1xuICAgICAgY29uc3QgYWN0dWFsVHJpZ2dlckVsID0gKHRyaWdnZXJFbCB8fFxuICAgICAgICAoKF9hID0gY3VzdG9tRXYgPT09IG51bGwgfHwgY3VzdG9tRXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1c3RvbUV2LmRldGFpbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlvblNoYWRvd1RhcmdldCkgfHxcbiAgICAgICAgKGN1c3RvbUV2ID09PSBudWxsIHx8IGN1c3RvbUV2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXN0b21Fdi50YXJnZXQpKTtcbiAgICAgIGlmICghYWN0dWFsVHJpZ2dlckVsKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0UG9zaXRpb247XG4gICAgICB9XG4gICAgICBjb25zdCB0cmlnZ2VyQm91bmRpbmdCb3ggPSBhY3R1YWxUcmlnZ2VyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICByZWZlcmVuY2VDb29yZGluYXRlcyA9IHtcbiAgICAgICAgdG9wOiB0cmlnZ2VyQm91bmRpbmdCb3gudG9wLFxuICAgICAgICBsZWZ0OiB0cmlnZ2VyQm91bmRpbmdCb3gubGVmdCxcbiAgICAgICAgd2lkdGg6IHRyaWdnZXJCb3VuZGluZ0JveC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0cmlnZ2VyQm91bmRpbmdCb3guaGVpZ2h0LFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdG9wL2xlZnQgb2Zmc2V0IHRoYXQgd291bGQgYWxsb3dcbiAgICogcG9wb3ZlciB0byBiZSBwb3NpdGlvbmVkIG9uIHRoZVxuICAgKiBwcmVmZXJyZWQgc2lkZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKi9cbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBjYWxjdWxhdGVQb3BvdmVyU2lkZShzaWRlLCByZWZlcmVuY2VDb29yZGluYXRlcywgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCBhcnJvd1dpZHRoLCBhcnJvd0hlaWdodCwgaXNSVEwpO1xuICAvKipcbiAgICogR2V0IHRoZSB0b3AvbGVmdCBhZGp1c3RtZW50cyB0aGF0XG4gICAqIHdvdWxkIGFsbG93IHRoZSBwb3BvdmVyIGNvbnRlbnRcbiAgICogdG8gaGF2ZSB0aGUgY29ycmVjdCBhbGlnbm1lbnQuXG4gICAqL1xuICBjb25zdCBhbGlnbmVkQ29vcmRpbmF0ZXMgPSBjYWxjdWxhdGVQb3BvdmVyQWxpZ24oYWxpZ24sIHNpZGUsIHJlZmVyZW5jZUNvb3JkaW5hdGVzLCBjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQpO1xuICBjb25zdCB0b3AgPSBjb29yZGluYXRlcy50b3AgKyBhbGlnbmVkQ29vcmRpbmF0ZXMudG9wO1xuICBjb25zdCBsZWZ0ID0gY29vcmRpbmF0ZXMubGVmdCArIGFsaWduZWRDb29yZGluYXRlcy5sZWZ0O1xuICBjb25zdCB7IGFycm93VG9wLCBhcnJvd0xlZnQgfSA9IGNhbGN1bGF0ZUFycm93UG9zaXRpb24oc2lkZSwgYXJyb3dXaWR0aCwgYXJyb3dIZWlnaHQsIHRvcCwgbGVmdCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCBpc1JUTCk7XG4gIGNvbnN0IHsgb3JpZ2luWCwgb3JpZ2luWSB9ID0gY2FsY3VsYXRlUG9wb3Zlck9yaWdpbihzaWRlLCBhbGlnbiwgaXNSVEwpO1xuICByZXR1cm4geyB0b3AsIGxlZnQsIHJlZmVyZW5jZUNvb3JkaW5hdGVzLCBhcnJvd1RvcCwgYXJyb3dMZWZ0LCBvcmlnaW5YLCBvcmlnaW5ZIH07XG59O1xuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSB0cmFuc2Zvcm0tb3JpZ2luXG4gKiBvZiB0aGUgcG9wb3ZlciBhbmltYXRpb24gc28gdGhhdCBpdFxuICogaXMgaW4gbGluZSB3aXRoIHdoYXQgdGhlIHNpZGUgYW5kIGFsaWdubWVudFxuICogcHJvcCB2YWx1ZXMgYXJlLiBDdXJyZW50bHkgb25seSB1c2VkXG4gKiB3aXRoIHRoZSBNRCBhbmltYXRpb24uXG4gKi9cbmNvbnN0IGNhbGN1bGF0ZVBvcG92ZXJPcmlnaW4gPSAoc2lkZSwgYWxpZ24sIGlzUlRMKSA9PiB7XG4gIHN3aXRjaCAoc2lkZSkge1xuICAgIGNhc2UgJ3RvcCc6XG4gICAgICByZXR1cm4geyBvcmlnaW5YOiBnZXRPcmlnaW5YQWxpZ25tZW50KGFsaWduKSwgb3JpZ2luWTogJ2JvdHRvbScgfTtcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgcmV0dXJuIHsgb3JpZ2luWDogZ2V0T3JpZ2luWEFsaWdubWVudChhbGlnbiksIG9yaWdpblk6ICd0b3AnIH07XG4gICAgY2FzZSAnbGVmdCc6XG4gICAgICByZXR1cm4geyBvcmlnaW5YOiAncmlnaHQnLCBvcmlnaW5ZOiBnZXRPcmlnaW5ZQWxpZ25tZW50KGFsaWduKSB9O1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7IG9yaWdpblg6ICdsZWZ0Jywgb3JpZ2luWTogZ2V0T3JpZ2luWUFsaWdubWVudChhbGlnbikgfTtcbiAgICBjYXNlICdzdGFydCc6XG4gICAgICByZXR1cm4geyBvcmlnaW5YOiBpc1JUTCA/ICdsZWZ0JyA6ICdyaWdodCcsIG9yaWdpblk6IGdldE9yaWdpbllBbGlnbm1lbnQoYWxpZ24pIH07XG4gICAgY2FzZSAnZW5kJzpcbiAgICAgIHJldHVybiB7IG9yaWdpblg6IGlzUlRMID8gJ3JpZ2h0JyA6ICdsZWZ0Jywgb3JpZ2luWTogZ2V0T3JpZ2luWUFsaWdubWVudChhbGlnbikgfTtcbiAgfVxufTtcbmNvbnN0IGdldE9yaWdpblhBbGlnbm1lbnQgPSAoYWxpZ24pID0+IHtcbiAgc3dpdGNoIChhbGlnbikge1xuICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICBjYXNlICdlbmQnOlxuICAgICAgcmV0dXJuICdyaWdodCc7XG4gIH1cbn07XG5jb25zdCBnZXRPcmlnaW5ZQWxpZ25tZW50ID0gKGFsaWduKSA9PiB7XG4gIHN3aXRjaCAoYWxpZ24pIHtcbiAgICBjYXNlICdzdGFydCc6XG4gICAgICByZXR1cm4gJ3RvcCc7XG4gICAgY2FzZSAnY2VudGVyJzpcbiAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICBjYXNlICdlbmQnOlxuICAgICAgcmV0dXJuICdib3R0b20nO1xuICB9XG59O1xuLyoqXG4gKiBDYWxjdWxhdGVzIHdoZXJlIHRoZSBhcnJvdyBwb3NpdGlvbmluZ1xuICogc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBwb3BvdmVyIGNvbnRlbnQuXG4gKi9cbmNvbnN0IGNhbGN1bGF0ZUFycm93UG9zaXRpb24gPSAoc2lkZSwgYXJyb3dXaWR0aCwgYXJyb3dIZWlnaHQsIHRvcCwgbGVmdCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCBpc1JUTCkgPT4ge1xuICAvKipcbiAgICogTm90ZTogV2hlbiBzaWRlIGlzIGxlZnQsIHJpZ2h0LCBzdGFydCwgb3IgZW5kLCB0aGUgYXJyb3cgaXNcbiAgICogYmVlbiByb3RhdGVkIHVzaW5nIGEgYHRyYW5zZm9ybWAsIHNvIHRvIG1vdmUgdGhlIGFycm93IHVwIG9yIGRvd25cbiAgICogYnkgaXRzIGRpbWVuc2lvbiwgeW91IG5lZWQgdG8gdXNlIGBhcnJvd1dpZHRoYC5cbiAgICovXG4gIGNvbnN0IGxlZnRQb3NpdGlvbiA9IHtcbiAgICBhcnJvd1RvcDogdG9wICsgY29udGVudEhlaWdodCAvIDIgLSBhcnJvd1dpZHRoIC8gMixcbiAgICBhcnJvd0xlZnQ6IGxlZnQgKyBjb250ZW50V2lkdGggLSBhcnJvd1dpZHRoIC8gMixcbiAgfTtcbiAgLyoqXG4gICAqIE1vdmUgdGhlIGFycm93IHRvIHRoZSBsZWZ0IGJ5IGFycm93V2lkdGggYW5kIHRoZW5cbiAgICogYWdhaW4gYnkgaGFsZiBvZiBpdHMgd2lkdGggYmVjYXVzZSB3ZSBoYXZlIHJvdGF0ZWRcbiAgICogdGhlIGFycm93IHVzaW5nIGEgdHJhbnNmb3JtLlxuICAgKi9cbiAgY29uc3QgcmlnaHRQb3NpdGlvbiA9IHsgYXJyb3dUb3A6IHRvcCArIGNvbnRlbnRIZWlnaHQgLyAyIC0gYXJyb3dXaWR0aCAvIDIsIGFycm93TGVmdDogbGVmdCAtIGFycm93V2lkdGggKiAxLjUgfTtcbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHJldHVybiB7IGFycm93VG9wOiB0b3AgKyBjb250ZW50SGVpZ2h0LCBhcnJvd0xlZnQ6IGxlZnQgKyBjb250ZW50V2lkdGggLyAyIC0gYXJyb3dXaWR0aCAvIDIgfTtcbiAgICBjYXNlICdib3R0b20nOlxuICAgICAgcmV0dXJuIHsgYXJyb3dUb3A6IHRvcCAtIGFycm93SGVpZ2h0LCBhcnJvd0xlZnQ6IGxlZnQgKyBjb250ZW50V2lkdGggLyAyIC0gYXJyb3dXaWR0aCAvIDIgfTtcbiAgICBjYXNlICdsZWZ0JzpcbiAgICAgIHJldHVybiBsZWZ0UG9zaXRpb247XG4gICAgY2FzZSAncmlnaHQnOlxuICAgICAgcmV0dXJuIHJpZ2h0UG9zaXRpb247XG4gICAgY2FzZSAnc3RhcnQnOlxuICAgICAgcmV0dXJuIGlzUlRMID8gcmlnaHRQb3NpdGlvbiA6IGxlZnRQb3NpdGlvbjtcbiAgICBjYXNlICdlbmQnOlxuICAgICAgcmV0dXJuIGlzUlRMID8gbGVmdFBvc2l0aW9uIDogcmlnaHRQb3NpdGlvbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHsgYXJyb3dUb3A6IDAsIGFycm93TGVmdDogMCB9O1xuICB9XG59O1xuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSByZXF1aXJlZCB0b3AvbGVmdFxuICogdmFsdWVzIG5lZWRlZCB0byBwb3NpdGlvbiB0aGUgcG9wb3ZlclxuICogY29udGVudCBvbiB0aGUgc2lkZSBzcGVjaWZpZWQgaW4gdGhlXG4gKiBgc2lkZWAgcHJvcC5cbiAqL1xuY29uc3QgY2FsY3VsYXRlUG9wb3ZlclNpZGUgPSAoc2lkZSwgdHJpZ2dlckJvdW5kaW5nQm94LCBjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQsIGFycm93V2lkdGgsIGFycm93SGVpZ2h0LCBpc1JUTCkgPT4ge1xuICBjb25zdCBzaWRlTGVmdCA9IHtcbiAgICB0b3A6IHRyaWdnZXJCb3VuZGluZ0JveC50b3AsXG4gICAgbGVmdDogdHJpZ2dlckJvdW5kaW5nQm94LmxlZnQgLSBjb250ZW50V2lkdGggLSBhcnJvd1dpZHRoLFxuICB9O1xuICBjb25zdCBzaWRlUmlnaHQgPSB7XG4gICAgdG9wOiB0cmlnZ2VyQm91bmRpbmdCb3gudG9wLFxuICAgIGxlZnQ6IHRyaWdnZXJCb3VuZGluZ0JveC5sZWZ0ICsgdHJpZ2dlckJvdW5kaW5nQm94LndpZHRoICsgYXJyb3dXaWR0aCxcbiAgfTtcbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSAndG9wJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdHJpZ2dlckJvdW5kaW5nQm94LnRvcCAtIGNvbnRlbnRIZWlnaHQgLSBhcnJvd0hlaWdodCxcbiAgICAgICAgbGVmdDogdHJpZ2dlckJvdW5kaW5nQm94LmxlZnQsXG4gICAgICB9O1xuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiBzaWRlUmlnaHQ7XG4gICAgY2FzZSAnYm90dG9tJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogdHJpZ2dlckJvdW5kaW5nQm94LnRvcCArIHRyaWdnZXJCb3VuZGluZ0JveC5oZWlnaHQgKyBhcnJvd0hlaWdodCxcbiAgICAgICAgbGVmdDogdHJpZ2dlckJvdW5kaW5nQm94LmxlZnQsXG4gICAgICB9O1xuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcmV0dXJuIHNpZGVMZWZ0O1xuICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgIHJldHVybiBpc1JUTCA/IHNpZGVSaWdodCA6IHNpZGVMZWZ0O1xuICAgIGNhc2UgJ2VuZCc6XG4gICAgICByZXR1cm4gaXNSVEwgPyBzaWRlTGVmdCA6IHNpZGVSaWdodDtcbiAgfVxufTtcbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgcmVxdWlyZWQgdG9wL2xlZnRcbiAqIG9mZnNldCB2YWx1ZXMgbmVlZGVkIHRvIHByb3ZpZGUgdGhlXG4gKiBjb3JyZWN0IGFsaWdubWVudCByZWdhcmRsZXNzIHdoaWxlIHRha2luZ1xuICogaW50byBhY2NvdW50IHRoZSBzaWRlIHRoZSBwb3BvdmVyIGlzIG9uLlxuICovXG5jb25zdCBjYWxjdWxhdGVQb3BvdmVyQWxpZ24gPSAoYWxpZ24sIHNpZGUsIHRyaWdnZXJCb3VuZGluZ0JveCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KSA9PiB7XG4gIHN3aXRjaCAoYWxpZ24pIHtcbiAgICBjYXNlICdjZW50ZXInOlxuICAgICAgcmV0dXJuIGNhbGN1bGF0ZVBvcG92ZXJDZW50ZXJBbGlnbihzaWRlLCB0cmlnZ2VyQm91bmRpbmdCb3gsIGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCk7XG4gICAgY2FzZSAnZW5kJzpcbiAgICAgIHJldHVybiBjYWxjdWxhdGVQb3BvdmVyRW5kQWxpZ24oc2lkZSwgdHJpZ2dlckJvdW5kaW5nQm94LCBjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQpO1xuICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gIH1cbn07XG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgZW5kIGFsaWdubWVudCBmb3JcbiAqIHRoZSBwb3BvdmVyLiBJZiBzaWRlIGlzIG9uIHRoZSB4LWF4aXNcbiAqIHRoZW4gdGhlIGFsaWduIHZhbHVlcyByZWZlciB0byB0aGUgdG9wXG4gKiBhbmQgYm90dG9tIG1hcmdpbnMgb2YgdGhlIGNvbnRlbnQuXG4gKiBJZiBzaWRlIGlzIG9uIHRoZSB5LWF4aXMgdGhlbiB0aGVcbiAqIGFsaWduIHZhbHVlcyByZWZlciB0byB0aGUgbGVmdCBhbmQgcmlnaHRcbiAqIG1hcmdpbnMgb2YgdGhlIGNvbnRlbnQuXG4gKi9cbmNvbnN0IGNhbGN1bGF0ZVBvcG92ZXJFbmRBbGlnbiA9IChzaWRlLCB0cmlnZ2VyQm91bmRpbmdCb3gsIGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCkgPT4ge1xuICBzd2l0Y2ggKHNpZGUpIHtcbiAgICBjYXNlICdzdGFydCc6XG4gICAgY2FzZSAnZW5kJzpcbiAgICBjYXNlICdsZWZ0JzpcbiAgICBjYXNlICdyaWdodCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IC0oY29udGVudEhlaWdodCAtIHRyaWdnZXJCb3VuZGluZ0JveC5oZWlnaHQpLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgfTtcbiAgICBjYXNlICd0b3AnOlxuICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogLShjb250ZW50V2lkdGggLSB0cmlnZ2VyQm91bmRpbmdCb3gud2lkdGgpLFxuICAgICAgfTtcbiAgfVxufTtcbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBjZW50ZXIgYWxpZ25tZW50IGZvclxuICogdGhlIHBvcG92ZXIuIElmIHNpZGUgaXMgb24gdGhlIHgtYXhpc1xuICogdGhlbiB0aGUgYWxpZ24gdmFsdWVzIHJlZmVyIHRvIHRoZSB0b3BcbiAqIGFuZCBib3R0b20gbWFyZ2lucyBvZiB0aGUgY29udGVudC5cbiAqIElmIHNpZGUgaXMgb24gdGhlIHktYXhpcyB0aGVuIHRoZVxuICogYWxpZ24gdmFsdWVzIHJlZmVyIHRvIHRoZSBsZWZ0IGFuZCByaWdodFxuICogbWFyZ2lucyBvZiB0aGUgY29udGVudC5cbiAqL1xuY29uc3QgY2FsY3VsYXRlUG9wb3ZlckNlbnRlckFsaWduID0gKHNpZGUsIHRyaWdnZXJCb3VuZGluZ0JveCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0KSA9PiB7XG4gIHN3aXRjaCAoc2lkZSkge1xuICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICBjYXNlICdlbmQnOlxuICAgIGNhc2UgJ2xlZnQnOlxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogLShjb250ZW50SGVpZ2h0IC8gMiAtIHRyaWdnZXJCb3VuZGluZ0JveC5oZWlnaHQgLyAyKSxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgIH07XG4gICAgY2FzZSAndG9wJzpcbiAgICBjYXNlICdib3R0b20nOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IC0oY29udGVudFdpZHRoIC8gMiAtIHRyaWdnZXJCb3VuZGluZ0JveC53aWR0aCAvIDIpLFxuICAgICAgfTtcbiAgfVxufTtcbi8qKlxuICogQWRqdXN0cyBwb3BvdmVyIHBvc2l0aW9uaW5nIGNvb3JkaW5hdGVzXG4gKiBzdWNoIHRoYXQgcG9wb3ZlciBkb2VzIG5vdCBhcHBlYXIgb2Zmc2NyZWVuXG4gKiBvciBvdmVybGFwcGluZyBzYWZlIGFyZWEgYm91bmRzLlxuICovXG5jb25zdCBjYWxjdWxhdGVXaW5kb3dBZGp1c3RtZW50ID0gKHNpZGUsIGNvb3JkVG9wLCBjb29yZExlZnQsIGJvZHlQYWRkaW5nLCBib2R5V2lkdGgsIGJvZHlIZWlnaHQsIGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgc2FmZUFyZWFNYXJnaW4sIGNvbnRlbnRPcmlnaW5YLCBjb250ZW50T3JpZ2luWSwgdHJpZ2dlckNvb3JkaW5hdGVzLCBjb29yZEFycm93VG9wID0gMCwgY29vcmRBcnJvd0xlZnQgPSAwLCBhcnJvd0hlaWdodCA9IDApID0+IHtcbiAgbGV0IGFycm93VG9wID0gY29vcmRBcnJvd1RvcDtcbiAgY29uc3QgYXJyb3dMZWZ0ID0gY29vcmRBcnJvd0xlZnQ7XG4gIGxldCBsZWZ0ID0gY29vcmRMZWZ0O1xuICBsZXQgdG9wID0gY29vcmRUb3A7XG4gIGxldCBib3R0b207XG4gIGxldCBvcmlnaW5YID0gY29udGVudE9yaWdpblg7XG4gIGxldCBvcmlnaW5ZID0gY29udGVudE9yaWdpblk7XG4gIGxldCBjaGVja1NhZmVBcmVhTGVmdCA9IGZhbHNlO1xuICBsZXQgY2hlY2tTYWZlQXJlYVJpZ2h0ID0gZmFsc2U7XG4gIGNvbnN0IHRyaWdnZXJUb3AgPSB0cmlnZ2VyQ29vcmRpbmF0ZXNcbiAgICA/IHRyaWdnZXJDb29yZGluYXRlcy50b3AgKyB0cmlnZ2VyQ29vcmRpbmF0ZXMuaGVpZ2h0XG4gICAgOiBib2R5SGVpZ2h0IC8gMiAtIGNvbnRlbnRIZWlnaHQgLyAyO1xuICBjb25zdCB0cmlnZ2VySGVpZ2h0ID0gdHJpZ2dlckNvb3JkaW5hdGVzID8gdHJpZ2dlckNvb3JkaW5hdGVzLmhlaWdodCA6IDA7XG4gIGxldCBhZGRQb3BvdmVyQm90dG9tQ2xhc3MgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEFkanVzdCBwb3BvdmVyIHNvIGl0IGRvZXMgbm90XG4gICAqIGdvIG9mZiB0aGUgbGVmdCBvZiB0aGUgc2NyZWVuLlxuICAgKi9cbiAgaWYgKGxlZnQgPCBib2R5UGFkZGluZyArIHNhZmVBcmVhTWFyZ2luKSB7XG4gICAgbGVmdCA9IGJvZHlQYWRkaW5nO1xuICAgIGNoZWNrU2FmZUFyZWFMZWZ0ID0gdHJ1ZTtcbiAgICBvcmlnaW5YID0gJ2xlZnQnO1xuICAgIC8qKlxuICAgICAqIEFkanVzdCBwb3BvdmVyIHNvIGl0IGRvZXMgbm90XG4gICAgICogZ28gb2ZmIHRoZSByaWdodCBvZiB0aGUgc2NyZWVuLlxuICAgICAqL1xuICB9XG4gIGVsc2UgaWYgKGNvbnRlbnRXaWR0aCArIGJvZHlQYWRkaW5nICsgbGVmdCArIHNhZmVBcmVhTWFyZ2luID4gYm9keVdpZHRoKSB7XG4gICAgY2hlY2tTYWZlQXJlYVJpZ2h0ID0gdHJ1ZTtcbiAgICBsZWZ0ID0gYm9keVdpZHRoIC0gY29udGVudFdpZHRoIC0gYm9keVBhZGRpbmc7XG4gICAgb3JpZ2luWCA9ICdyaWdodCc7XG4gIH1cbiAgLyoqXG4gICAqIEFkanVzdCBwb3BvdmVyIHNvIGl0IGRvZXMgbm90XG4gICAqIGdvIG9mZiB0aGUgdG9wIG9mIHRoZSBzY3JlZW4uXG4gICAqIElmIHBvcG92ZXIgaXMgb24gdGhlIGxlZnQgb3IgdGhlIHJpZ2h0IG9mXG4gICAqIHRoZSB0cmlnZ2VyLCB0aGVuIHdlIHNob3VsZCBub3QgYWRqdXN0IHRvcFxuICAgKiBtYXJnaW5zLlxuICAgKi9cbiAgaWYgKHRyaWdnZXJUb3AgKyB0cmlnZ2VySGVpZ2h0ICsgY29udGVudEhlaWdodCA+IGJvZHlIZWlnaHQgJiYgKHNpZGUgPT09ICd0b3AnIHx8IHNpZGUgPT09ICdib3R0b20nKSkge1xuICAgIGlmICh0cmlnZ2VyVG9wIC0gY29udGVudEhlaWdodCA+IDApIHtcbiAgICAgIC8qKlxuICAgICAgICogV2hpbGUgd2Ugc3RyaXZlIHRvIGFsaWduIHRoZSBwb3BvdmVyIHdpdGggdGhlIHRyaWdnZXJcbiAgICAgICAqIG9uIHNtYWxsZXIgc2NyZWVucyB0aGlzIGlzIG5vdCBhbHdheXMgcG9zc2libGUuIEFzIGEgcmVzdWx0LFxuICAgICAgICogd2UgYWRqdXN0IHRoZSBwb3BvdmVyIHVwIHNvIHRoYXQgaXQgZG9lcyBub3QgaGFuZ1xuICAgICAgICogb2ZmIHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbi4gSG93ZXZlciwgd2UgZG8gbm90IHdhbnQgdG8gbW92ZVxuICAgICAgICogdGhlIHBvcG92ZXIgdXAgc28gbXVjaCB0aGF0IGl0IGdvZXMgb2ZmIHRoZSB0b3Agb2YgdGhlIHNjcmVlbi5cbiAgICAgICAqXG4gICAgICAgKiBXZSBjaG9zZSAxMiBoZXJlIHNvIHRoYXQgdGhlIHBvcG92ZXIgcG9zaXRpb24gbG9va3MgYSBiaXQgbmljZXIgYXNcbiAgICAgICAqIGl0IGlzIG5vdCByaWdodCB1cCBhZ2FpbnN0IHRoZSBlZGdlIG9mIHRoZSBzY3JlZW4uXG4gICAgICAgKi9cbiAgICAgIHRvcCA9IE1hdGgubWF4KDEyLCB0cmlnZ2VyVG9wIC0gY29udGVudEhlaWdodCAtIHRyaWdnZXJIZWlnaHQgLSAoYXJyb3dIZWlnaHQgLSAxKSk7XG4gICAgICBhcnJvd1RvcCA9IHRvcCArIGNvbnRlbnRIZWlnaHQ7XG4gICAgICBvcmlnaW5ZID0gJ2JvdHRvbSc7XG4gICAgICBhZGRQb3BvdmVyQm90dG9tQ2xhc3MgPSB0cnVlO1xuICAgICAgLyoqXG4gICAgICAgKiBJZiBub3QgZW5vdWdoIHJvb20gZm9yIHBvcG92ZXIgdG8gYXBwZWFyXG4gICAgICAgKiBhYm92ZSB0cmlnZ2VyLCB0aGVuIGN1dCBpdCBvZmYuXG4gICAgICAgKi9cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBib3R0b20gPSBib2R5UGFkZGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB0b3AsXG4gICAgbGVmdCxcbiAgICBib3R0b20sXG4gICAgb3JpZ2luWCxcbiAgICBvcmlnaW5ZLFxuICAgIGNoZWNrU2FmZUFyZWFMZWZ0LFxuICAgIGNoZWNrU2FmZUFyZWFSaWdodCxcbiAgICBhcnJvd1RvcCxcbiAgICBhcnJvd0xlZnQsXG4gICAgYWRkUG9wb3ZlckJvdHRvbUNsYXNzLFxuICB9O1xufTtcbmNvbnN0IHNob3VsZFNob3dBcnJvdyA9IChzaWRlLCBkaWRBZGp1c3RCb3VuZHMgPSBmYWxzZSwgZXYsIHRyaWdnZXIpID0+IHtcbiAgLyoqXG4gICAqIElmIG5vIGV2ZW50IHByb3ZpZGVkIGFuZFxuICAgKiB3ZSBkbyBub3QgaGF2ZSBhIHRyaWdnZXIsXG4gICAqIHRoZW4gdGhpcyBwb3BvdmVyIHdhcyBsaWtlbHlcbiAgICogcHJlc2VudGVkIHZpYSB0aGUgcG9wb3ZlckNvbnRyb2xsZXJcbiAgICogb3IgdXNlcnMgY2FsbGVkIGBwcmVzZW50YCBtYW51YWxseS5cbiAgICogSW4gdGhpcyBjYXNlLCB0aGUgYXJyb3cgc2hvdWxkIG5vdCBiZVxuICAgKiBzaG93biBhcyB3ZSBkbyBub3QgaGF2ZSBhIHJlZmVyZW5jZS5cbiAgICovXG4gIGlmICghZXYgJiYgIXRyaWdnZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIElmIHBvcG92ZXIgaXMgb24gdGhlIGxlZnQgb3IgdGhlIHJpZ2h0XG4gICAqIG9mIGEgdHJpZ2dlciwgYnV0IHdlIG5lZWRlZCB0byBhZGp1c3QgdGhlXG4gICAqIHBvcG92ZXIgZHVlIHRvIHNjcmVlbiBib3VuZHMsIHRoZW4gd2Ugc2hvdWxkXG4gICAqIGhpZGUgdGhlIGFycm93IGFzIGl0IHdpbGwgbmV2ZXIgYmUgcG9pbnRpbmdcbiAgICogYXQgdGhlIHRyaWdnZXIuXG4gICAqL1xuICBpZiAoc2lkZSAhPT0gJ3RvcCcgJiYgc2lkZSAhPT0gJ2JvdHRvbScgJiYgZGlkQWRqdXN0Qm91bmRzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcblxuY29uc3QgUE9QT1ZFUl9JT1NfQk9EWV9QQURESU5HID0gNTtcbi8qKlxuICogaU9TIFBvcG92ZXIgRW50ZXIgQW5pbWF0aW9uXG4gKi9cbi8vIFRPRE8oRlctMjgzMik6IHR5cGVzXG5jb25zdCBpb3NFbnRlckFuaW1hdGlvbiA9IChiYXNlRWwsIG9wdHMpID0+IHtcbiAgdmFyIF9hO1xuICBjb25zdCB7IGV2ZW50OiBldiwgc2l6ZSwgdHJpZ2dlciwgcmVmZXJlbmNlLCBzaWRlLCBhbGlnbiB9ID0gb3B0cztcbiAgY29uc3QgZG9jID0gYmFzZUVsLm93bmVyRG9jdW1lbnQ7XG4gIGNvbnN0IGlzUlRMID0gZG9jLmRpciA9PT0gJ3J0bCc7XG4gIGNvbnN0IGJvZHlXaWR0aCA9IGRvYy5kZWZhdWx0Vmlldy5pbm5lcldpZHRoO1xuICBjb25zdCBib2R5SGVpZ2h0ID0gZG9jLmRlZmF1bHRWaWV3LmlubmVySGVpZ2h0O1xuICBjb25zdCByb290ID0gZ2V0RWxlbWVudFJvb3QoYmFzZUVsKTtcbiAgY29uc3QgY29udGVudEVsID0gcm9vdC5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci1jb250ZW50Jyk7XG4gIGNvbnN0IGFycm93RWwgPSByb290LnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWFycm93Jyk7XG4gIGNvbnN0IHJlZmVyZW5jZVNpemVFbCA9IHRyaWdnZXIgfHwgKChfYSA9IGV2ID09PSBudWxsIHx8IGV2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldi5kZXRhaWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pb25TaGFkb3dUYXJnZXQpIHx8IChldiA9PT0gbnVsbCB8fCBldiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXYudGFyZ2V0KTtcbiAgY29uc3QgeyBjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQgfSA9IGdldFBvcG92ZXJEaW1lbnNpb25zKHNpemUsIGNvbnRlbnRFbCwgcmVmZXJlbmNlU2l6ZUVsKTtcbiAgY29uc3QgeyBhcnJvd1dpZHRoLCBhcnJvd0hlaWdodCB9ID0gZ2V0QXJyb3dEaW1lbnNpb25zKGFycm93RWwpO1xuICBjb25zdCBkZWZhdWx0UG9zaXRpb24gPSB7XG4gICAgdG9wOiBib2R5SGVpZ2h0IC8gMiAtIGNvbnRlbnRIZWlnaHQgLyAyLFxuICAgIGxlZnQ6IGJvZHlXaWR0aCAvIDIgLSBjb250ZW50V2lkdGggLyAyLFxuICAgIG9yaWdpblg6IGlzUlRMID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICBvcmlnaW5ZOiAndG9wJyxcbiAgfTtcbiAgY29uc3QgcmVzdWx0cyA9IGdldFBvcG92ZXJQb3NpdGlvbihpc1JUTCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCBhcnJvd1dpZHRoLCBhcnJvd0hlaWdodCwgcmVmZXJlbmNlLCBzaWRlLCBhbGlnbiwgZGVmYXVsdFBvc2l0aW9uLCB0cmlnZ2VyLCBldik7XG4gIGNvbnN0IHBhZGRpbmcgPSBzaXplID09PSAnY292ZXInID8gMCA6IFBPUE9WRVJfSU9TX0JPRFlfUEFERElORztcbiAgY29uc3QgbWFyZ2luID0gc2l6ZSA9PT0gJ2NvdmVyJyA/IDAgOiAyNTtcbiAgY29uc3QgeyBvcmlnaW5YLCBvcmlnaW5ZLCB0b3AsIGxlZnQsIGJvdHRvbSwgY2hlY2tTYWZlQXJlYUxlZnQsIGNoZWNrU2FmZUFyZWFSaWdodCwgYXJyb3dUb3AsIGFycm93TGVmdCwgYWRkUG9wb3ZlckJvdHRvbUNsYXNzLCB9ID0gY2FsY3VsYXRlV2luZG93QWRqdXN0bWVudChzaWRlLCByZXN1bHRzLnRvcCwgcmVzdWx0cy5sZWZ0LCBwYWRkaW5nLCBib2R5V2lkdGgsIGJvZHlIZWlnaHQsIGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCwgbWFyZ2luLCByZXN1bHRzLm9yaWdpblgsIHJlc3VsdHMub3JpZ2luWSwgcmVzdWx0cy5yZWZlcmVuY2VDb29yZGluYXRlcywgcmVzdWx0cy5hcnJvd1RvcCwgcmVzdWx0cy5hcnJvd0xlZnQsIGFycm93SGVpZ2h0KTtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCB3cmFwcGVyQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGJhY2tkcm9wQW5pbWF0aW9uXG4gICAgLmFkZEVsZW1lbnQocm9vdC5xdWVyeVNlbGVjdG9yKCdpb24tYmFja2Ryb3AnKSlcbiAgICAuZnJvbVRvKCdvcGFjaXR5JywgMC4wMSwgJ3ZhcigtLWJhY2tkcm9wLW9wYWNpdHkpJylcbiAgICAuYmVmb3JlU3R5bGVzKHtcbiAgICAncG9pbnRlci1ldmVudHMnOiAnbm9uZScsXG4gIH0pXG4gICAgLmFmdGVyQ2xlYXJTdHlsZXMoWydwb2ludGVyLWV2ZW50cyddKTtcbiAgd3JhcHBlckFuaW1hdGlvbi5hZGRFbGVtZW50KHJvb3QucXVlcnlTZWxlY3RvcignLnBvcG92ZXItd3JhcHBlcicpKS5mcm9tVG8oJ29wYWNpdHknLCAwLjAxLCAxKTtcbiAgcmV0dXJuIGJhc2VBbmltYXRpb25cbiAgICAuZWFzaW5nKCdlYXNlJylcbiAgICAuZHVyYXRpb24oMTAwKVxuICAgIC5iZWZvcmVBZGRXcml0ZSgoKSA9PiB7XG4gICAgaWYgKHNpemUgPT09ICdjb3ZlcicpIHtcbiAgICAgIGJhc2VFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS13aWR0aCcsIGAke2NvbnRlbnRXaWR0aH1weGApO1xuICAgIH1cbiAgICBpZiAoYWRkUG9wb3ZlckJvdHRvbUNsYXNzKSB7XG4gICAgICBiYXNlRWwuY2xhc3NMaXN0LmFkZCgncG9wb3Zlci1ib3R0b20nKTtcbiAgICB9XG4gICAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb250ZW50RWwuc3R5bGUuc2V0UHJvcGVydHkoJ2JvdHRvbScsIGAke2JvdHRvbX1weGApO1xuICAgIH1cbiAgICBjb25zdCBzYWZlQXJlYUxlZnQgPSAnICsgdmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0LCAwKSc7XG4gICAgY29uc3Qgc2FmZUFyZWFSaWdodCA9ICcgLSB2YXIoLS1pb24tc2FmZS1hcmVhLXJpZ2h0LCAwKSc7XG4gICAgbGV0IGxlZnRWYWx1ZSA9IGAke2xlZnR9cHhgO1xuICAgIGlmIChjaGVja1NhZmVBcmVhTGVmdCkge1xuICAgICAgbGVmdFZhbHVlID0gYCR7bGVmdH1weCR7c2FmZUFyZWFMZWZ0fWA7XG4gICAgfVxuICAgIGlmIChjaGVja1NhZmVBcmVhUmlnaHQpIHtcbiAgICAgIGxlZnRWYWx1ZSA9IGAke2xlZnR9cHgke3NhZmVBcmVhUmlnaHR9YDtcbiAgICB9XG4gICAgY29udGVudEVsLnN0eWxlLnNldFByb3BlcnR5KCd0b3AnLCBgY2FsYygke3RvcH1weCArIHZhcigtLW9mZnNldC15LCAwKSlgKTtcbiAgICBjb250ZW50RWwuc3R5bGUuc2V0UHJvcGVydHkoJ2xlZnQnLCBgY2FsYygke2xlZnRWYWx1ZX0gKyB2YXIoLS1vZmZzZXQteCwgMCkpYCk7XG4gICAgY29udGVudEVsLnN0eWxlLnNldFByb3BlcnR5KCd0cmFuc2Zvcm0tb3JpZ2luJywgYCR7b3JpZ2luWX0gJHtvcmlnaW5YfWApO1xuICAgIGlmIChhcnJvd0VsICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBkaWRBZGp1c3RCb3VuZHMgPSByZXN1bHRzLnRvcCAhPT0gdG9wIHx8IHJlc3VsdHMubGVmdCAhPT0gbGVmdDtcbiAgICAgIGNvbnN0IHNob3dBcnJvdyA9IHNob3VsZFNob3dBcnJvdyhzaWRlLCBkaWRBZGp1c3RCb3VuZHMsIGV2LCB0cmlnZ2VyKTtcbiAgICAgIGlmIChzaG93QXJyb3cpIHtcbiAgICAgICAgYXJyb3dFbC5zdHlsZS5zZXRQcm9wZXJ0eSgndG9wJywgYGNhbGMoJHthcnJvd1RvcH1weCArIHZhcigtLW9mZnNldC15LCAwKSlgKTtcbiAgICAgICAgYXJyb3dFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnbGVmdCcsIGBjYWxjKCR7YXJyb3dMZWZ0fXB4ICsgdmFyKC0tb2Zmc2V0LXgsIDApKWApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGFycm93RWwuc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgICAuYWRkQW5pbWF0aW9uKFtiYWNrZHJvcEFuaW1hdGlvbiwgd3JhcHBlckFuaW1hdGlvbl0pO1xufTtcblxuLyoqXG4gKiBpT1MgUG9wb3ZlciBMZWF2ZSBBbmltYXRpb25cbiAqL1xuY29uc3QgaW9zTGVhdmVBbmltYXRpb24gPSAoYmFzZUVsKSA9PiB7XG4gIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChiYXNlRWwpO1xuICBjb25zdCBjb250ZW50RWwgPSByb290LnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWNvbnRlbnQnKTtcbiAgY29uc3QgYXJyb3dFbCA9IHJvb3QucXVlcnlTZWxlY3RvcignLnBvcG92ZXItYXJyb3cnKTtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCB3cmFwcGVyQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGJhY2tkcm9wQW5pbWF0aW9uLmFkZEVsZW1lbnQocm9vdC5xdWVyeVNlbGVjdG9yKCdpb24tYmFja2Ryb3AnKSkuZnJvbVRvKCdvcGFjaXR5JywgJ3ZhcigtLWJhY2tkcm9wLW9wYWNpdHkpJywgMCk7XG4gIHdyYXBwZXJBbmltYXRpb24uYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLXdyYXBwZXInKSkuZnJvbVRvKCdvcGFjaXR5JywgMC45OSwgMCk7XG4gIHJldHVybiBiYXNlQW5pbWF0aW9uXG4gICAgLmVhc2luZygnZWFzZScpXG4gICAgLmFmdGVyQWRkV3JpdGUoKCkgPT4ge1xuICAgIGJhc2VFbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnLS13aWR0aCcpO1xuICAgIGJhc2VFbC5jbGFzc0xpc3QucmVtb3ZlKCdwb3BvdmVyLWJvdHRvbScpO1xuICAgIGNvbnRlbnRFbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndG9wJyk7XG4gICAgY29udGVudEVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdsZWZ0Jyk7XG4gICAgY29udGVudEVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdib3R0b20nKTtcbiAgICBjb250ZW50RWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RyYW5zZm9ybS1vcmlnaW4nKTtcbiAgICBpZiAoYXJyb3dFbCkge1xuICAgICAgYXJyb3dFbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndG9wJyk7XG4gICAgICBhcnJvd0VsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdsZWZ0Jyk7XG4gICAgICBhcnJvd0VsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdkaXNwbGF5Jyk7XG4gICAgfVxuICB9KVxuICAgIC5kdXJhdGlvbigzMDApXG4gICAgLmFkZEFuaW1hdGlvbihbYmFja2Ryb3BBbmltYXRpb24sIHdyYXBwZXJBbmltYXRpb25dKTtcbn07XG5cbmNvbnN0IFBPUE9WRVJfTURfQk9EWV9QQURESU5HID0gMTI7XG4vKipcbiAqIE1kIFBvcG92ZXIgRW50ZXIgQW5pbWF0aW9uXG4gKi9cbi8vIFRPRE8oRlctMjgzMik6IHR5cGVzXG5jb25zdCBtZEVudGVyQW5pbWF0aW9uID0gKGJhc2VFbCwgb3B0cykgPT4ge1xuICB2YXIgX2E7XG4gIGNvbnN0IHsgZXZlbnQ6IGV2LCBzaXplLCB0cmlnZ2VyLCByZWZlcmVuY2UsIHNpZGUsIGFsaWduIH0gPSBvcHRzO1xuICBjb25zdCBkb2MgPSBiYXNlRWwub3duZXJEb2N1bWVudDtcbiAgY29uc3QgaXNSVEwgPSBkb2MuZGlyID09PSAncnRsJztcbiAgY29uc3QgYm9keVdpZHRoID0gZG9jLmRlZmF1bHRWaWV3LmlubmVyV2lkdGg7XG4gIGNvbnN0IGJvZHlIZWlnaHQgPSBkb2MuZGVmYXVsdFZpZXcuaW5uZXJIZWlnaHQ7XG4gIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChiYXNlRWwpO1xuICBjb25zdCBjb250ZW50RWwgPSByb290LnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWNvbnRlbnQnKTtcbiAgY29uc3QgcmVmZXJlbmNlU2l6ZUVsID0gdHJpZ2dlciB8fCAoKF9hID0gZXYgPT09IG51bGwgfHwgZXYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGV2LmRldGFpbCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmlvblNoYWRvd1RhcmdldCkgfHwgKGV2ID09PSBudWxsIHx8IGV2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBldi50YXJnZXQpO1xuICBjb25zdCB7IGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCB9ID0gZ2V0UG9wb3ZlckRpbWVuc2lvbnMoc2l6ZSwgY29udGVudEVsLCByZWZlcmVuY2VTaXplRWwpO1xuICBjb25zdCBkZWZhdWx0UG9zaXRpb24gPSB7XG4gICAgdG9wOiBib2R5SGVpZ2h0IC8gMiAtIGNvbnRlbnRIZWlnaHQgLyAyLFxuICAgIGxlZnQ6IGJvZHlXaWR0aCAvIDIgLSBjb250ZW50V2lkdGggLyAyLFxuICAgIG9yaWdpblg6IGlzUlRMID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICBvcmlnaW5ZOiAndG9wJyxcbiAgfTtcbiAgY29uc3QgcmVzdWx0cyA9IGdldFBvcG92ZXJQb3NpdGlvbihpc1JUTCwgY29udGVudFdpZHRoLCBjb250ZW50SGVpZ2h0LCAwLCAwLCByZWZlcmVuY2UsIHNpZGUsIGFsaWduLCBkZWZhdWx0UG9zaXRpb24sIHRyaWdnZXIsIGV2KTtcbiAgY29uc3QgcGFkZGluZyA9IHNpemUgPT09ICdjb3ZlcicgPyAwIDogUE9QT1ZFUl9NRF9CT0RZX1BBRERJTkc7XG4gIGNvbnN0IHsgb3JpZ2luWCwgb3JpZ2luWSwgdG9wLCBsZWZ0LCBib3R0b20gfSA9IGNhbGN1bGF0ZVdpbmRvd0FkanVzdG1lbnQoc2lkZSwgcmVzdWx0cy50b3AsIHJlc3VsdHMubGVmdCwgcGFkZGluZywgYm9keVdpZHRoLCBib2R5SGVpZ2h0LCBjb250ZW50V2lkdGgsIGNvbnRlbnRIZWlnaHQsIDAsIHJlc3VsdHMub3JpZ2luWCwgcmVzdWx0cy5vcmlnaW5ZLCByZXN1bHRzLnJlZmVyZW5jZUNvb3JkaW5hdGVzKTtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpO1xuICBjb25zdCB3cmFwcGVyQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IGNvbnRlbnRBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgY29uc3Qgdmlld3BvcnRBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgYmFja2Ryb3BBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKVxuICAgIC5mcm9tVG8oJ29wYWNpdHknLCAwLjAxLCAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknKVxuICAgIC5iZWZvcmVTdHlsZXMoe1xuICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJyxcbiAgfSlcbiAgICAuYWZ0ZXJDbGVhclN0eWxlcyhbJ3BvaW50ZXItZXZlbnRzJ10pO1xuICB3cmFwcGVyQW5pbWF0aW9uLmFkZEVsZW1lbnQocm9vdC5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci13cmFwcGVyJykpLmR1cmF0aW9uKDE1MCkuZnJvbVRvKCdvcGFjaXR5JywgMC4wMSwgMSk7XG4gIGNvbnRlbnRBbmltYXRpb25cbiAgICAuYWRkRWxlbWVudChjb250ZW50RWwpXG4gICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgdG9wOiBgY2FsYygke3RvcH1weCArIHZhcigtLW9mZnNldC15LCAwcHgpKWAsXG4gICAgbGVmdDogYGNhbGMoJHtsZWZ0fXB4ICsgdmFyKC0tb2Zmc2V0LXgsIDBweCkpYCxcbiAgICAndHJhbnNmb3JtLW9yaWdpbic6IGAke29yaWdpbll9ICR7b3JpZ2luWH1gLFxuICB9KVxuICAgIC5iZWZvcmVBZGRXcml0ZSgoKSA9PiB7XG4gICAgaWYgKGJvdHRvbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb250ZW50RWwuc3R5bGUuc2V0UHJvcGVydHkoJ2JvdHRvbScsIGAke2JvdHRvbX1weGApO1xuICAgIH1cbiAgfSlcbiAgICAuZnJvbVRvKCd0cmFuc2Zvcm0nLCAnc2NhbGUoMC44KScsICdzY2FsZSgxKScpO1xuICB2aWV3cG9ydEFuaW1hdGlvbi5hZGRFbGVtZW50KHJvb3QucXVlcnlTZWxlY3RvcignLnBvcG92ZXItdmlld3BvcnQnKSkuZnJvbVRvKCdvcGFjaXR5JywgMC4wMSwgMSk7XG4gIHJldHVybiBiYXNlQW5pbWF0aW9uXG4gICAgLmVhc2luZygnY3ViaWMtYmV6aWVyKDAuMzYsMC42NiwwLjA0LDEpJylcbiAgICAuZHVyYXRpb24oMzAwKVxuICAgIC5iZWZvcmVBZGRXcml0ZSgoKSA9PiB7XG4gICAgaWYgKHNpemUgPT09ICdjb3ZlcicpIHtcbiAgICAgIGJhc2VFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS13aWR0aCcsIGAke2NvbnRlbnRXaWR0aH1weGApO1xuICAgIH1cbiAgICBpZiAob3JpZ2luWSA9PT0gJ2JvdHRvbScpIHtcbiAgICAgIGJhc2VFbC5jbGFzc0xpc3QuYWRkKCdwb3BvdmVyLWJvdHRvbScpO1xuICAgIH1cbiAgfSlcbiAgICAuYWRkQW5pbWF0aW9uKFtiYWNrZHJvcEFuaW1hdGlvbiwgd3JhcHBlckFuaW1hdGlvbiwgY29udGVudEFuaW1hdGlvbiwgdmlld3BvcnRBbmltYXRpb25dKTtcbn07XG5cbi8qKlxuICogTWQgUG9wb3ZlciBMZWF2ZSBBbmltYXRpb25cbiAqL1xuY29uc3QgbWRMZWF2ZUFuaW1hdGlvbiA9IChiYXNlRWwpID0+IHtcbiAgY29uc3Qgcm9vdCA9IGdldEVsZW1lbnRSb290KGJhc2VFbCk7XG4gIGNvbnN0IGNvbnRlbnRFbCA9IHJvb3QucXVlcnlTZWxlY3RvcignLnBvcG92ZXItY29udGVudCcpO1xuICBjb25zdCBiYXNlQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IGJhY2tkcm9wQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCk7XG4gIGNvbnN0IHdyYXBwZXJBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKTtcbiAgYmFja2Ryb3BBbmltYXRpb24uYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKS5mcm9tVG8oJ29wYWNpdHknLCAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknLCAwKTtcbiAgd3JhcHBlckFuaW1hdGlvbi5hZGRFbGVtZW50KHJvb3QucXVlcnlTZWxlY3RvcignLnBvcG92ZXItd3JhcHBlcicpKS5mcm9tVG8oJ29wYWNpdHknLCAwLjk5LCAwKTtcbiAgcmV0dXJuIGJhc2VBbmltYXRpb25cbiAgICAuZWFzaW5nKCdlYXNlJylcbiAgICAuYWZ0ZXJBZGRXcml0ZSgoKSA9PiB7XG4gICAgYmFzZUVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCctLXdpZHRoJyk7XG4gICAgYmFzZUVsLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcG92ZXItYm90dG9tJyk7XG4gICAgY29udGVudEVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCd0b3AnKTtcbiAgICBjb250ZW50RWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2xlZnQnKTtcbiAgICBjb250ZW50RWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2JvdHRvbScpO1xuICAgIGNvbnRlbnRFbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgndHJhbnNmb3JtLW9yaWdpbicpO1xuICB9KVxuICAgIC5kdXJhdGlvbigxNTApXG4gICAgLmFkZEFuaW1hdGlvbihbYmFja2Ryb3BBbmltYXRpb24sIHdyYXBwZXJBbmltYXRpb25dKTtcbn07XG5cbmNvbnN0IHBvcG92ZXJJb3NDc3MgPSBcIjpob3N0ey0tYmFja2dyb3VuZDp2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZik7LS1taW4td2lkdGg6MDstLW1pbi1oZWlnaHQ6MDstLW1heC13aWR0aDphdXRvOy0taGVpZ2h0OmF1dG87LS1vZmZzZXQteDowcHg7LS1vZmZzZXQteTowcHg7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246Zml4ZWQ7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO291dGxpbmU6bm9uZTtjb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCk7ei1pbmRleDoxMDAxfTpob3N0KC5wb3BvdmVyLW5lc3RlZCl7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCgucG9wb3Zlci1uZXN0ZWQpIC5wb3BvdmVyLXdyYXBwZXJ7cG9pbnRlci1ldmVudHM6YXV0b306aG9zdCgub3ZlcmxheS1oaWRkZW4pe2Rpc3BsYXk6bm9uZX0ucG9wb3Zlci13cmFwcGVye29wYWNpdHk6MDt6LWluZGV4OjEwfS5wb3BvdmVyLWNvbnRlbnR7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpO21heC13aWR0aDp2YXIoLS1tYXgtd2lkdGgpO2hlaWdodDp2YXIoLS1oZWlnaHQpO21pbi1oZWlnaHQ6dmFyKC0tbWluLWhlaWdodCk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpOy13ZWJraXQtYm94LXNoYWRvdzp2YXIoLS1ib3gtc2hhZG93KTtib3gtc2hhZG93OnZhcigtLWJveC1zaGFkb3cpO292ZXJmbG93OmF1dG87ei1pbmRleDoxMH0ucG9wb3Zlci12aWV3cG9ydHstLWlvbi1zYWZlLWFyZWEtdG9wOjBweDstLWlvbi1zYWZlLWFyZWEtcmlnaHQ6MHB4Oy0taW9uLXNhZmUtYXJlYS1ib3R0b206MHB4Oy0taW9uLXNhZmUtYXJlYS1sZWZ0OjBweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtvdmVyZmxvdzpoaWRkZW59Omhvc3QoLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1sZWZ0KXstLW9mZnNldC14OjVweH06aG9zdCgucG9wb3Zlci1uZXN0ZWQucG9wb3Zlci1zaWRlLXJpZ2h0KXstLW9mZnNldC14Oi01cHh9Omhvc3QoLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1zdGFydCl7LS1vZmZzZXQteDo1cHh9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1zdGFydCksOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1zdGFydHstLW9mZnNldC14Oi01cHh9Omhvc3QoLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1lbmQpey0tb2Zmc2V0LXg6LTVweH06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCgucG9wb3Zlci1uZXN0ZWQucG9wb3Zlci1zaWRlLWVuZCksOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1lbmR7LS1vZmZzZXQteDo1cHh9Omhvc3R7LS13aWR0aDoyMDBweDstLW1heC1oZWlnaHQ6OTAlOy0tYm94LXNoYWRvdzpub25lOy0tYmFja2Ryb3Atb3BhY2l0eTp2YXIoLS1pb24tYmFja2Ryb3Atb3BhY2l0eSwgMC4wOCl9Omhvc3QoLnBvcG92ZXItZGVza3RvcCl7LS1ib3gtc2hhZG93OjBweCA0cHggMTZweCAwcHggcmdiYSgwLCAwLCAwLCAwLjEyKX0ucG9wb3Zlci1jb250ZW50e2JvcmRlci1yYWRpdXM6MTBweH06aG9zdCgucG9wb3Zlci1kZXNrdG9wKSAucG9wb3Zlci1jb250ZW50e2JvcmRlcjowLjVweCBzb2xpZCB2YXIoLS1pb24tY29sb3Itc3RlcC0xMDAsICNlNmU2ZTYpfS5wb3BvdmVyLWFycm93e2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MjBweDtoZWlnaHQ6MTBweDtvdmVyZmxvdzpoaWRkZW59LnBvcG92ZXItYXJyb3c6OmFmdGVye3RvcDozcHg7Ym9yZGVyLXJhZGl1czozcHg7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTRweDtoZWlnaHQ6MTRweDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7Y29udGVudDpcXFwiXFxcIjt6LWluZGV4OjEwfUBzdXBwb3J0cyAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKXsucG9wb3Zlci1hcnJvdzo6YWZ0ZXJ7aW5zZXQtaW5saW5lLXN0YXJ0OjNweH19QHN1cHBvcnRzIG5vdCAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKXsucG9wb3Zlci1hcnJvdzo6YWZ0ZXJ7bGVmdDozcHh9W2Rpcj1ydGxdIC5wb3BvdmVyLWFycm93OjphZnRlciw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLnBvcG92ZXItYXJyb3c6OmFmdGVye2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6M3B4fX06aG9zdCgucG9wb3Zlci1ib3R0b20pIC5wb3BvdmVyLWFycm93e3RvcDphdXRvO2JvdHRvbTotMTBweH06aG9zdCgucG9wb3Zlci1ib3R0b20pIC5wb3BvdmVyLWFycm93OjphZnRlcnt0b3A6LTZweH06aG9zdCgucG9wb3Zlci1zaWRlLWxlZnQpIC5wb3BvdmVyLWFycm93ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9Omhvc3QoLnBvcG92ZXItc2lkZS1yaWdodCkgLnBvcG92ZXItYXJyb3d7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfTpob3N0KC5wb3BvdmVyLXNpZGUtdG9wKSAucG9wb3Zlci1hcnJvd3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9Omhvc3QoLnBvcG92ZXItc2lkZS1zdGFydCkgLnBvcG92ZXItYXJyb3d7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKX06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCgucG9wb3Zlci1zaWRlLXN0YXJ0KSAucG9wb3Zlci1hcnJvdyw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkucG9wb3Zlci1zaWRlLXN0YXJ0IC5wb3BvdmVyLWFycm93ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTkwZGVnKX06aG9zdCgucG9wb3Zlci1zaWRlLWVuZCkgLnBvcG92ZXItYXJyb3d7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC05MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtOTBkZWcpfTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5wb3BvdmVyLXNpZGUtZW5kKSAucG9wb3Zlci1hcnJvdyw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkucG9wb3Zlci1zaWRlLWVuZCAucG9wb3Zlci1hcnJvd3std2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoOTBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoOTBkZWcpfUBzdXBwb3J0cyAoKC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDApKSBvciAoYmFja2Ryb3AtZmlsdGVyOiBibHVyKDApKSl7Omhvc3QoLnBvcG92ZXItdHJhbnNsdWNlbnQpIC5wb3BvdmVyLWNvbnRlbnQsOmhvc3QoLnBvcG92ZXItdHJhbnNsdWNlbnQpIC5wb3BvdmVyLWFycm93OjphZnRlcntiYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWJhY2tncm91bmQtY29sb3ItcmdiLCAyNTUsIDI1NSwgMjU1KSwgMC44KTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpzYXR1cmF0ZSgxODAlKSBibHVyKDIwcHgpO2JhY2tkcm9wLWZpbHRlcjpzYXR1cmF0ZSgxODAlKSBibHVyKDIwcHgpfX1cIjtcblxuY29uc3QgcG9wb3Zlck1kQ3NzID0gXCI6aG9zdHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpOy0tbWluLXdpZHRoOjA7LS1taW4taGVpZ2h0OjA7LS1tYXgtd2lkdGg6YXV0bzstLWhlaWdodDphdXRvOy0tb2Zmc2V0LXg6MHB4Oy0tb2Zmc2V0LXk6MHB4O2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmZpeGVkOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtvdXRsaW5lOm5vbmU7Y29sb3I6dmFyKC0taW9uLXRleHQtY29sb3IsICMwMDApO3otaW5kZXg6MTAwMX06aG9zdCgucG9wb3Zlci1uZXN0ZWQpe3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLnBvcG92ZXItbmVzdGVkKSAucG9wb3Zlci13cmFwcGVye3BvaW50ZXItZXZlbnRzOmF1dG99Omhvc3QoLm92ZXJsYXktaGlkZGVuKXtkaXNwbGF5Om5vbmV9LnBvcG92ZXItd3JhcHBlcntvcGFjaXR5OjA7ei1pbmRleDoxMH0ucG9wb3Zlci1jb250ZW50e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTstd2Via2l0LWJveC1zaGFkb3c6dmFyKC0tYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1ib3gtc2hhZG93KTtvdmVyZmxvdzphdXRvO3otaW5kZXg6MTB9LnBvcG92ZXItdmlld3BvcnR7LS1pb24tc2FmZS1hcmVhLXRvcDowcHg7LS1pb24tc2FmZS1hcmVhLXJpZ2h0OjBweDstLWlvbi1zYWZlLWFyZWEtYm90dG9tOjBweDstLWlvbi1zYWZlLWFyZWEtbGVmdDowcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47b3ZlcmZsb3c6aGlkZGVufTpob3N0KC5wb3BvdmVyLW5lc3RlZC5wb3BvdmVyLXNpZGUtbGVmdCl7LS1vZmZzZXQteDo1cHh9Omhvc3QoLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1yaWdodCl7LS1vZmZzZXQteDotNXB4fTpob3N0KC5wb3BvdmVyLW5lc3RlZC5wb3BvdmVyLXNpZGUtc3RhcnQpey0tb2Zmc2V0LXg6NXB4fTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5wb3BvdmVyLW5lc3RlZC5wb3BvdmVyLXNpZGUtc3RhcnQpLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5wb3BvdmVyLW5lc3RlZC5wb3BvdmVyLXNpZGUtc3RhcnR7LS1vZmZzZXQteDotNXB4fTpob3N0KC5wb3BvdmVyLW5lc3RlZC5wb3BvdmVyLXNpZGUtZW5kKXstLW9mZnNldC14Oi01cHh9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLnBvcG92ZXItbmVzdGVkLnBvcG92ZXItc2lkZS1lbmQpLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5wb3BvdmVyLW5lc3RlZC5wb3BvdmVyLXNpZGUtZW5key0tb2Zmc2V0LXg6NXB4fTpob3N0ey0td2lkdGg6MjUwcHg7LS1tYXgtaGVpZ2h0OjkwJTstLWJveC1zaGFkb3c6MCA1cHggNXB4IC0zcHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDhweCAxMHB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDNweCAxNHB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMTIpOy0tYmFja2Ryb3Atb3BhY2l0eTp2YXIoLS1pb24tYmFja2Ryb3Atb3BhY2l0eSwgMC4zMil9LnBvcG92ZXItY29udGVudHtib3JkZXItcmFkaXVzOjRweDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCB0b3A7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcH1bZGlyPXJ0bF0gLnBvcG92ZXItY29udGVudCw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLnBvcG92ZXItY29udGVudHstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wfS5wb3BvdmVyLXZpZXdwb3J0ey13ZWJraXQtdHJhbnNpdGlvbi1kZWxheToxMDBtczt0cmFuc2l0aW9uLWRlbGF5OjEwMG1zfVwiO1xuXG5jb25zdCBQb3BvdmVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmRpZFByZXNlbnQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblBvcG92ZXJEaWRQcmVzZW50XCIsIDcpO1xuICAgIHRoaXMud2lsbFByZXNlbnQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblBvcG92ZXJXaWxsUHJlc2VudFwiLCA3KTtcbiAgICB0aGlzLndpbGxEaXNtaXNzID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25Qb3BvdmVyV2lsbERpc21pc3NcIiwgNyk7XG4gICAgdGhpcy5kaWREaXNtaXNzID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25Qb3BvdmVyRGlkRGlzbWlzc1wiLCA3KTtcbiAgICB0aGlzLmRpZFByZXNlbnRTaG9ydGhhbmQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImRpZFByZXNlbnRcIiwgNyk7XG4gICAgdGhpcy53aWxsUHJlc2VudFNob3J0aGFuZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwid2lsbFByZXNlbnRcIiwgNyk7XG4gICAgdGhpcy53aWxsRGlzbWlzc1Nob3J0aGFuZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwid2lsbERpc21pc3NcIiwgNyk7XG4gICAgdGhpcy5kaWREaXNtaXNzU2hvcnRoYW5kID0gY3JlYXRlRXZlbnQodGhpcywgXCJkaWREaXNtaXNzXCIsIDcpO1xuICAgIHRoaXMuaW9uTW91bnQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbk1vdW50XCIsIDcpO1xuICAgIHRoaXMucGFyZW50UG9wb3ZlciA9IG51bGw7XG4gICAgdGhpcy5wb3BvdmVySW5kZXggPSBwb3BvdmVySWRzKys7XG4gICAgdGhpcy5jb3JlRGVsZWdhdGUgPSBDb3JlRGVsZWdhdGUoKTtcbiAgICB0aGlzLmlubGluZSA9IGZhbHNlO1xuICAgIHRoaXMuZm9jdXNEZXNjZW5kYW50T25QcmVzZW50ID0gZmFsc2U7XG4gICAgdGhpcy5vbkJhY2tkcm9wVGFwID0gKCkgPT4ge1xuICAgICAgdGhpcy5kaXNtaXNzKHVuZGVmaW5lZCwgQkFDS0RST1ApO1xuICAgIH07XG4gICAgdGhpcy5vbkxpZmVjeWNsZSA9IChtb2RhbEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBlbCA9IHRoaXMudXNlcnNFbGVtZW50O1xuICAgICAgY29uc3QgbmFtZSA9IExJRkVDWUNMRV9NQVBbbW9kYWxFdmVudC50eXBlXTtcbiAgICAgIGlmIChlbCAmJiBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KG5hbWUsIHtcbiAgICAgICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcbiAgICAgICAgICBkZXRhaWw6IG1vZGFsRXZlbnQuZGV0YWlsLFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZ3VyZVRyaWdnZXJJbnRlcmFjdGlvbiA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgdHJpZ2dlciwgdHJpZ2dlckFjdGlvbiwgZWwsIGRlc3Ryb3lUcmlnZ2VySW50ZXJhY3Rpb24gfSA9IHRoaXM7XG4gICAgICBpZiAoZGVzdHJveVRyaWdnZXJJbnRlcmFjdGlvbikge1xuICAgICAgICBkZXN0cm95VHJpZ2dlckludGVyYWN0aW9uKCk7XG4gICAgICB9XG4gICAgICBpZiAodHJpZ2dlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyaWdnZXJFbCA9ICh0aGlzLnRyaWdnZXJFbCA9IHRyaWdnZXIgIT09IHVuZGVmaW5lZCA/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRyaWdnZXIpIDogbnVsbCk7XG4gICAgICBpZiAoIXRyaWdnZXJFbCkge1xuICAgICAgICBwcmludElvbldhcm5pbmcoYEEgdHJpZ2dlciBlbGVtZW50IHdpdGggdGhlIElEIFwiJHt0cmlnZ2VyfVwiIHdhcyBub3QgZm91bmQgaW4gdGhlIERPTS4gVGhlIHRyaWdnZXIgZWxlbWVudCBtdXN0IGJlIGluIHRoZSBET00gd2hlbiB0aGUgXCJ0cmlnZ2VyXCIgcHJvcGVydHkgaXMgc2V0IG9uIGlvbi1wb3BvdmVyLmAsIHRoaXMuZWwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRlc3Ryb3lUcmlnZ2VySW50ZXJhY3Rpb24gPSBjb25maWd1cmVUcmlnZ2VySW50ZXJhY3Rpb24odHJpZ2dlckVsLCB0cmlnZ2VyQWN0aW9uLCBlbCk7XG4gICAgfTtcbiAgICB0aGlzLmNvbmZpZ3VyZUtleWJvYXJkSW50ZXJhY3Rpb24gPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGRlc3Ryb3lLZXlib2FyZEludGVyYWN0aW9uLCBlbCB9ID0gdGhpcztcbiAgICAgIGlmIChkZXN0cm95S2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgICAgICBkZXN0cm95S2V5Ym9hcmRJbnRlcmFjdGlvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZXN0cm95S2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGNvbmZpZ3VyZUtleWJvYXJkSW50ZXJhY3Rpb24oZWwpO1xuICAgIH07XG4gICAgdGhpcy5jb25maWd1cmVEaXNtaXNzSW50ZXJhY3Rpb24gPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IGRlc3Ryb3lEaXNtaXNzSW50ZXJhY3Rpb24sIHBhcmVudFBvcG92ZXIsIHRyaWdnZXJBY3Rpb24sIHRyaWdnZXJFbCwgZWwgfSA9IHRoaXM7XG4gICAgICBpZiAoIXBhcmVudFBvcG92ZXIgfHwgIXRyaWdnZXJFbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoZGVzdHJveURpc21pc3NJbnRlcmFjdGlvbikge1xuICAgICAgICBkZXN0cm95RGlzbWlzc0ludGVyYWN0aW9uKCk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlc3Ryb3lEaXNtaXNzSW50ZXJhY3Rpb24gPSBjb25maWd1cmVEaXNtaXNzSW50ZXJhY3Rpb24odHJpZ2dlckVsLCB0cmlnZ2VyQWN0aW9uLCBlbCwgcGFyZW50UG9wb3Zlcik7XG4gICAgfTtcbiAgICB0aGlzLnByZXNlbnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuaGFzQ29udHJvbGxlciA9IGZhbHNlO1xuICAgIHRoaXMuZGVsZWdhdGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5vdmVybGF5SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5lbnRlckFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmxlYXZlQW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29tcG9uZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29tcG9uZW50UHJvcHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5rZXlib2FyZENsb3NlID0gdHJ1ZTtcbiAgICB0aGlzLmNzc0NsYXNzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFja2Ryb3BEaXNtaXNzID0gdHJ1ZTtcbiAgICB0aGlzLmV2ZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc2hvd0JhY2tkcm9wID0gdHJ1ZTtcbiAgICB0aGlzLnRyYW5zbHVjZW50ID0gZmFsc2U7XG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgdGhpcy5odG1sQXR0cmlidXRlcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRyaWdnZXJBY3Rpb24gPSAnY2xpY2snO1xuICAgIHRoaXMudHJpZ2dlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNpemUgPSAnYXV0byc7XG4gICAgdGhpcy5kaXNtaXNzT25TZWxlY3QgPSBmYWxzZTtcbiAgICB0aGlzLnJlZmVyZW5jZSA9ICd0cmlnZ2VyJztcbiAgICB0aGlzLnNpZGUgPSAnYm90dG9tJztcbiAgICB0aGlzLmFsaWdubWVudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmFycm93ID0gdHJ1ZTtcbiAgICB0aGlzLmlzT3BlbiA9IGZhbHNlO1xuICAgIHRoaXMua2V5Ym9hcmRFdmVudHMgPSBmYWxzZTtcbiAgICB0aGlzLmtlZXBDb250ZW50c01vdW50ZWQgPSBmYWxzZTtcbiAgfVxuICBvblRyaWdnZXJDaGFuZ2UoKSB7XG4gICAgdGhpcy5jb25maWd1cmVUcmlnZ2VySW50ZXJhY3Rpb24oKTtcbiAgfVxuICBvbklzT3BlbkNoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICBpZiAobmV3VmFsdWUgPT09IHRydWUgJiYgb2xkVmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLnByZXNlbnQoKTtcbiAgICB9XG4gICAgZWxzZSBpZiAobmV3VmFsdWUgPT09IGZhbHNlICYmIG9sZFZhbHVlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmRpc21pc3MoKTtcbiAgICB9XG4gIH1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29uc3QgeyBjb25maWd1cmVUcmlnZ2VySW50ZXJhY3Rpb24sIGVsIH0gPSB0aGlzO1xuICAgIHByZXBhcmVPdmVybGF5KGVsKTtcbiAgICBjb25maWd1cmVUcmlnZ2VySW50ZXJhY3Rpb24oKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBjb25zdCB7IGRlc3Ryb3lUcmlnZ2VySW50ZXJhY3Rpb24gfSA9IHRoaXM7XG4gICAgaWYgKGRlc3Ryb3lUcmlnZ2VySW50ZXJhY3Rpb24pIHtcbiAgICAgIGRlc3Ryb3lUcmlnZ2VySW50ZXJhY3Rpb24oKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50V2lsbExvYWQoKSB7XG4gICAgLyoqXG4gICAgICogSWYgdXNlciBoYXMgY3VzdG9tIElEIHNldCB0aGVuIHdlIHNob3VsZFxuICAgICAqIG5vdCBhc3NpZ24gdGhlIGRlZmF1bHQgaW5jcmVtZW50aW5nIElELlxuICAgICAqL1xuICAgIHRoaXMucG9wb3ZlcklkID0gdGhpcy5lbC5oYXNBdHRyaWJ1dGUoJ2lkJykgPyB0aGlzLmVsLmdldEF0dHJpYnV0ZSgnaWQnKSA6IGBpb24tcG9wb3Zlci0ke3RoaXMucG9wb3ZlckluZGV4fWA7XG4gICAgdGhpcy5wYXJlbnRQb3BvdmVyID0gdGhpcy5lbC5jbG9zZXN0KGBpb24tcG9wb3Zlcjpub3QoIyR7dGhpcy5wb3BvdmVySWR9KWApO1xuICAgIGlmICh0aGlzLmFsaWdubWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmFsaWdubWVudCA9IGdldElvbk1vZGUodGhpcykgPT09ICdpb3MnID8gJ2NlbnRlcicgOiAnc3RhcnQnO1xuICAgIH1cbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIGNvbnN0IHsgcGFyZW50UG9wb3ZlciwgaXNPcGVuIH0gPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIElmIHBvcG92ZXIgd2FzIHJlbmRlcmVkIHdpdGggaXNPcGVuPVwidHJ1ZVwiXG4gICAgICogdGhlbiB3ZSBzaG91bGQgb3BlbiBwb3BvdmVyIGltbWVkaWF0ZWx5LlxuICAgICAqL1xuICAgIGlmIChpc09wZW4gPT09IHRydWUpIHtcbiAgICAgIHJhZigoKSA9PiB0aGlzLnByZXNlbnQoKSk7XG4gICAgfVxuICAgIGlmIChwYXJlbnRQb3BvdmVyKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHBhcmVudFBvcG92ZXIsICdpb25Qb3BvdmVyV2lsbERpc21pc3MnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZGlzbWlzcyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgZmFsc2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBXaGVuIG9wZW5pbmcgYSBwb3BvdmVyIGZyb20gYSB0cmlnZ2VyLCB3ZSBzaG91bGQgbm90IGJlXG4gICAqIG1vZGlmeWluZyB0aGUgYGV2ZW50YCBwcm9wIGZyb20gaW5zaWRlIHRoZSBjb21wb25lbnQuXG4gICAqIEFkZGl0aW9uYWxseSwgd2hlbiBwcmVzc2luZyB0aGUgXCJSaWdodFwiIGFycm93IGtleSwgd2UgbmVlZFxuICAgKiB0byBzaGlmdCBmb2N1cyB0byB0aGUgZmlyc3QgZGVzY2VuZGFudCBpbiB0aGUgbmV3bHkgcHJlc2VudGVkXG4gICAqIHBvcG92ZXIuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYXN5bmMgcHJlc2VudEZyb21UcmlnZ2VyKGV2ZW50LCBmb2N1c0Rlc2NlbmRhbnQgPSBmYWxzZSkge1xuICAgIHRoaXMuZm9jdXNEZXNjZW5kYW50T25QcmVzZW50ID0gZm9jdXNEZXNjZW5kYW50O1xuICAgIGF3YWl0IHRoaXMucHJlc2VudChldmVudCk7XG4gICAgdGhpcy5mb2N1c0Rlc2NlbmRhbnRPblByZXNlbnQgPSBmYWxzZTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhbiBvdmVybGF5XG4gICAqIGlzIGJlaW5nIHVzZWQgaW5saW5lIG9yIHZpYSBhIGNvbnRyb2xsZXIvSlNcbiAgICogYW5kIHJldHVybnMgdGhlIGNvcnJlY3QgZGVsZWdhdGUuXG4gICAqIEJ5IGRlZmF1bHQsIHN1YnNlcXVlbnQgY2FsbHMgdG8gZ2V0RGVsZWdhdGVcbiAgICogd2lsbCB1c2UgYSBjYWNoZWQgdmVyc2lvbiBvZiB0aGUgZGVsZWdhdGUuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGZvciBjYWxsaW5nIGRpc21pc3MgYWZ0ZXJcbiAgICogcHJlc2VudCBzbyB0aGF0IHRoZSBjb3JyZWN0IGRlbGVnYXRlIGlzIGdpdmVuLlxuICAgKi9cbiAgZ2V0RGVsZWdhdGUoZm9yY2UgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLndvcmtpbmdEZWxlZ2F0ZSAmJiAhZm9yY2UpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlbGVnYXRlOiB0aGlzLndvcmtpbmdEZWxlZ2F0ZSxcbiAgICAgICAgaW5saW5lOiB0aGlzLmlubGluZSxcbiAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHVzaW5nIG92ZXJsYXkgaW5saW5lXG4gICAgICogd2UgcG90ZW50aWFsbHkgbmVlZCB0byB1c2UgdGhlIGNvcmVEZWxlZ2F0ZVxuICAgICAqIHNvIHRoYXQgdGhpcyB3b3JrcyBpbiB2YW5pbGxhIEpTIGFwcHMuXG4gICAgICogSWYgYSBkZXZlbG9wZXIgaGFzIHByZXNlbnRlZCB0aGlzIGNvbXBvbmVudFxuICAgICAqIHZpYSBhIGNvbnRyb2xsZXIsIHRoZW4gd2UgY2FuIGFzc3VtZVxuICAgICAqIHRoZSBjb21wb25lbnQgaXMgYWxyZWFkeSBpbiB0aGVcbiAgICAgKiBjb3JyZWN0IHBsYWNlLlxuICAgICAqL1xuICAgIGNvbnN0IHBhcmVudEVsID0gdGhpcy5lbC5wYXJlbnROb2RlO1xuICAgIGNvbnN0IGlubGluZSA9ICh0aGlzLmlubGluZSA9IHBhcmVudEVsICE9PSBudWxsICYmICF0aGlzLmhhc0NvbnRyb2xsZXIpO1xuICAgIGNvbnN0IGRlbGVnYXRlID0gKHRoaXMud29ya2luZ0RlbGVnYXRlID0gaW5saW5lID8gdGhpcy5kZWxlZ2F0ZSB8fCB0aGlzLmNvcmVEZWxlZ2F0ZSA6IHRoaXMuZGVsZWdhdGUpO1xuICAgIHJldHVybiB7IGlubGluZSwgZGVsZWdhdGUgfTtcbiAgfVxuICAvKipcbiAgICogUHJlc2VudCB0aGUgcG9wb3ZlciBvdmVybGF5IGFmdGVyIGl0IGhhcyBiZWVuIGNyZWF0ZWQuXG4gICAqIERldmVsb3BlcnMgY2FuIHBhc3MgYSBtb3VzZSwgdG91Y2gsIG9yIHBvaW50ZXIgZXZlbnRcbiAgICogdG8gcG9zaXRpb24gdGhlIHBvcG92ZXIgcmVsYXRpdmUgdG8gd2hlcmUgdGhhdCBldmVudFxuICAgKiB3YXMgZGlzcGF0Y2hlZC5cbiAgICovXG4gIGFzeW5jIHByZXNlbnQoZXZlbnQpIHtcbiAgICBpZiAodGhpcy5wcmVzZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB1c2luZyBhbiBpbmxpbmUgcG9wb3ZlclxuICAgICAqIGFuZCBkaXNtaXNzaW5nIGEgcG9wb3ZlciBpdCBpcyBwb3NzaWJsZSB0b1xuICAgICAqIHF1aWNrbHkgcHJlc2VudCB0aGUgcG9wb3ZlciB3aGlsZSBpdCBpc1xuICAgICAqIGRpc21pc3NpbmcuIFdlIG5lZWQgdG8gYXdhaXQgYW55IGN1cnJlbnRcbiAgICAgKiB0cmFuc2l0aW9uIHRvIGFsbG93IHRoZSBkaXNtaXNzIHRvIGZpbmlzaFxuICAgICAqIGJlZm9yZSBwcmVzZW50aW5nIGFnYWluLlxuICAgICAqL1xuICAgIGlmICh0aGlzLmN1cnJlbnRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuY3VycmVudFRyYW5zaXRpb247XG4gICAgfVxuICAgIGNvbnN0IHsgZWwgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBpbmxpbmUsIGRlbGVnYXRlIH0gPSB0aGlzLmdldERlbGVnYXRlKHRydWUpO1xuICAgIHRoaXMudXNlcnNFbGVtZW50ID0gYXdhaXQgYXR0YWNoQ29tcG9uZW50KGRlbGVnYXRlLCBlbCwgdGhpcy5jb21wb25lbnQsIFsncG9wb3Zlci12aWV3cG9ydCddLCB0aGlzLmNvbXBvbmVudFByb3BzLCBpbmxpbmUpO1xuICAgIGhhc0xhenlCdWlsZChlbCkgJiYgKGF3YWl0IGRlZXBSZWFkeSh0aGlzLnVzZXJzRWxlbWVudCkpO1xuICAgIGlmICghdGhpcy5rZXlib2FyZEV2ZW50cykge1xuICAgICAgdGhpcy5jb25maWd1cmVLZXlib2FyZEludGVyYWN0aW9uKCk7XG4gICAgfVxuICAgIHRoaXMuY29uZmlndXJlRGlzbWlzc0ludGVyYWN0aW9uKCk7XG4gICAgdGhpcy5pb25Nb3VudC5lbWl0KCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIFdhaXQgdHdvIHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lIGxvb3BzIGJlZm9yZSBwcmVzZW50aW5nIHRoZSBwb3BvdmVyLlxuICAgICAgICogVGhpcyBhbGxvd3MgdGhlIGZyYW1ld29yayBpbXBsZW1lbnRhdGlvbnMgZW5vdWdoIHRpbWUgdG8gbW91bnRcbiAgICAgICAqIHRoZSBwb3BvdmVyIGNvbnRlbnRzLCBzbyB0aGUgYm91bmRpbmcgYm94IGlzIHNldCB3aGVuIHRoZSBwb3BvdmVyXG4gICAgICAgKiB0cmFuc2l0aW9uIHN0YXJ0cy5cbiAgICAgICAqXG4gICAgICAgKiBPbiBBbmd1bGFyIGFuZCBSZWFjdCwgYSBzaW5nbGUgcmFmIGlzIGVub3VnaCB0aW1lLCBidXQgZm9yIFZ1ZVxuICAgICAgICogd2UgbmVlZCB0byB3YWl0IHR3byByYWZzLiBBcyBhIHJlc3VsdCB3ZSBhcmUgdXNpbmcgdHdvIHJhZnMgZm9yXG4gICAgICAgKiBhbGwgZnJhbWV3b3JrcyB0byBlbnN1cmUgdGhlIHBvcG92ZXIgaXMgcHJlc2VudGVkIGNvcnJlY3RseS5cbiAgICAgICAqL1xuICAgICAgcmFmKCgpID0+IHtcbiAgICAgICAgcmFmKGFzeW5jICgpID0+IHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnRUcmFuc2l0aW9uID0gcHJlc2VudCh0aGlzLCAncG9wb3ZlckVudGVyJywgaW9zRW50ZXJBbmltYXRpb24sIG1kRW50ZXJBbmltYXRpb24sIHtcbiAgICAgICAgICAgIGV2ZW50OiBldmVudCB8fCB0aGlzLmV2ZW50LFxuICAgICAgICAgICAgc2l6ZTogdGhpcy5zaXplLFxuICAgICAgICAgICAgdHJpZ2dlcjogdGhpcy50cmlnZ2VyRWwsXG4gICAgICAgICAgICByZWZlcmVuY2U6IHRoaXMucmVmZXJlbmNlLFxuICAgICAgICAgICAgc2lkZTogdGhpcy5zaWRlLFxuICAgICAgICAgICAgYWxpZ246IHRoaXMuYWxpZ25tZW50LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGF3YWl0IHRoaXMuY3VycmVudFRyYW5zaXRpb247XG4gICAgICAgICAgdGhpcy5jdXJyZW50VHJhbnNpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBJZiBwb3BvdmVyIGlzIG5lc3RlZCBhbmQgd2FzXG4gICAgICAgICAgICogcHJlc2VudGVkIHVzaW5nIHRoZSBcIlJpZ2h0XCIgYXJyb3cga2V5LFxuICAgICAgICAgICAqIHdlIG5lZWQgdG8gbW92ZSBmb2N1cyB0byB0aGUgZmlyc3RcbiAgICAgICAgICAgKiBkZXNjZW5kYW50IGluc2lkZSBvZiB0aGUgcG9wb3Zlci5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAodGhpcy5mb2N1c0Rlc2NlbmRhbnRPblByZXNlbnQpIHtcbiAgICAgICAgICAgIGZvY3VzRmlyc3REZXNjZW5kYW50KHRoaXMuZWwsIHRoaXMuZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIERpc21pc3MgdGhlIHBvcG92ZXIgb3ZlcmxheSBhZnRlciBpdCBoYXMgYmVlbiBwcmVzZW50ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIEFueSBkYXRhIHRvIGVtaXQgaW4gdGhlIGRpc21pc3MgZXZlbnRzLlxuICAgKiBAcGFyYW0gcm9sZSBUaGUgcm9sZSBvZiB0aGUgZWxlbWVudCB0aGF0IGlzIGRpc21pc3NpbmcgdGhlIHBvcG92ZXIuIEZvciBleGFtcGxlLCAnY2FuY2VsJyBvciAnYmFja2Ryb3AnLlxuICAgKiBAcGFyYW0gZGlzbWlzc1BhcmVudFBvcG92ZXIgSWYgYHRydWVgLCBkaXNtaXNzaW5nIHRoaXMgcG9wb3ZlciB3aWxsIGFsc28gZGlzbWlzc1xuICAgKiBhIHBhcmVudCBwb3BvdmVyIGlmIHRoaXMgcG9wb3ZlciBpcyBuZXN0ZWQuIERlZmF1bHRzIHRvIGB0cnVlYC5cbiAgICovXG4gIGFzeW5jIGRpc21pc3MoZGF0YSwgcm9sZSwgZGlzbWlzc1BhcmVudFBvcG92ZXIgPSB0cnVlKSB7XG4gICAgLyoqXG4gICAgICogV2hlbiB1c2luZyBhbiBpbmxpbmUgcG9wb3ZlclxuICAgICAqIGFuZCBwcmVzZW50aW5nIGEgcG9wb3ZlciBpdCBpcyBwb3NzaWJsZSB0b1xuICAgICAqIHF1aWNrbHkgZGlzbWlzcyB0aGUgcG9wb3ZlciB3aGlsZSBpdCBpc1xuICAgICAqIHByZXNlbnRpbmcuIFdlIG5lZWQgdG8gYXdhaXQgYW55IGN1cnJlbnRcbiAgICAgKiB0cmFuc2l0aW9uIHRvIGFsbG93IHRoZSBwcmVzZW50IHRvIGZpbmlzaFxuICAgICAqIGJlZm9yZSBkaXNtaXNzaW5nIGFnYWluLlxuICAgICAqL1xuICAgIGlmICh0aGlzLmN1cnJlbnRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuY3VycmVudFRyYW5zaXRpb247XG4gICAgfVxuICAgIGNvbnN0IHsgZGVzdHJveUtleWJvYXJkSW50ZXJhY3Rpb24sIGRlc3Ryb3lEaXNtaXNzSW50ZXJhY3Rpb24gfSA9IHRoaXM7XG4gICAgaWYgKGRpc21pc3NQYXJlbnRQb3BvdmVyICYmIHRoaXMucGFyZW50UG9wb3Zlcikge1xuICAgICAgdGhpcy5wYXJlbnRQb3BvdmVyLmRpc21pc3MoZGF0YSwgcm9sZSwgZGlzbWlzc1BhcmVudFBvcG92ZXIpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRUcmFuc2l0aW9uID0gZGlzbWlzcyh0aGlzLCBkYXRhLCByb2xlLCAncG9wb3ZlckxlYXZlJywgaW9zTGVhdmVBbmltYXRpb24sIG1kTGVhdmVBbmltYXRpb24sIHRoaXMuZXZlbnQpO1xuICAgIGNvbnN0IHNob3VsZERpc21pc3MgPSBhd2FpdCB0aGlzLmN1cnJlbnRUcmFuc2l0aW9uO1xuICAgIGlmIChzaG91bGREaXNtaXNzKSB7XG4gICAgICBpZiAoZGVzdHJveUtleWJvYXJkSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgZGVzdHJveUtleWJvYXJkSW50ZXJhY3Rpb24oKTtcbiAgICAgICAgdGhpcy5kZXN0cm95S2V5Ym9hcmRJbnRlcmFjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChkZXN0cm95RGlzbWlzc0ludGVyYWN0aW9uKSB7XG4gICAgICAgIGRlc3Ryb3lEaXNtaXNzSW50ZXJhY3Rpb24oKTtcbiAgICAgICAgdGhpcy5kZXN0cm95RGlzbWlzc0ludGVyYWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBJZiB1c2luZyBwb3BvdmVyIGlubGluZVxuICAgICAgICogd2UgcG90ZW50aWFsbHkgbmVlZCB0byB1c2UgdGhlIGNvcmVEZWxlZ2F0ZVxuICAgICAgICogc28gdGhhdCB0aGlzIHdvcmtzIGluIHZhbmlsbGEgSlMgYXBwc1xuICAgICAgICovXG4gICAgICBjb25zdCB7IGRlbGVnYXRlIH0gPSB0aGlzLmdldERlbGVnYXRlKCk7XG4gICAgICBhd2FpdCBkZXRhY2hDb21wb25lbnQoZGVsZWdhdGUsIHRoaXMudXNlcnNFbGVtZW50KTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50VHJhbnNpdGlvbiA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc2hvdWxkRGlzbWlzcztcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBnZXRQYXJlbnRQb3BvdmVyKCkge1xuICAgIHJldHVybiB0aGlzLnBhcmVudFBvcG92ZXI7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcG9wb3ZlciBkaWQgZGlzbWlzcy5cbiAgICovXG4gIG9uRGlkRGlzbWlzcygpIHtcbiAgICByZXR1cm4gZXZlbnRNZXRob2QodGhpcy5lbCwgJ2lvblBvcG92ZXJEaWREaXNtaXNzJyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgcG9wb3ZlciB3aWxsIGRpc21pc3MuXG4gICAqL1xuICBvbldpbGxEaXNtaXNzKCkge1xuICAgIHJldHVybiBldmVudE1ldGhvZCh0aGlzLmVsLCAnaW9uUG9wb3ZlcldpbGxEaXNtaXNzJyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IHsgb25MaWZlY3ljbGUsIHBvcG92ZXJJZCwgcGFyZW50UG9wb3ZlciwgZGlzbWlzc09uU2VsZWN0LCBzaWRlLCBhcnJvdywgaHRtbEF0dHJpYnV0ZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgZGVza3RvcCA9IGlzUGxhdGZvcm0oJ2Rlc2t0b3AnKTtcbiAgICBjb25zdCBlbmFibGVBcnJvdyA9IGFycm93ICYmICFwYXJlbnRQb3BvdmVyO1xuICAgIHJldHVybiAoaChIb3N0LCBPYmplY3QuYXNzaWduKHsgXCJhcmlhLW1vZGFsXCI6IFwidHJ1ZVwiLCBcIm5vLXJvdXRlclwiOiB0cnVlLCB0YWJpbmRleDogXCItMVwiIH0sIGh0bWxBdHRyaWJ1dGVzLCB7IHN0eWxlOiB7XG4gICAgICAgIHpJbmRleDogYCR7MjAwMDAgKyB0aGlzLm92ZXJsYXlJbmRleH1gLFxuICAgICAgfSwgaWQ6IHBvcG92ZXJJZCwgY2xhc3M6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0Q2xhc3NNYXAodGhpcy5jc3NDbGFzcykpLCB7IFttb2RlXTogdHJ1ZSwgJ3BvcG92ZXItdHJhbnNsdWNlbnQnOiB0aGlzLnRyYW5zbHVjZW50LCAnb3ZlcmxheS1oaWRkZW4nOiB0cnVlLCAncG9wb3Zlci1kZXNrdG9wJzogZGVza3RvcCwgW2Bwb3BvdmVyLXNpZGUtJHtzaWRlfWBdOiB0cnVlLCAncG9wb3Zlci1uZXN0ZWQnOiAhIXBhcmVudFBvcG92ZXIgfSksIG9uSW9uUG9wb3ZlckRpZFByZXNlbnQ6IG9uTGlmZWN5Y2xlLCBvbklvblBvcG92ZXJXaWxsUHJlc2VudDogb25MaWZlY3ljbGUsIG9uSW9uUG9wb3ZlcldpbGxEaXNtaXNzOiBvbkxpZmVjeWNsZSwgb25Jb25Qb3BvdmVyRGlkRGlzbWlzczogb25MaWZlY3ljbGUsIG9uSW9uQmFja2Ryb3BUYXA6IHRoaXMub25CYWNrZHJvcFRhcCB9KSwgIXBhcmVudFBvcG92ZXIgJiYgaChcImlvbi1iYWNrZHJvcFwiLCB7IHRhcHBhYmxlOiB0aGlzLmJhY2tkcm9wRGlzbWlzcywgdmlzaWJsZTogdGhpcy5zaG93QmFja2Ryb3AsIHBhcnQ6IFwiYmFja2Ryb3BcIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInBvcG92ZXItd3JhcHBlciBpb24tb3ZlcmxheS13cmFwcGVyXCIsIG9uQ2xpY2s6IGRpc21pc3NPblNlbGVjdCA/ICgpID0+IHRoaXMuZGlzbWlzcygpIDogdW5kZWZpbmVkIH0sIGVuYWJsZUFycm93ICYmIGgoXCJkaXZcIiwgeyBjbGFzczogXCJwb3BvdmVyLWFycm93XCIsIHBhcnQ6IFwiYXJyb3dcIiB9KSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInBvcG92ZXItY29udGVudFwiLCBwYXJ0OiBcImNvbnRlbnRcIiB9LCBoKFwic2xvdFwiLCBudWxsKSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwidHJpZ2dlclwiOiBbXCJvblRyaWdnZXJDaGFuZ2VcIl0sXG4gICAgXCJ0cmlnZ2VyQWN0aW9uXCI6IFtcIm9uVHJpZ2dlckNoYW5nZVwiXSxcbiAgICBcImlzT3BlblwiOiBbXCJvbklzT3BlbkNoYW5nZVwiXVxuICB9OyB9XG59O1xuY29uc3QgTElGRUNZQ0xFX01BUCA9IHtcbiAgaW9uUG9wb3ZlckRpZFByZXNlbnQ6ICdpb25WaWV3RGlkRW50ZXInLFxuICBpb25Qb3BvdmVyV2lsbFByZXNlbnQ6ICdpb25WaWV3V2lsbEVudGVyJyxcbiAgaW9uUG9wb3ZlcldpbGxEaXNtaXNzOiAnaW9uVmlld1dpbGxMZWF2ZScsXG4gIGlvblBvcG92ZXJEaWREaXNtaXNzOiAnaW9uVmlld0RpZExlYXZlJyxcbn07XG5sZXQgcG9wb3ZlcklkcyA9IDA7XG5Qb3BvdmVyLnN0eWxlID0ge1xuICBpb3M6IHBvcG92ZXJJb3NDc3MsXG4gIG1kOiBwb3BvdmVyTWRDc3Ncbn07XG5cbmV4cG9ydCB7IFBvcG92ZXIgYXMgaW9uX3BvcG92ZXIgfTtcbiIsIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5jb25zdCBob3N0Q29udGV4dCA9IChzZWxlY3RvciwgZWwpID0+IHtcbiAgcmV0dXJuIGVsLmNsb3Nlc3Qoc2VsZWN0b3IpICE9PSBudWxsO1xufTtcbi8qKlxuICogQ3JlYXRlIHRoZSBtb2RlIGFuZCBjb2xvciBjbGFzc2VzIGZvciB0aGUgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBjbGFzc2VzIHBhc3NlZCBpblxuICovXG5jb25zdCBjcmVhdGVDb2xvckNsYXNzZXMgPSAoY29sb3IsIGNzc0NsYXNzTWFwKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnICYmIGNvbG9yLmxlbmd0aCA+IDBcbiAgICA/IE9iamVjdC5hc3NpZ24oeyAnaW9uLWNvbG9yJzogdHJ1ZSwgW2Bpb24tY29sb3ItJHtjb2xvcn1gXTogdHJ1ZSB9LCBjc3NDbGFzc01hcCkgOiBjc3NDbGFzc01hcDtcbn07XG5jb25zdCBnZXRDbGFzc0xpc3QgPSAoY2xhc3NlcykgPT4ge1xuICBpZiAoY2xhc3NlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYXJyYXkgPSBBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4gYXJyYXlcbiAgICAgIC5maWx0ZXIoKGMpID0+IGMgIT0gbnVsbClcbiAgICAgIC5tYXAoKGMpID0+IGMudHJpbSgpKVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPT0gJycpO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5jb25zdCBnZXRDbGFzc01hcCA9IChjbGFzc2VzKSA9PiB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBnZXRDbGFzc0xpc3QoY2xhc3NlcykuZm9yRWFjaCgoYykgPT4gKG1hcFtjXSA9IHRydWUpKTtcbiAgcmV0dXJuIG1hcDtcbn07XG5jb25zdCBTQ0hFTUUgPSAvXlthLXpdW2EtejAtOStcXC0uXSo6LztcbmNvbnN0IG9wZW5VUkwgPSBhc3luYyAodXJsLCBldiwgZGlyZWN0aW9uLCBhbmltYXRpb24pID0+IHtcbiAgaWYgKHVybCAhPSBudWxsICYmIHVybFswXSAhPT0gJyMnICYmICFTQ0hFTUUudGVzdCh1cmwpKSB7XG4gICAgY29uc3Qgcm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpO1xuICAgIGlmIChyb3V0ZXIpIHtcbiAgICAgIGlmIChldiAhPSBudWxsKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm91dGVyLnB1c2godXJsLCBkaXJlY3Rpb24sIGFuaW1hdGlvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNvbG9yQ2xhc3NlcyBhcyBjLCBnZXRDbGFzc01hcCBhcyBnLCBob3N0Q29udGV4dCBhcyBoLCBvcGVuVVJMIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImQiLCJjcmVhdGVFdmVudCIsImgiLCJIIiwiSG9zdCIsImYiLCJnZXRFbGVtZW50IiwiYiIsImdldElvbk1vZGUiLCJhIiwiaXNQbGF0Zm9ybSIsIkMiLCJDb3JlRGVsZWdhdGUiLCJhdHRhY2hDb21wb25lbnQiLCJkZXRhY2hDb21wb25lbnQiLCJyYWYiLCJnIiwiZ2V0RWxlbWVudFJvb3QiLCJhZGRFdmVudExpc3RlbmVyIiwibSIsImhhc0xhenlCdWlsZCIsInAiLCJwcmludElvbldhcm5pbmciLCJCIiwiQkFDS0RST1AiLCJqIiwicHJlcGFyZU92ZXJsYXkiLCJwcmVzZW50IiwibiIsImZvY3VzRmlyc3REZXNjZW5kYW50IiwiZGlzbWlzcyIsImV2ZW50TWV0aG9kIiwiZ2V0Q2xhc3NNYXAiLCJlIiwiZGVlcFJlYWR5IiwiYyIsImNyZWF0ZUFuaW1hdGlvbiIsImdldEFycm93RGltZW5zaW9ucyIsImFycm93RWwiLCJhcnJvd1dpZHRoIiwiYXJyb3dIZWlnaHQiLCJ3aWR0aCIsImhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImdldFBvcG92ZXJEaW1lbnNpb25zIiwic2l6ZSIsImNvbnRlbnRFbCIsInRyaWdnZXJFbCIsImNvbnRlbnREaW1lbnRpb25zIiwiY29udGVudEhlaWdodCIsImNvbnRlbnRXaWR0aCIsInRyaWdnZXJEaW1lbnNpb25zIiwiY29uZmlndXJlRGlzbWlzc0ludGVyYWN0aW9uIiwidHJpZ2dlckFjdGlvbiIsInBvcG92ZXJFbCIsInBhcmVudFBvcG92ZXJFbCIsImRpc21pc3NDYWxsYmFja3MiLCJyb290IiwicGFyZW50Q29udGVudEVsIiwicXVlcnlTZWxlY3RvciIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwiZXYiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJlbGVtZW50RnJvbVBvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJ1bmRlZmluZWQiLCJ0YXJnZXQiLCJjbG9zZXN0VHJpZ2dlciIsImNsb3Nlc3QiLCJzdG9wUHJvcGFnYXRpb24iLCJmb3JFYWNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNvbmZpZ3VyZVRyaWdnZXJJbnRlcmFjdGlvbiIsInRyaWdnZXJDYWxsYmFja3MiLCJob3ZlclRpbWVvdXQiLCJfcmVmIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwicHJlc2VudEZyb21UcmlnZ2VyIiwiX3giLCJhcHBseSIsImFyZ3VtZW50cyIsInJlbGF0ZWRUYXJnZXQiLCJwcmV2ZW50RGVmYXVsdCIsInNldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImdldEluZGV4T2ZJdGVtIiwiaXRlbXMiLCJpdGVtIiwidGFnTmFtZSIsImZpbmRJbmRleCIsImVsIiwiZ2V0TmV4dEl0ZW0iLCJjdXJyZW50SXRlbSIsImN1cnJlbnRJdGVtSW5kZXgiLCJnZXRQcmV2SXRlbSIsImZvY3VzSXRlbSIsImJ1dHRvbiIsImZvY3VzIiwiaXNUcmlnZ2VyRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsImNvbmZpZ3VyZUtleWJvYXJkSW50ZXJhY3Rpb24iLCJfcmVmMiIsIl9hIiwiYWN0aXZlRWxlbWVudCIsInRhcmdldFRhZ05hbWUiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2IiLCJrZXkiLCJwYXJlbnRQb3BvdmVyIiwiZ2V0UGFyZW50UG9wb3ZlciIsIm5leHRJdGVtIiwicHJldkl0ZW0iLCJmaXJzdEl0ZW0iLCJsYXN0SXRlbSIsImxlbmd0aCIsInJpZ2h0RXZlbnQiLCJDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJfeDIiLCJnZXRQb3BvdmVyUG9zaXRpb24iLCJpc1JUTCIsInJlZmVyZW5jZSIsInNpZGUiLCJhbGlnbiIsImRlZmF1bHRQb3NpdGlvbiIsImV2ZW50IiwicmVmZXJlbmNlQ29vcmRpbmF0ZXMiLCJ0b3AiLCJsZWZ0IiwibW91c2VFdiIsImN1c3RvbUV2IiwiYWN0dWFsVHJpZ2dlckVsIiwiZGV0YWlsIiwiaW9uU2hhZG93VGFyZ2V0IiwidHJpZ2dlckJvdW5kaW5nQm94IiwiY29vcmRpbmF0ZXMiLCJjYWxjdWxhdGVQb3BvdmVyU2lkZSIsImFsaWduZWRDb29yZGluYXRlcyIsImNhbGN1bGF0ZVBvcG92ZXJBbGlnbiIsImFycm93VG9wIiwiYXJyb3dMZWZ0IiwiY2FsY3VsYXRlQXJyb3dQb3NpdGlvbiIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiY2FsY3VsYXRlUG9wb3Zlck9yaWdpbiIsImdldE9yaWdpblhBbGlnbm1lbnQiLCJnZXRPcmlnaW5ZQWxpZ25tZW50IiwibGVmdFBvc2l0aW9uIiwicmlnaHRQb3NpdGlvbiIsInNpZGVMZWZ0Iiwic2lkZVJpZ2h0IiwiY2FsY3VsYXRlUG9wb3ZlckNlbnRlckFsaWduIiwiY2FsY3VsYXRlUG9wb3ZlckVuZEFsaWduIiwiY2FsY3VsYXRlV2luZG93QWRqdXN0bWVudCIsImNvb3JkVG9wIiwiY29vcmRMZWZ0IiwiYm9keVBhZGRpbmciLCJib2R5V2lkdGgiLCJib2R5SGVpZ2h0Iiwic2FmZUFyZWFNYXJnaW4iLCJjb250ZW50T3JpZ2luWCIsImNvbnRlbnRPcmlnaW5ZIiwidHJpZ2dlckNvb3JkaW5hdGVzIiwiY29vcmRBcnJvd1RvcCIsImNvb3JkQXJyb3dMZWZ0IiwiYm90dG9tIiwiY2hlY2tTYWZlQXJlYUxlZnQiLCJjaGVja1NhZmVBcmVhUmlnaHQiLCJ0cmlnZ2VyVG9wIiwidHJpZ2dlckhlaWdodCIsImFkZFBvcG92ZXJCb3R0b21DbGFzcyIsIk1hdGgiLCJtYXgiLCJzaG91bGRTaG93QXJyb3ciLCJkaWRBZGp1c3RCb3VuZHMiLCJ0cmlnZ2VyIiwiUE9QT1ZFUl9JT1NfQk9EWV9QQURESU5HIiwiaW9zRW50ZXJBbmltYXRpb24iLCJiYXNlRWwiLCJvcHRzIiwiZG9jIiwib3duZXJEb2N1bWVudCIsImRpciIsImRlZmF1bHRWaWV3IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicmVmZXJlbmNlU2l6ZUVsIiwicmVzdWx0cyIsInBhZGRpbmciLCJtYXJnaW4iLCJiYXNlQW5pbWF0aW9uIiwiYmFja2Ryb3BBbmltYXRpb24iLCJ3cmFwcGVyQW5pbWF0aW9uIiwiYWRkRWxlbWVudCIsImZyb21UbyIsImJlZm9yZVN0eWxlcyIsImFmdGVyQ2xlYXJTdHlsZXMiLCJlYXNpbmciLCJkdXJhdGlvbiIsImJlZm9yZUFkZFdyaXRlIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImNsYXNzTGlzdCIsImFkZCIsInNhZmVBcmVhTGVmdCIsInNhZmVBcmVhUmlnaHQiLCJsZWZ0VmFsdWUiLCJzaG93QXJyb3ciLCJhZGRBbmltYXRpb24iLCJpb3NMZWF2ZUFuaW1hdGlvbiIsImFmdGVyQWRkV3JpdGUiLCJyZW1vdmVQcm9wZXJ0eSIsInJlbW92ZSIsIlBPUE9WRVJfTURfQk9EWV9QQURESU5HIiwibWRFbnRlckFuaW1hdGlvbiIsImNvbnRlbnRBbmltYXRpb24iLCJ2aWV3cG9ydEFuaW1hdGlvbiIsIm1kTGVhdmVBbmltYXRpb24iLCJwb3BvdmVySW9zQ3NzIiwicG9wb3Zlck1kQ3NzIiwiUG9wb3ZlciIsImNvbnN0cnVjdG9yIiwiaG9zdFJlZiIsImRpZFByZXNlbnQiLCJ3aWxsUHJlc2VudCIsIndpbGxEaXNtaXNzIiwiZGlkRGlzbWlzcyIsImRpZFByZXNlbnRTaG9ydGhhbmQiLCJ3aWxsUHJlc2VudFNob3J0aGFuZCIsIndpbGxEaXNtaXNzU2hvcnRoYW5kIiwiZGlkRGlzbWlzc1Nob3J0aGFuZCIsImlvbk1vdW50IiwicG9wb3ZlckluZGV4IiwicG9wb3ZlcklkcyIsImNvcmVEZWxlZ2F0ZSIsImlubGluZSIsImZvY3VzRGVzY2VuZGFudE9uUHJlc2VudCIsIm9uQmFja2Ryb3BUYXAiLCJvbkxpZmVjeWNsZSIsIm1vZGFsRXZlbnQiLCJ1c2Vyc0VsZW1lbnQiLCJuYW1lIiwiTElGRUNZQ0xFX01BUCIsInR5cGUiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRlc3Ryb3lUcmlnZ2VySW50ZXJhY3Rpb24iLCJnZXRFbGVtZW50QnlJZCIsImRlc3Ryb3lLZXlib2FyZEludGVyYWN0aW9uIiwiZGVzdHJveURpc21pc3NJbnRlcmFjdGlvbiIsInByZXNlbnRlZCIsImhhc0NvbnRyb2xsZXIiLCJkZWxlZ2F0ZSIsIm92ZXJsYXlJbmRleCIsImVudGVyQW5pbWF0aW9uIiwibGVhdmVBbmltYXRpb24iLCJjb21wb25lbnQiLCJjb21wb25lbnRQcm9wcyIsImtleWJvYXJkQ2xvc2UiLCJjc3NDbGFzcyIsImJhY2tkcm9wRGlzbWlzcyIsInNob3dCYWNrZHJvcCIsInRyYW5zbHVjZW50IiwiYW5pbWF0ZWQiLCJodG1sQXR0cmlidXRlcyIsImRpc21pc3NPblNlbGVjdCIsImFsaWdubWVudCIsImFycm93IiwiaXNPcGVuIiwia2V5Ym9hcmRFdmVudHMiLCJrZWVwQ29udGVudHNNb3VudGVkIiwib25UcmlnZ2VyQ2hhbmdlIiwib25Jc09wZW5DaGFuZ2UiLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsImNvbXBvbmVudFdpbGxMb2FkIiwicG9wb3ZlcklkIiwiZ2V0QXR0cmlidXRlIiwiY29tcG9uZW50RGlkTG9hZCIsImZvY3VzRGVzY2VuZGFudCIsIl90aGlzIiwiZ2V0RGVsZWdhdGUiLCJmb3JjZSIsIndvcmtpbmdEZWxlZ2F0ZSIsInBhcmVudEVsIiwicGFyZW50Tm9kZSIsIl90aGlzMiIsImN1cnJlbnRUcmFuc2l0aW9uIiwiZW1pdCIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGF0YSIsInJvbGUiLCJkaXNtaXNzUGFyZW50UG9wb3ZlciIsIl90aGlzMyIsInNob3VsZERpc21pc3MiLCJfdGhpczQiLCJvbkRpZERpc21pc3MiLCJvbldpbGxEaXNtaXNzIiwicmVuZGVyIiwibW9kZSIsImRlc2t0b3AiLCJlbmFibGVBcnJvdyIsIk9iamVjdCIsImFzc2lnbiIsInRhYmluZGV4IiwiekluZGV4IiwiaWQiLCJjbGFzcyIsIm9uSW9uUG9wb3ZlckRpZFByZXNlbnQiLCJvbklvblBvcG92ZXJXaWxsUHJlc2VudCIsIm9uSW9uUG9wb3ZlcldpbGxEaXNtaXNzIiwib25Jb25Qb3BvdmVyRGlkRGlzbWlzcyIsIm9uSW9uQmFja2Ryb3BUYXAiLCJ0YXBwYWJsZSIsInZpc2libGUiLCJwYXJ0Iiwib25DbGljayIsIndhdGNoZXJzIiwiaW9uUG9wb3ZlckRpZFByZXNlbnQiLCJpb25Qb3BvdmVyV2lsbFByZXNlbnQiLCJpb25Qb3BvdmVyV2lsbERpc21pc3MiLCJpb25Qb3BvdmVyRGlkRGlzbWlzcyIsImlvcyIsIm1kIiwiaW9uX3BvcG92ZXIiLCJob3N0Q29udGV4dCIsInNlbGVjdG9yIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiY29sb3IiLCJjc3NDbGFzc01hcCIsImdldENsYXNzTGlzdCIsImNsYXNzZXMiLCJhcnJheSIsImlzQXJyYXkiLCJzcGxpdCIsImZpbHRlciIsIm1hcCIsInRyaW0iLCJTQ0hFTUUiLCJvcGVuVVJMIiwidXJsIiwiZGlyZWN0aW9uIiwiYW5pbWF0aW9uIiwidGVzdCIsInJvdXRlciIsInB1c2giLCJfeDMiLCJfeDQiLCJvIl0sInNvdXJjZVJvb3QiOiJ3ZWJwYWNrOi8vLyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDFdfQ==