"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-app_8_entry_js"],{

/***/ 68508:
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-app_8.entry.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ion_app: () => (/* binding */ App),
/* harmony export */   ion_buttons: () => (/* binding */ Buttons),
/* harmony export */   ion_content: () => (/* binding */ Content),
/* harmony export */   ion_footer: () => (/* binding */ Footer),
/* harmony export */   ion_header: () => (/* binding */ Header),
/* harmony export */   ion_router_outlet: () => (/* binding */ RouterOutlet),
/* harmony export */   ion_title: () => (/* binding */ ToolbarTitle),
/* harmony export */   ion_toolbar: () => (/* binding */ Toolbar)
/* harmony export */ });
/* harmony import */ var C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-36a5fd75.js */ 78705);
/* harmony import */ var _ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-a9abd569.js */ 74771);
/* harmony import */ var _helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers-f586db1c.js */ 75272);
/* harmony import */ var _dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dir-e8b767a8.js */ 65094);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./theme-7670341c.js */ 51257);
/* harmony import */ var _index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-7373924f.js */ 68873);
/* harmony import */ var _keyboard_controller_2487310f_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./keyboard-controller-2487310f.js */ 53667);
/* harmony import */ var _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cubic-bezier-e78d1307.js */ 11743);
/* harmony import */ var _framework_delegate_6a45ed30_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./framework-delegate-6a45ed30.js */ 78098);
/* harmony import */ var _index_afea2bcf_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-afea2bcf.js */ 41750);
/* harmony import */ var _index_e86f0117_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-e86f0117.js */ 50123);
/* harmony import */ var _index_b32cad98_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index-b32cad98.js */ 38815);
/* harmony import */ var _keyboard_856bc929_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./keyboard-856bc929.js */ 66527);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */













const appCss = "html.plt-mobile ion-app{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}html.plt-mobile ion-app [contenteditable]{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}ion-app.force-statusbar-padding{--ion-safe-area-top:20px}";
const App = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
  }
  componentDidLoad() {
    var _this = this;
    {
      rIC( /*#__PURE__*/(0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        const isHybrid = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)(window, 'hybrid');
        if (!_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('_testing')) {
          __webpack_require__.e(/*! import() */ "node_modules_ionic_core_dist_esm_index-1204fe95_js").then(__webpack_require__.bind(__webpack_require__, /*! ./index-1204fe95.js */ 98256)).then(module => module.startTapClick(_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c));
        }
        if (_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('statusTap', isHybrid)) {
          __webpack_require__.e(/*! import() */ "node_modules_ionic_core_dist_esm_status-tap-211f1ad8_js").then(__webpack_require__.bind(__webpack_require__, /*! ./status-tap-211f1ad8.js */ 1980)).then(module => module.startStatusTap());
        }
        if (_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('inputShims', needInputShims())) {
          /**
           * needInputShims() ensures that only iOS and Android
           * platforms proceed into this block.
           */
          const platform = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)(window, 'ios') ? 'ios' : 'android';
          __webpack_require__.e(/*! import() */ "node_modules_ionic_core_dist_esm_input-shims-6f71b552_js").then(__webpack_require__.bind(__webpack_require__, /*! ./input-shims-6f71b552.js */ 5877)).then(module => module.startInputShims(_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c, platform));
        }
        const hardwareBackButtonModule = yield Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./hardware-back-button-490df115.js */ 46832));
        if (_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('hardwareBackButton', isHybrid)) {
          hardwareBackButtonModule.startHardwareBackButton();
        } else {
          hardwareBackButtonModule.blockHardwareBackButton();
        }
        if (typeof window !== 'undefined') {
          __webpack_require__.e(/*! import() */ "common").then(__webpack_require__.bind(__webpack_require__, /*! ./keyboard-9ad61616.js */ 71168)).then(module => module.startKeyboardAssist(window));
        }
        __webpack_require__.e(/*! import() */ "common").then(__webpack_require__.bind(__webpack_require__, /*! ./focus-visible-10ad4867.js */ 20753)).then(module => _this.focusVisible = module.startFocusVisible());
      }));
    }
  }
  /**
   * @internal
   * Used to set focus on an element that uses `ion-focusable`.
   * Do not use this if focusing the element as a result of a keyboard
   * event as the focus utility should handle this for us. This method
   * should be used when we want to programmatically focus an element as
   * a result of another user action. (Ex: We focus the first element
   * inside of a popover when the user presents it, but the popover is not always
   * presented as a result of keyboard action.)
   */
  setFocus(elements) {
    var _this2 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.focusVisible) {
        _this2.focusVisible.setFocus(elements);
      }
    })();
  }
  render() {
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        'ion-page': true,
        'force-statusbar-padding': _ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('_forceStatusbarPadding')
      }
    });
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
const needInputShims = () => {
  /**
   * iOS always needs input shims
   */
  const needsShimsIOS = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)(window, 'ios') && (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)(window, 'mobile');
  if (needsShimsIOS) {
    return true;
  }
  /**
   * Android only needs input shims when running
   * in the browser and only if the browser is using the
   * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/
   */
  const isAndroidMobileWeb = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)(window, 'android') && (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)(window, 'mobileweb');
  if (isAndroidMobileWeb) {
    return true;
  }
  return false;
};
const rIC = callback => {
  if ('requestIdleCallback' in window) {
    window.requestIdleCallback(callback);
  } else {
    setTimeout(callback, 32);
  }
};
App.style = appCss;
const buttonsIosCss = ".sc-ion-buttons-ios-h{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:99}.sc-ion-buttons-ios-s ion-button{--padding-top:0;--padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}.sc-ion-buttons-ios-s ion-button{--padding-start:5px;--padding-end:5px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;height:32px}.sc-ion-buttons-ios-s ion-button:not(.button-round){--border-radius:4px}.sc-ion-buttons-ios-h.ion-color.sc-ion-buttons-ios-s .button,.ion-color .sc-ion-buttons-ios-h.sc-ion-buttons-ios-s .button{--color:initial;--border-color:initial;--background-focused:var(--ion-color-contrast)}.sc-ion-buttons-ios-h.ion-color.sc-ion-buttons-ios-s .button-solid,.ion-color .sc-ion-buttons-ios-h.sc-ion-buttons-ios-s .button-solid{--background:var(--ion-color-contrast);--background-focused:#000;--background-focused-opacity:.12;--background-activated:#000;--background-activated-opacity:.12;--background-hover:var(--ion-color-base);--background-hover-opacity:0.45;--color:var(--ion-color-base);--color-focused:var(--ion-color-base)}.sc-ion-buttons-ios-h.ion-color.sc-ion-buttons-ios-s .button-clear,.ion-color .sc-ion-buttons-ios-h.sc-ion-buttons-ios-s .button-clear{--color-activated:var(--ion-color-contrast);--color-focused:var(--ion-color-contrast)}.sc-ion-buttons-ios-h.ion-color.sc-ion-buttons-ios-s .button-outline,.ion-color .sc-ion-buttons-ios-h.sc-ion-buttons-ios-s .button-outline{--color-activated:var(--ion-color-base);--color-focused:var(--ion-color-contrast);--background-activated:var(--ion-color-contrast)}.sc-ion-buttons-ios-s .button-clear,.sc-ion-buttons-ios-s .button-outline{--background-activated:transparent;--background-focused:currentColor;--background-hover:transparent}.sc-ion-buttons-ios-s .button-solid:not(.ion-color){--background-focused:#000;--background-focused-opacity:.12;--background-activated:#000;--background-activated-opacity:.12}.sc-ion-buttons-ios-s ion-icon[slot=start]{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-margin-end:0.3em;margin-inline-end:0.3em;font-size:24px;line-height:0.67}.sc-ion-buttons-ios-s ion-icon[slot=end]{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-margin-start:0.4em;margin-inline-start:0.4em;font-size:24px;line-height:0.67}.sc-ion-buttons-ios-s ion-icon[slot=icon-only]{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;font-size:28px;line-height:0.67}";
const buttonsMdCss = ".sc-ion-buttons-md-h{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-webkit-transform:translateZ(0);transform:translateZ(0);z-index:99}.sc-ion-buttons-md-s ion-button{--padding-top:0;--padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}.sc-ion-buttons-md-s ion-button{--padding-top:0;--padding-bottom:0;--padding-start:8px;--padding-end:8px;--box-shadow:none;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;height:32px}.sc-ion-buttons-md-s ion-button:not(.button-round){--border-radius:2px}.sc-ion-buttons-md-h.ion-color.sc-ion-buttons-md-s .button,.ion-color .sc-ion-buttons-md-h.sc-ion-buttons-md-s .button{--color:initial;--color-focused:var(--ion-color-contrast);--color-hover:var(--ion-color-contrast);--background-activated:transparent;--background-focused:var(--ion-color-contrast);--background-hover:var(--ion-color-contrast)}.sc-ion-buttons-md-h.ion-color.sc-ion-buttons-md-s .button-solid,.ion-color .sc-ion-buttons-md-h.sc-ion-buttons-md-s .button-solid{--background:var(--ion-color-contrast);--background-activated:transparent;--background-focused:var(--ion-color-shade);--background-hover:var(--ion-color-base);--color:var(--ion-color-base);--color-focused:var(--ion-color-base);--color-hover:var(--ion-color-base)}.sc-ion-buttons-md-h.ion-color.sc-ion-buttons-md-s .button-outline,.ion-color .sc-ion-buttons-md-h.sc-ion-buttons-md-s .button-outline{--border-color:var(--ion-color-contrast)}.sc-ion-buttons-md-s .button-has-icon-only.button-clear{--padding-top:12px;--padding-end:12px;--padding-bottom:12px;--padding-start:12px;--border-radius:50%;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;width:48px;height:48px}.sc-ion-buttons-md-s .button{--background-hover:currentColor}.sc-ion-buttons-md-s .button-solid{--color:var(--ion-toolbar-background, var(--ion-background-color, #fff));--background:var(--ion-toolbar-color, var(--ion-text-color, #424242));--background-activated:transparent;--background-focused:currentColor}.sc-ion-buttons-md-s .button-outline{--color:initial;--background:transparent;--background-activated:transparent;--background-focused:currentColor;--background-hover:currentColor;--border-color:currentColor}.sc-ion-buttons-md-s .button-clear{--color:initial;--background:transparent;--background-activated:transparent;--background-focused:currentColor;--background-hover:currentColor}.sc-ion-buttons-md-s ion-icon[slot=start]{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-margin-end:0.3em;margin-inline-end:0.3em;font-size:1.4em}.sc-ion-buttons-md-s ion-icon[slot=end]{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;-webkit-margin-start:0.4em;margin-inline-start:0.4em;font-size:1.4em}.sc-ion-buttons-md-s ion-icon[slot=icon-only]{padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;font-size:1.8em}";
const Buttons = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.collapse = false;
  }
  render() {
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        ['buttons-collapse']: this.collapse
      }
    });
  }
};
Buttons.style = {
  ios: buttonsIosCss,
  md: buttonsMdCss
};
const contentCss = ":host{--background:var(--ion-background-color, #fff);--color:var(--ion-text-color, #000);--padding-top:0px;--padding-bottom:0px;--padding-start:0px;--padding-end:0px;--keyboard-offset:0px;--offset-top:0px;--offset-bottom:0px;--overflow:auto;display:block;position:relative;-ms-flex:1;flex:1;width:100%;height:100%;margin:0 !important;padding:0 !important;font-family:var(--ion-font-family, inherit);contain:size style}:host(.ion-color) .inner-scroll{background:var(--ion-color-base);color:var(--ion-color-contrast)}:host(.outer-content){--background:var(--ion-color-step-50, #f2f2f2)}#background-content{left:0px;right:0px;top:calc(var(--offset-top) * -1);bottom:calc(var(--offset-bottom) * -1);position:absolute;background:var(--background)}.inner-scroll{left:0px;right:0px;top:calc(var(--offset-top) * -1);bottom:calc(var(--offset-bottom) * -1);-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:calc(var(--padding-top) + var(--offset-top));padding-bottom:calc(var(--padding-bottom) + var(--keyboard-offset) + var(--offset-bottom));position:absolute;color:var(--color);-webkit-box-sizing:border-box;box-sizing:border-box;overflow:hidden;-ms-touch-action:pan-x pan-y pinch-zoom;touch-action:pan-x pan-y pinch-zoom}.scroll-y,.scroll-x{-webkit-overflow-scrolling:touch;z-index:0;will-change:scroll-position}.scroll-y{overflow-y:var(--overflow);overscroll-behavior-y:contain}.scroll-x{overflow-x:var(--overflow);overscroll-behavior-x:contain}.overscroll::before,.overscroll::after{position:absolute;width:1px;height:1px;content:\"\"}.overscroll::before{bottom:-1px}.overscroll::after{top:-1px}:host(.content-sizing){display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-height:0;contain:none}:host(.content-sizing) .inner-scroll{position:relative;top:0;bottom:0;margin-top:calc(var(--offset-top) * -1);margin-bottom:calc(var(--offset-bottom) * -1)}.transition-effect{display:none;position:absolute;width:100%;height:100vh;opacity:0;pointer-events:none}:host(.content-ltr) .transition-effect{left:-100%;}:host(.content-rtl) .transition-effect{right:-100%;}.transition-cover{position:absolute;right:0;width:100%;height:100%;background:black;opacity:0.1}.transition-shadow{display:block;position:absolute;width:100%;height:100%;-webkit-box-shadow:inset -9px 0 9px 0 rgba(0, 0, 100, 0.03);box-shadow:inset -9px 0 9px 0 rgba(0, 0, 100, 0.03)}:host(.content-ltr) .transition-shadow{right:0;}:host(.content-rtl) .transition-shadow{left:0;-webkit-transform:scaleX(-1);transform:scaleX(-1)}::slotted([slot=fixed]){position:absolute;-webkit-transform:translateZ(0);transform:translateZ(0)}";
const Content = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionScrollStart = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionScrollStart", 7);
    this.ionScroll = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionScroll", 7);
    this.ionScrollEnd = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionScrollEnd", 7);
    this.watchDog = null;
    this.isScrolling = false;
    this.lastScroll = 0;
    this.queued = false;
    this.cTop = -1;
    this.cBottom = -1;
    this.isMainContent = true;
    this.resizeTimeout = null;
    // Detail is used in a hot loop in the scroll event, by allocating it here
    // V8 will be able to inline any read/write to it since it's a monomorphic class.
    // https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html
    this.detail = {
      scrollTop: 0,
      scrollLeft: 0,
      type: 'scroll',
      event: undefined,
      startX: 0,
      startY: 0,
      startTime: 0,
      currentX: 0,
      currentY: 0,
      velocityX: 0,
      velocityY: 0,
      deltaX: 0,
      deltaY: 0,
      currentTime: 0,
      data: undefined,
      isScrolling: true
    };
    this.color = undefined;
    this.fullscreen = false;
    this.forceOverscroll = undefined;
    this.scrollX = false;
    this.scrollY = true;
    this.scrollEvents = false;
  }
  connectedCallback() {
    this.isMainContent = this.el.closest('ion-menu, ion-popover, ion-modal') === null;
  }
  disconnectedCallback() {
    this.onScrollEnd();
  }
  onAppLoad() {
    this.resize();
  }
  /**
   * Rotating certain devices can update
   * the safe area insets. As a result,
   * the fullscreen feature on ion-content
   * needs to be recalculated.
   *
   * We listen for "resize" because we
   * do not care what the orientation of
   * the device is. Other APIs
   * such as ScreenOrientation or
   * the deviceorientation event must have
   * permission from the user first whereas
   * the "resize" event does not.
   *
   * We also throttle the callback to minimize
   * thrashing when quickly resizing a window.
   */
  onResize() {
    if (this.resizeTimeout) {
      clearTimeout(this.resizeTimeout);
      this.resizeTimeout = null;
    }
    this.resizeTimeout = setTimeout(() => {
      /**
       * Resize should only happen
       * if the content is visible.
       * When the content is hidden
       * then offsetParent will be null.
       */
      if (this.el.offsetParent === null) {
        return;
      }
      this.resize();
    }, 100);
  }
  shouldForceOverscroll() {
    const {
      forceOverscroll
    } = this;
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    return forceOverscroll === undefined ? mode === 'ios' && (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.a)('ios') : forceOverscroll;
  }
  resize() {
    /**
     * Only force update if the component is rendered in a browser context.
     * Using `forceUpdate` in a server context with pre-rendering can lead to an infinite loop.
     * The `hydrateDocument` function in `@stencil/core` will render the `ion-content`, but
     * `forceUpdate` will trigger another render, locking up the server.
     *
     * TODO: Remove if STENCIL-834 determines Stencil will account for this.
     */
    {
      if (this.fullscreen) {
        (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.e)(() => this.readDimensions());
      } else if (this.cTop !== 0 || this.cBottom !== 0) {
        this.cTop = this.cBottom = 0;
        (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
      }
    }
  }
  readDimensions() {
    const page = getPageElement(this.el);
    const top = Math.max(this.el.offsetTop, 0);
    const bottom = Math.max(page.offsetHeight - top - this.el.offsetHeight, 0);
    const dirty = top !== this.cTop || bottom !== this.cBottom;
    if (dirty) {
      this.cTop = top;
      this.cBottom = bottom;
      (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
  }
  onScroll(ev) {
    const timeStamp = Date.now();
    const shouldStart = !this.isScrolling;
    this.lastScroll = timeStamp;
    if (shouldStart) {
      this.onScrollStart();
    }
    if (!this.queued && this.scrollEvents) {
      this.queued = true;
      (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.e)(ts => {
        this.queued = false;
        this.detail.event = ev;
        updateScrollDetail(this.detail, this.scrollEl, ts, shouldStart);
        this.ionScroll.emit(this.detail);
      });
    }
  }
  /**
   * Get the element where the actual scrolling takes place.
   * This element can be used to subscribe to `scroll` events or manually modify
   * `scrollTop`. However, it's recommended to use the API provided by `ion-content`:
   *
   * i.e. Using `ionScroll`, `ionScrollStart`, `ionScrollEnd` for scrolling events
   * and `scrollToPoint()` to scroll the content into a certain point.
   */
  getScrollElement() {
    var _this3 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      /**
       * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),
       * scrollEl won't be defined yet with the custom elements build, so wait for it to load in.
       */
      if (!_this3.scrollEl) {
        yield new Promise(resolve => (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.c)(_this3.el, resolve));
      }
      return Promise.resolve(_this3.scrollEl);
    })();
  }
  /**
   * Returns the background content element.
   * @internal
   */
  getBackgroundElement() {
    var _this4 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this4.backgroundContentEl) {
        yield new Promise(resolve => (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.c)(_this4.el, resolve));
      }
      return Promise.resolve(_this4.backgroundContentEl);
    })();
  }
  /**
   * Scroll to the top of the component.
   *
   * @param duration The amount of time to take scrolling to the top. Defaults to `0`.
   */
  scrollToTop(duration = 0) {
    return this.scrollToPoint(undefined, 0, duration);
  }
  /**
   * Scroll to the bottom of the component.
   *
   * @param duration The amount of time to take scrolling to the bottom. Defaults to `0`.
   */
  scrollToBottom(duration = 0) {
    var _this5 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const scrollEl = yield _this5.getScrollElement();
      const y = scrollEl.scrollHeight - scrollEl.clientHeight;
      return _this5.scrollToPoint(undefined, y, duration);
    })();
  }
  /**
   * Scroll by a specified X/Y distance in the component.
   *
   * @param x The amount to scroll by on the horizontal axis.
   * @param y The amount to scroll by on the vertical axis.
   * @param duration The amount of time to take scrolling by that amount.
   */
  scrollByPoint(x, y, duration) {
    var _this6 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const scrollEl = yield _this6.getScrollElement();
      return _this6.scrollToPoint(x + scrollEl.scrollLeft, y + scrollEl.scrollTop, duration);
    })();
  }
  /**
   * Scroll to a specified X/Y location in the component.
   *
   * @param x The point to scroll to on the horizontal axis.
   * @param y The point to scroll to on the vertical axis.
   * @param duration The amount of time to take scrolling to that point. Defaults to `0`.
   */
  scrollToPoint(x, y, duration = 0) {
    var _this7 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const el = yield _this7.getScrollElement();
      if (duration < 32) {
        if (y != null) {
          el.scrollTop = y;
        }
        if (x != null) {
          el.scrollLeft = x;
        }
        return;
      }
      let resolve;
      let startTime = 0;
      const promise = new Promise(r => resolve = r);
      const fromY = el.scrollTop;
      const fromX = el.scrollLeft;
      const deltaY = y != null ? y - fromY : 0;
      const deltaX = x != null ? x - fromX : 0;
      // scroll loop
      const step = timeStamp => {
        const linearTime = Math.min(1, (timeStamp - startTime) / duration) - 1;
        const easedT = Math.pow(linearTime, 3) + 1;
        if (deltaY !== 0) {
          el.scrollTop = Math.floor(easedT * deltaY + fromY);
        }
        if (deltaX !== 0) {
          el.scrollLeft = Math.floor(easedT * deltaX + fromX);
        }
        if (easedT < 1) {
          // do not use DomController here
          // must use nativeRaf in order to fire in the next frame
          requestAnimationFrame(step);
        } else {
          resolve();
        }
      };
      // chill out for a frame first
      requestAnimationFrame(ts => {
        startTime = ts;
        step(ts);
      });
      return promise;
    })();
  }
  onScrollStart() {
    this.isScrolling = true;
    this.ionScrollStart.emit({
      isScrolling: true
    });
    if (this.watchDog) {
      clearInterval(this.watchDog);
    }
    // watchdog
    this.watchDog = setInterval(() => {
      if (this.lastScroll < Date.now() - 120) {
        this.onScrollEnd();
      }
    }, 100);
  }
  onScrollEnd() {
    if (this.watchDog) clearInterval(this.watchDog);
    this.watchDog = null;
    if (this.isScrolling) {
      this.isScrolling = false;
      this.ionScrollEnd.emit({
        isScrolling: false
      });
    }
  }
  render() {
    const {
      isMainContent,
      scrollX,
      scrollY,
      el
    } = this;
    const rtl = (0,_dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_4__.i)(el) ? 'rtl' : 'ltr';
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const forceOverscroll = this.shouldForceOverscroll();
    const transitionShadow = mode === 'ios';
    const TagType = isMainContent ? 'main' : 'div';
    this.resize();
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.color, {
        [mode]: true,
        'content-sizing': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.h)('ion-popover', this.el),
        overscroll: forceOverscroll,
        [`content-${rtl}`]: true
      }),
      style: {
        '--offset-top': `${this.cTop}px`,
        '--offset-bottom': `${this.cBottom}px`
      }
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      ref: el => this.backgroundContentEl = el,
      id: "background-content",
      part: "background"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(TagType, {
      class: {
        'inner-scroll': true,
        'scroll-x': scrollX,
        'scroll-y': scrollY,
        overscroll: (scrollX || scrollY) && forceOverscroll
      },
      ref: scrollEl => this.scrollEl = scrollEl,
      onScroll: this.scrollEvents ? ev => this.onScroll(ev) : undefined,
      part: "scroll"
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)), transitionShadow ? (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "transition-effect"
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "transition-cover"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "transition-shadow"
    })) : null, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "fixed"
    }));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
const getParentElement = el => {
  var _a;
  if (el.parentElement) {
    // normal element with a parent element
    return el.parentElement;
  }
  if ((_a = el.parentNode) === null || _a === void 0 ? void 0 : _a.host) {
    // shadow dom's document fragment
    return el.parentNode.host;
  }
  return null;
};
const getPageElement = el => {
  const tabs = el.closest('ion-tabs');
  if (tabs) {
    return tabs;
  }
  /**
   * If we're in a popover, we need to use its wrapper so we can account for space
   * between the popover and the edges of the screen. But if the popover contains
   * its own page element, we should use that instead.
   */
  const page = el.closest('ion-app, ion-page, .ion-page, page-inner, .popover-content');
  if (page) {
    return page;
  }
  return getParentElement(el);
};
// ******** DOM READ ****************
const updateScrollDetail = (detail, el, timestamp, shouldStart) => {
  const prevX = detail.currentX;
  const prevY = detail.currentY;
  const prevT = detail.currentTime;
  const currentX = el.scrollLeft;
  const currentY = el.scrollTop;
  const timeDelta = timestamp - prevT;
  if (shouldStart) {
    // remember the start positions
    detail.startTime = timestamp;
    detail.startX = currentX;
    detail.startY = currentY;
    detail.velocityX = detail.velocityY = 0;
  }
  detail.currentTime = timestamp;
  detail.currentX = detail.scrollLeft = currentX;
  detail.currentY = detail.scrollTop = currentY;
  detail.deltaX = currentX - detail.startX;
  detail.deltaY = currentY - detail.startY;
  if (timeDelta > 0 && timeDelta < 100) {
    const velocityX = (currentX - prevX) / timeDelta;
    const velocityY = (currentY - prevY) / timeDelta;
    detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;
    detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;
  }
};
Content.style = contentCss;
const handleFooterFade = (scrollEl, baseEl) => {
  (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.e)(() => {
    const scrollTop = scrollEl.scrollTop;
    const maxScroll = scrollEl.scrollHeight - scrollEl.clientHeight;
    /**
     * Toolbar background will fade
     * out over fadeDuration in pixels.
     */
    const fadeDuration = 10;
    /**
     * Begin fading out maxScroll - 30px
     * from the bottom of the content.
     * Also determine how close we are
     * to starting the fade. If we are
     * before the starting point, the
     * scale value will get clamped to 0.
     * If we are after the maxScroll (rubber
     * band scrolling), the scale value will
     * get clamped to 1.
     */
    const fadeStart = maxScroll - fadeDuration;
    const distanceToStart = scrollTop - fadeStart;
    const scale = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.l)(0, 1 - distanceToStart / fadeDuration, 1);
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
      baseEl.style.setProperty('--opacity-scale', scale.toString());
    });
  });
};
const footerIosCss = "ion-footer{display:block;position:relative;-ms-flex-order:1;order:1;width:100%;z-index:10}ion-footer.footer-toolbar-padding ion-toolbar:last-of-type{padding-bottom:var(--ion-safe-area-bottom, 0)}.footer-ios ion-toolbar:first-of-type{--border-width:0.55px 0 0}@supports ((-webkit-backdrop-filter: blur(0)) or (backdrop-filter: blur(0))){.footer-background{left:0;right:0;top:0;bottom:0;position:absolute;-webkit-backdrop-filter:saturate(180%) blur(20px);backdrop-filter:saturate(180%) blur(20px)}.footer-translucent-ios ion-toolbar{--opacity:.8}}.footer-ios.ion-no-border ion-toolbar:first-of-type{--border-width:0}.footer-collapse-fade ion-toolbar{--opacity-scale:inherit}";
const footerMdCss = "ion-footer{display:block;position:relative;-ms-flex-order:1;order:1;width:100%;z-index:10}ion-footer.footer-toolbar-padding ion-toolbar:last-of-type{padding-bottom:var(--ion-safe-area-bottom, 0)}.footer-md{-webkit-box-shadow:0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12);box-shadow:0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12)}.footer-md.ion-no-border{-webkit-box-shadow:none;box-shadow:none}";
const Footer = class {
  constructor(hostRef) {
    var _this8 = this;
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.keyboardCtrl = null;
    this.checkCollapsibleFooter = () => {
      const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
      if (mode !== 'ios') {
        return;
      }
      const {
        collapse
      } = this;
      const hasFade = collapse === 'fade';
      this.destroyCollapsibleFooter();
      if (hasFade) {
        const pageEl = this.el.closest('ion-app,ion-page,.ion-page,page-inner');
        const contentEl = pageEl ? (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.a)(pageEl) : null;
        if (!contentEl) {
          (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.p)(this.el);
          return;
        }
        this.setupFadeFooter(contentEl);
      }
    };
    this.setupFadeFooter = /*#__PURE__*/function () {
      var _ref2 = (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (contentEl) {
        const scrollEl = _this8.scrollEl = yield (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.g)(contentEl);
        /**
         * Handle fading of toolbars on scroll
         */
        _this8.contentScrollCallback = () => {
          handleFooterFade(scrollEl, _this8.el);
        };
        scrollEl.addEventListener('scroll', _this8.contentScrollCallback);
        handleFooterFade(scrollEl, _this8.el);
      });
      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }();
    this.keyboardVisible = false;
    this.collapse = undefined;
    this.translucent = false;
  }
  componentDidLoad() {
    this.checkCollapsibleFooter();
  }
  componentDidUpdate() {
    this.checkCollapsibleFooter();
  }
  connectedCallback() {
    var _this9 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this9.keyboardCtrl = yield (0,_keyboard_controller_2487310f_js__WEBPACK_IMPORTED_MODULE_7__.c)( /*#__PURE__*/function () {
        var _ref3 = (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (keyboardOpen, waitForResize) {
          /**
           * If the keyboard is hiding, then we need to wait
           * for the webview to resize. Otherwise, the footer
           * will flicker before the webview resizes.
           */
          if (keyboardOpen === false && waitForResize !== undefined) {
            yield waitForResize;
          }
          _this9.keyboardVisible = keyboardOpen; // trigger re-render by updating state
        });
        return function (_x2, _x3) {
          return _ref3.apply(this, arguments);
        };
      }());
    })();
  }
  disconnectedCallback() {
    if (this.keyboardCtrl) {
      this.keyboardCtrl.destroy();
    }
  }
  destroyCollapsibleFooter() {
    if (this.scrollEl && this.contentScrollCallback) {
      this.scrollEl.removeEventListener('scroll', this.contentScrollCallback);
      this.contentScrollCallback = undefined;
    }
  }
  render() {
    const {
      translucent,
      collapse
    } = this;
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const tabs = this.el.closest('ion-tabs');
    const tabBar = tabs === null || tabs === void 0 ? void 0 : tabs.querySelector(':scope > ion-tab-bar');
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "contentinfo",
      class: {
        [mode]: true,
        // Used internally for styling
        [`footer-${mode}`]: true,
        [`footer-translucent`]: translucent,
        [`footer-translucent-${mode}`]: translucent,
        ['footer-toolbar-padding']: !this.keyboardVisible && (!tabBar || tabBar.slot !== 'bottom'),
        [`footer-collapse-${collapse}`]: collapse !== undefined
      }
    }, mode === 'ios' && translucent && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "footer-background"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
Footer.style = {
  ios: footerIosCss,
  md: footerMdCss
};
const TRANSITION = 'all 0.2s ease-in-out';
const cloneElement = tagName => {
  const getCachedEl = document.querySelector(`${tagName}.ion-cloned-element`);
  if (getCachedEl !== null) {
    return getCachedEl;
  }
  const clonedEl = document.createElement(tagName);
  clonedEl.classList.add('ion-cloned-element');
  clonedEl.style.setProperty('display', 'none');
  document.body.appendChild(clonedEl);
  return clonedEl;
};
const createHeaderIndex = headerEl => {
  if (!headerEl) {
    return;
  }
  const toolbars = headerEl.querySelectorAll('ion-toolbar');
  return {
    el: headerEl,
    toolbars: Array.from(toolbars).map(toolbar => {
      const ionTitleEl = toolbar.querySelector('ion-title');
      return {
        el: toolbar,
        background: toolbar.shadowRoot.querySelector('.toolbar-background'),
        ionTitleEl,
        innerTitleEl: ionTitleEl ? ionTitleEl.shadowRoot.querySelector('.toolbar-title') : null,
        ionButtonsEl: Array.from(toolbar.querySelectorAll('ion-buttons'))
      };
    })
  };
};
const handleContentScroll = (scrollEl, scrollHeaderIndex, contentEl) => {
  (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.e)(() => {
    const scrollTop = scrollEl.scrollTop;
    const scale = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.l)(1, 1 + -scrollTop / 500, 1.1);
    // Native refresher should not cause titles to scale
    const nativeRefresher = contentEl.querySelector('ion-refresher.refresher-native');
    if (nativeRefresher === null) {
      (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
        scaleLargeTitles(scrollHeaderIndex.toolbars, scale);
      });
    }
  });
};
const setToolbarBackgroundOpacity = (headerEl, opacity) => {
  /**
   * Fading in the backdrop opacity
   * should happen after the large title
   * has collapsed, so it is handled
   * by handleHeaderFade()
   */
  if (headerEl.collapse === 'fade') {
    return;
  }
  if (opacity === undefined) {
    headerEl.style.removeProperty('--opacity-scale');
  } else {
    headerEl.style.setProperty('--opacity-scale', opacity.toString());
  }
};
const handleToolbarBorderIntersection = (ev, mainHeaderIndex, scrollTop) => {
  if (!ev[0].isIntersecting) {
    return;
  }
  /**
   * There is a bug in Safari where overflow scrolling on a non-body element
   * does not always reset the scrollTop position to 0 when letting go. It will
   * set to 1 once the rubber band effect has ended. This causes the background to
   * appear slightly on certain app setups.
   *
   * Additionally, we check if user is rubber banding (scrolling is negative)
   * as this can mean they are using pull to refresh. Once the refresher starts,
   * the content is transformed which can cause the intersection observer to erroneously
   * fire here as well.
   */
  const scale = ev[0].intersectionRatio > 0.9 || scrollTop <= 0 ? 0 : (1 - ev[0].intersectionRatio) * 100 / 75;
  setToolbarBackgroundOpacity(mainHeaderIndex.el, scale === 1 ? undefined : scale);
};
/**
 * If toolbars are intersecting, hide the scrollable toolbar content
 * and show the primary toolbar content. If the toolbars are not intersecting,
 * hide the primary toolbar content and show the scrollable toolbar content
 */
const handleToolbarIntersection = (ev,
// TODO(FW-2832): type (IntersectionObserverEntry[] triggers errors which should be sorted)
mainHeaderIndex, scrollHeaderIndex, scrollEl) => {
  (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
    const scrollTop = scrollEl.scrollTop;
    handleToolbarBorderIntersection(ev, mainHeaderIndex, scrollTop);
    const event = ev[0];
    const intersection = event.intersectionRect;
    const intersectionArea = intersection.width * intersection.height;
    const rootArea = event.rootBounds.width * event.rootBounds.height;
    const isPageHidden = intersectionArea === 0 && rootArea === 0;
    const leftDiff = Math.abs(intersection.left - event.boundingClientRect.left);
    const rightDiff = Math.abs(intersection.right - event.boundingClientRect.right);
    const isPageTransitioning = intersectionArea > 0 && (leftDiff >= 5 || rightDiff >= 5);
    if (isPageHidden || isPageTransitioning) {
      return;
    }
    if (event.isIntersecting) {
      setHeaderActive(mainHeaderIndex, false);
      setHeaderActive(scrollHeaderIndex);
    } else {
      /**
       * There is a bug with IntersectionObserver on Safari
       * where `event.isIntersecting === false` when cancelling
       * a swipe to go back gesture. Checking the intersection
       * x, y, width, and height provides a workaround. This bug
       * does not happen when using Safari + Web Animations,
       * only Safari + CSS Animations.
       */
      const hasValidIntersection = intersection.x === 0 && intersection.y === 0 || intersection.width !== 0 && intersection.height !== 0;
      if (hasValidIntersection && scrollTop > 0) {
        setHeaderActive(mainHeaderIndex);
        setHeaderActive(scrollHeaderIndex, false);
        setToolbarBackgroundOpacity(mainHeaderIndex.el);
      }
    }
  });
};
const setHeaderActive = (headerIndex, active = true) => {
  const headerEl = headerIndex.el;
  if (active) {
    headerEl.classList.remove('header-collapse-condense-inactive');
    headerEl.removeAttribute('aria-hidden');
  } else {
    headerEl.classList.add('header-collapse-condense-inactive');
    headerEl.setAttribute('aria-hidden', 'true');
  }
};
const scaleLargeTitles = (toolbars = [], scale = 1, transition = false) => {
  toolbars.forEach(toolbar => {
    const ionTitle = toolbar.ionTitleEl;
    const titleDiv = toolbar.innerTitleEl;
    if (!ionTitle || ionTitle.size !== 'large') {
      return;
    }
    titleDiv.style.transition = transition ? TRANSITION : '';
    titleDiv.style.transform = `scale3d(${scale}, ${scale}, 1)`;
  });
};
const handleHeaderFade = (scrollEl, baseEl, condenseHeader) => {
  (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.e)(() => {
    const scrollTop = scrollEl.scrollTop;
    const baseElHeight = baseEl.clientHeight;
    const fadeStart = condenseHeader ? condenseHeader.clientHeight : 0;
    /**
     * If we are using fade header with a condense
     * header, then the toolbar backgrounds should
     * not begin to fade in until the condense
     * header has fully collapsed.
     *
     * Additionally, the main content should not
     * overflow out of the container until the
     * condense header has fully collapsed. When
     * using just the condense header the content
     * should overflow out of the container.
     */
    if (condenseHeader !== null && scrollTop < fadeStart) {
      baseEl.style.setProperty('--opacity-scale', '0');
      scrollEl.style.setProperty('clip-path', `inset(${baseElHeight}px 0px 0px 0px)`);
      return;
    }
    const distanceToStart = scrollTop - fadeStart;
    const fadeDuration = 10;
    const scale = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.l)(0, distanceToStart / fadeDuration, 1);
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
      scrollEl.style.removeProperty('clip-path');
      baseEl.style.setProperty('--opacity-scale', scale.toString());
    });
  });
};
const headerIosCss = "ion-header{display:block;position:relative;-ms-flex-order:-1;order:-1;width:100%;z-index:10}ion-header ion-toolbar:first-of-type{padding-top:var(--ion-safe-area-top, 0)}.header-ios ion-toolbar:last-of-type{--border-width:0 0 0.55px}@supports ((-webkit-backdrop-filter: blur(0)) or (backdrop-filter: blur(0))){.header-background{left:0;right:0;top:0;bottom:0;position:absolute;-webkit-backdrop-filter:saturate(180%) blur(20px);backdrop-filter:saturate(180%) blur(20px)}.header-translucent-ios ion-toolbar{--opacity:.8}.header-collapse-condense-inactive .header-background{-webkit-backdrop-filter:blur(20px);backdrop-filter:blur(20px)}}.header-ios.ion-no-border ion-toolbar:last-of-type{--border-width:0}.header-collapse-fade ion-toolbar{--opacity-scale:inherit}.header-collapse-condense{z-index:9}.header-collapse-condense ion-toolbar{position:-webkit-sticky;position:sticky;top:0}.header-collapse-condense ion-toolbar:first-of-type{padding-top:7px;z-index:1}.header-collapse-condense ion-toolbar{--background:var(--ion-background-color, #fff);z-index:0}.header-collapse-condense ion-toolbar:last-of-type{--border-width:0px}.header-collapse-condense ion-toolbar ion-searchbar{height:48px;padding-top:0px;padding-bottom:13px}.header-collapse-main{--opacity-scale:1}.header-collapse-main ion-toolbar{--opacity-scale:inherit}.header-collapse-main ion-toolbar.in-toolbar ion-title,.header-collapse-main ion-toolbar.in-toolbar ion-buttons{-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out}.header-collapse-condense-inactive:not(.header-collapse-condense) ion-toolbar.in-toolbar ion-title,.header-collapse-condense-inactive:not(.header-collapse-condense) ion-toolbar.in-toolbar ion-buttons.buttons-collapse{opacity:0;pointer-events:none}.header-collapse-condense-inactive.header-collapse-condense ion-toolbar.in-toolbar ion-title,.header-collapse-condense-inactive.header-collapse-condense ion-toolbar.in-toolbar ion-buttons.buttons-collapse{visibility:hidden}";
const headerMdCss = "ion-header{display:block;position:relative;-ms-flex-order:-1;order:-1;width:100%;z-index:10}ion-header ion-toolbar:first-of-type{padding-top:var(--ion-safe-area-top, 0)}.header-md{-webkit-box-shadow:0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12);box-shadow:0 2px 4px -1px rgba(0, 0, 0, 0.2), 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12)}.header-collapse-condense{display:none}.header-md.ion-no-border{-webkit-box-shadow:none;box-shadow:none}";
const Header = class {
  constructor(hostRef) {
    var _this10 = this;
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.inheritedAttributes = {};
    this.setupFadeHeader = /*#__PURE__*/function () {
      var _ref4 = (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (contentEl, condenseHeader) {
        const scrollEl = _this10.scrollEl = yield (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.g)(contentEl);
        /**
         * Handle fading of toolbars on scroll
         */
        _this10.contentScrollCallback = () => {
          handleHeaderFade(_this10.scrollEl, _this10.el, condenseHeader);
        };
        scrollEl.addEventListener('scroll', _this10.contentScrollCallback);
        handleHeaderFade(_this10.scrollEl, _this10.el, condenseHeader);
      });
      return function (_x4, _x5) {
        return _ref4.apply(this, arguments);
      };
    }();
    this.collapse = undefined;
    this.translucent = false;
  }
  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.i)(this.el);
  }
  componentDidLoad() {
    this.checkCollapsibleHeader();
  }
  componentDidUpdate() {
    this.checkCollapsibleHeader();
  }
  disconnectedCallback() {
    this.destroyCollapsibleHeader();
  }
  checkCollapsibleHeader() {
    var _this11 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this11);
      if (mode !== 'ios') {
        return;
      }
      const {
        collapse
      } = _this11;
      const hasCondense = collapse === 'condense';
      const hasFade = collapse === 'fade';
      _this11.destroyCollapsibleHeader();
      if (hasCondense) {
        const pageEl = _this11.el.closest('ion-app,ion-page,.ion-page,page-inner');
        const contentEl = pageEl ? (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.a)(pageEl) : null;
        // Cloned elements are always needed in iOS transition
        (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
          const title = cloneElement('ion-title');
          title.size = 'large';
          cloneElement('ion-back-button');
        });
        yield _this11.setupCondenseHeader(contentEl, pageEl);
      } else if (hasFade) {
        const pageEl = _this11.el.closest('ion-app,ion-page,.ion-page,page-inner');
        const contentEl = pageEl ? (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.a)(pageEl) : null;
        if (!contentEl) {
          (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.p)(_this11.el);
          return;
        }
        const condenseHeader = contentEl.querySelector('ion-header[collapse="condense"]');
        yield _this11.setupFadeHeader(contentEl, condenseHeader);
      }
    })();
  }
  destroyCollapsibleHeader() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
      this.intersectionObserver = undefined;
    }
    if (this.scrollEl && this.contentScrollCallback) {
      this.scrollEl.removeEventListener('scroll', this.contentScrollCallback);
      this.contentScrollCallback = undefined;
    }
    if (this.collapsibleMainHeader) {
      this.collapsibleMainHeader.classList.remove('header-collapse-main');
      this.collapsibleMainHeader = undefined;
    }
  }
  setupCondenseHeader(contentEl, pageEl) {
    var _this12 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!contentEl || !pageEl) {
        (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.p)(_this12.el);
        return;
      }
      if (typeof IntersectionObserver === 'undefined') {
        return;
      }
      _this12.scrollEl = yield (0,_index_7373924f_js__WEBPACK_IMPORTED_MODULE_6__.g)(contentEl);
      const headers = pageEl.querySelectorAll('ion-header');
      _this12.collapsibleMainHeader = Array.from(headers).find(header => header.collapse !== 'condense');
      if (!_this12.collapsibleMainHeader) {
        return;
      }
      const mainHeaderIndex = createHeaderIndex(_this12.collapsibleMainHeader);
      const scrollHeaderIndex = createHeaderIndex(_this12.el);
      if (!mainHeaderIndex || !scrollHeaderIndex) {
        return;
      }
      setHeaderActive(mainHeaderIndex, false);
      setToolbarBackgroundOpacity(mainHeaderIndex.el, 0);
      /**
       * Handle interaction between toolbar collapse and
       * showing/hiding content in the primary ion-header
       * as well as progressively showing/hiding the main header
       * border as the top-most toolbar collapses or expands.
       */
      const toolbarIntersection = ev => {
        handleToolbarIntersection(ev, mainHeaderIndex, scrollHeaderIndex, _this12.scrollEl);
      };
      _this12.intersectionObserver = new IntersectionObserver(toolbarIntersection, {
        root: contentEl,
        threshold: [0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]
      });
      _this12.intersectionObserver.observe(scrollHeaderIndex.toolbars[scrollHeaderIndex.toolbars.length - 1].el);
      /**
       * Handle scaling of large iOS titles and
       * showing/hiding border on last toolbar
       * in primary header
       */
      _this12.contentScrollCallback = () => {
        handleContentScroll(_this12.scrollEl, scrollHeaderIndex, contentEl);
      };
      _this12.scrollEl.addEventListener('scroll', _this12.contentScrollCallback);
      (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => {
        if (_this12.collapsibleMainHeader !== undefined) {
          _this12.collapsibleMainHeader.classList.add('header-collapse-main');
        }
      });
    })();
  }
  render() {
    const {
      translucent,
      inheritedAttributes
    } = this;
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const collapse = this.collapse || 'none';
    // banner role must be at top level, so remove role if inside a menu
    const roleType = (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.h)('ion-menu', this.el) ? 'none' : 'banner';
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, Object.assign({
      role: roleType,
      class: {
        [mode]: true,
        // Used internally for styling
        [`header-${mode}`]: true,
        [`header-translucent`]: this.translucent,
        [`header-collapse-${collapse}`]: true,
        [`header-translucent-${mode}`]: this.translucent
      }
    }, inheritedAttributes), mode === 'ios' && translucent && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "header-background"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
Header.style = {
  ios: headerIosCss,
  md: headerMdCss
};
const routeOutletCss = ":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}";
const RouterOutlet = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionNavWillLoad = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionNavWillLoad", 7);
    this.ionNavWillChange = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionNavWillChange", 3);
    this.ionNavDidChange = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionNavDidChange", 3);
    this.gestureOrAnimationInProgress = false;
    this.mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    this.delegate = undefined;
    this.animated = true;
    this.animation = undefined;
    this.swipeHandler = undefined;
  }
  swipeHandlerChanged() {
    if (this.gesture) {
      this.gesture.enable(this.swipeHandler !== undefined);
    }
  }
  connectedCallback() {
    var _this13 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const onStart = () => {
        _this13.gestureOrAnimationInProgress = true;
        if (_this13.swipeHandler) {
          _this13.swipeHandler.onStart();
        }
      };
      _this13.gesture = (yield __webpack_require__.e(/*! import() */ "common").then(__webpack_require__.bind(__webpack_require__, /*! ./swipe-back-1bb66ed2.js */ 72338))).createSwipeBackGesture(_this13.el, () => !_this13.gestureOrAnimationInProgress && !!_this13.swipeHandler && _this13.swipeHandler.canStart(), () => onStart(), step => {
        var _a;
        return (_a = _this13.ani) === null || _a === void 0 ? void 0 : _a.progressStep(step);
      }, (shouldComplete, step, dur) => {
        if (_this13.ani) {
          _this13.ani.onFinish(() => {
            _this13.gestureOrAnimationInProgress = false;
            if (_this13.swipeHandler) {
              _this13.swipeHandler.onEnd(shouldComplete);
            }
          }, {
            oneTimeCallback: true
          });
          // Account for rounding errors in JS
          let newStepValue = shouldComplete ? -0.001 : 0.001;
          /**
           * Animation will be reversed here, so need to
           * reverse the easing curve as well
           *
           * Additionally, we need to account for the time relative
           * to the new easing curve, as `stepValue` is going to be given
           * in terms of a linear curve.
           */
          if (!shouldComplete) {
            _this13.ani.easing('cubic-bezier(1, 0, 0.68, 0.28)');
            newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_8__.g)([0, 0], [1, 0], [0.68, 0.28], [1, 1], step)[0];
          } else {
            newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_8__.g)([0, 0], [0.32, 0.72], [0, 1], [1, 1], step)[0];
          }
          _this13.ani.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);
        } else {
          _this13.gestureOrAnimationInProgress = false;
        }
      });
      _this13.swipeHandlerChanged();
    })();
  }
  componentWillLoad() {
    this.ionNavWillLoad.emit();
  }
  disconnectedCallback() {
    if (this.gesture) {
      this.gesture.destroy();
      this.gesture = undefined;
    }
  }
  /** @internal */
  commit(enteringEl, leavingEl, opts) {
    var _this14 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const unlock = yield _this14.lock();
      let changed = false;
      try {
        changed = yield _this14.transition(enteringEl, leavingEl, opts);
      } catch (e) {
        console.error(e);
      }
      unlock();
      return changed;
    })();
  }
  /** @internal */
  setRouteId(id, params, direction, animation) {
    var _this15 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const changed = yield _this15.setRoot(id, params, {
        duration: direction === 'root' ? 0 : undefined,
        direction: direction === 'back' ? 'back' : 'forward',
        animationBuilder: animation
      });
      return {
        changed,
        element: _this15.activeEl
      };
    })();
  }
  /** @internal */
  getRouteId() {
    var _this16 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const active = _this16.activeEl;
      return active ? {
        id: active.tagName,
        element: active,
        params: _this16.activeParams
      } : undefined;
    })();
  }
  setRoot(component, params, opts) {
    var _this17 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this17.activeComponent === component && (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.s)(params, _this17.activeParams)) {
        return false;
      }
      // attach entering view to DOM
      const leavingEl = _this17.activeEl;
      const enteringEl = yield (0,_framework_delegate_6a45ed30_js__WEBPACK_IMPORTED_MODULE_9__.a)(_this17.delegate, _this17.el, component, ['ion-page', 'ion-page-invisible'], params);
      _this17.activeComponent = component;
      _this17.activeEl = enteringEl;
      _this17.activeParams = params;
      // commit animation
      yield _this17.commit(enteringEl, leavingEl, opts);
      yield (0,_framework_delegate_6a45ed30_js__WEBPACK_IMPORTED_MODULE_9__.d)(_this17.delegate, leavingEl);
      return true;
    })();
  }
  transition(enteringEl, leavingEl, opts = {}) {
    var _this18 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (leavingEl === enteringEl) {
        return false;
      }
      // emit nav will change event
      _this18.ionNavWillChange.emit();
      const {
        el,
        mode
      } = _this18;
      const animated = _this18.animated && _ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('animated', true);
      const animationBuilder = opts.animationBuilder || _this18.animation || _ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.c.get('navAnimation');
      yield (0,_index_afea2bcf_js__WEBPACK_IMPORTED_MODULE_10__.t)(Object.assign(Object.assign({
        mode,
        animated,
        enteringEl,
        leavingEl,
        baseEl: el,
        /**
         * We need to wait for all Stencil components
         * to be ready only when using the lazy
         * loaded bundle.
         */
        deepWait: (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__.m)(el),
        progressCallback: opts.progressAnimation ? ani => {
          /**
           * Because this progress callback is called asynchronously
           * it is possible for the gesture to start and end before
           * the animation is ever set. In that scenario, we should
           * immediately call progressEnd so that the transition promise
           * resolves and the gesture does not get locked up.
           */
          if (ani !== undefined && !_this18.gestureOrAnimationInProgress) {
            _this18.gestureOrAnimationInProgress = true;
            ani.onFinish(() => {
              _this18.gestureOrAnimationInProgress = false;
              if (_this18.swipeHandler) {
                _this18.swipeHandler.onEnd(false);
              }
            }, {
              oneTimeCallback: true
            });
            /**
             * Playing animation to beginning
             * with a duration of 0 prevents
             * any flickering when the animation
             * is later cleaned up.
             */
            ani.progressEnd(0, 0, 0);
          } else {
            _this18.ani = ani;
          }
        } : undefined
      }, opts), {
        animationBuilder
      }));
      // emit nav changed event
      _this18.ionNavDidChange.emit();
      return true;
    })();
  }
  lock() {
    var _this19 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const p = _this19.waitPromise;
      let resolve;
      _this19.waitPromise = new Promise(r => resolve = r);
      if (p !== undefined) {
        yield p;
      }
      return resolve;
    })();
  }
  render() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null);
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "swipeHandler": ["swipeHandlerChanged"]
    };
  }
};
RouterOutlet.style = routeOutletCss;
const titleIosCss = ":host{--color:initial;display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;-webkit-transform:translateZ(0);transform:translateZ(0);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}.toolbar-title{display:block;width:100%;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;pointer-events:auto}:host(.title-small) .toolbar-title{white-space:normal}:host{top:0;-webkit-padding-start:90px;padding-inline-start:90px;-webkit-padding-end:90px;padding-inline-end:90px;padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);position:absolute;width:100%;height:100%;-webkit-transform:translateZ(0);transform:translateZ(0);font-size:17px;font-weight:600;text-align:center;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}@supports (inset-inline-start: 0){:host{inset-inline-start:0}}@supports not (inset-inline-start: 0){:host{left:0}:host-context([dir=rtl]){left:unset;right:unset;right:0}@supports selector(:dir(rtl)){:host:dir(rtl){left:unset;right:unset;right:0}}}:host(.title-small){-webkit-padding-start:9px;padding-inline-start:9px;-webkit-padding-end:9px;padding-inline-end:9px;padding-top:6px;padding-bottom:16px;position:relative;font-size:13px;font-weight:normal}:host(.title-large){-webkit-padding-start:16px;padding-inline-start:16px;-webkit-padding-end:16px;padding-inline-end:16px;padding-top:0;padding-bottom:0;-webkit-transform-origin:left center;transform-origin:left center;bottom:0;-ms-flex-align:end;align-items:flex-end;min-width:100%;padding-bottom:6px;font-size:34px;font-weight:700;text-align:start}:host(.title-large.title-rtl){-webkit-transform-origin:right center;transform-origin:right center}:host(.title-large.ion-cloned-element){--color:var(--ion-text-color, #000)}:host(.title-large) .toolbar-title{-webkit-transform-origin:inherit;transform-origin:inherit}:host-context([dir=rtl]):host(.title-large) .toolbar-title,:host-context([dir=rtl]).title-large .toolbar-title{-webkit-transform-origin:calc(100% - inherit);transform-origin:calc(100% - inherit)}@supports selector(:dir(rtl)){:host(.title-large) .toolbar-title:dir(rtl){-webkit-transform-origin:calc(100% - inherit);transform-origin:calc(100% - inherit)}}";
const titleMdCss = ":host{--color:initial;display:-ms-flexbox;display:flex;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;-webkit-transform:translateZ(0);transform:translateZ(0);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}.toolbar-title{display:block;width:100%;text-overflow:ellipsis;white-space:nowrap;overflow:hidden;pointer-events:auto}:host(.title-small) .toolbar-title{white-space:normal}:host{-webkit-padding-start:20px;padding-inline-start:20px;-webkit-padding-end:20px;padding-inline-end:20px;padding-top:0;padding-bottom:0;font-size:20px;font-weight:500;letter-spacing:0.0125em}:host(.title-small){width:100%;height:100%;font-size:15px;font-weight:normal}";
const ToolbarTitle = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionStyle = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionStyle", 7);
    this.color = undefined;
    this.size = undefined;
  }
  sizeChanged() {
    this.emitStyle();
  }
  connectedCallback() {
    this.emitStyle();
  }
  emitStyle() {
    const size = this.getSize();
    this.ionStyle.emit({
      [`title-${size}`]: true
    });
  }
  getSize() {
    return this.size !== undefined ? this.size : 'default';
  }
  render() {
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const size = this.getSize();
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.color, {
        [mode]: true,
        [`title-${size}`]: true,
        'title-rtl': document.dir === 'rtl'
      })
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "toolbar-title"
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "size": ["sizeChanged"]
    };
  }
};
ToolbarTitle.style = {
  ios: titleIosCss,
  md: titleMdCss
};
const toolbarIosCss = ":host{--border-width:0;--border-style:solid;--opacity:1;--opacity-scale:1;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-padding-start:var(--ion-safe-area-left);padding-inline-start:var(--ion-safe-area-left);-webkit-padding-end:var(--ion-safe-area-right);padding-inline-end:var(--ion-safe-area-right);display:block;position:relative;width:100%;color:var(--color);font-family:var(--ion-font-family, inherit);contain:content;z-index:10;-webkit-box-sizing:border-box;box-sizing:border-box}:host(.ion-color){color:var(--ion-color-contrast)}:host(.ion-color) .toolbar-background{background:var(--ion-color-base)}.toolbar-container{-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;width:100%;min-height:var(--min-height);contain:content;overflow:hidden;z-index:10;-webkit-box-sizing:border-box;box-sizing:border-box}.toolbar-background{left:0;right:0;top:0;bottom:0;position:absolute;-webkit-transform:translateZ(0);transform:translateZ(0);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);contain:strict;opacity:calc(var(--opacity) * var(--opacity-scale));z-index:-1;pointer-events:none}::slotted(ion-progress-bar){left:0;right:0;bottom:0;position:absolute}:host{--background:var(--ion-toolbar-background, var(--ion-color-step-50, #f7f7f7));--color:var(--ion-toolbar-color, var(--ion-text-color, #000));--border-color:var(--ion-toolbar-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.2))));--padding-top:3px;--padding-bottom:3px;--padding-start:4px;--padding-end:4px;--min-height:44px}.toolbar-content{-ms-flex:1;flex:1;-ms-flex-order:4;order:4;min-width:0}:host(.toolbar-segment) .toolbar-content{display:-ms-inline-flexbox;display:inline-flex}:host(.toolbar-searchbar) .toolbar-container{padding-top:0;padding-bottom:0}:host(.toolbar-searchbar) ::slotted(*){-ms-flex-item-align:start;align-self:start}:host(.toolbar-searchbar) ::slotted(ion-chip){margin-top:3px}:host(.toolbar-searchbar) ::slotted(ion-back-button){height:38px}::slotted(ion-buttons){min-height:38px}::slotted([slot=start]){-ms-flex-order:2;order:2}::slotted([slot=secondary]){-ms-flex-order:3;order:3}::slotted([slot=primary]){-ms-flex-order:5;order:5;text-align:end}::slotted([slot=end]){-ms-flex-order:6;order:6;text-align:end}:host(.toolbar-title-large) .toolbar-container{-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:start;align-items:flex-start}:host(.toolbar-title-large) .toolbar-content ion-title{-ms-flex:1;flex:1;-ms-flex-order:8;order:8;min-width:100%}";
const toolbarMdCss = ":host{--border-width:0;--border-style:solid;--opacity:1;--opacity-scale:1;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;-webkit-padding-start:var(--ion-safe-area-left);padding-inline-start:var(--ion-safe-area-left);-webkit-padding-end:var(--ion-safe-area-right);padding-inline-end:var(--ion-safe-area-right);display:block;position:relative;width:100%;color:var(--color);font-family:var(--ion-font-family, inherit);contain:content;z-index:10;-webkit-box-sizing:border-box;box-sizing:border-box}:host(.ion-color){color:var(--ion-color-contrast)}:host(.ion-color) .toolbar-background{background:var(--ion-color-base)}.toolbar-container{-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:row;flex-direction:row;-ms-flex-align:center;align-items:center;-ms-flex-pack:justify;justify-content:space-between;width:100%;min-height:var(--min-height);contain:content;overflow:hidden;z-index:10;-webkit-box-sizing:border-box;box-sizing:border-box}.toolbar-background{left:0;right:0;top:0;bottom:0;position:absolute;-webkit-transform:translateZ(0);transform:translateZ(0);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);contain:strict;opacity:calc(var(--opacity) * var(--opacity-scale));z-index:-1;pointer-events:none}::slotted(ion-progress-bar){left:0;right:0;bottom:0;position:absolute}:host{--background:var(--ion-toolbar-background, var(--ion-background-color, #fff));--color:var(--ion-toolbar-color, var(--ion-text-color, #424242));--border-color:var(--ion-toolbar-border-color, var(--ion-border-color, var(--ion-color-step-150, #c1c4cd)));--padding-top:0;--padding-bottom:0;--padding-start:0;--padding-end:0;--min-height:56px}.toolbar-content{-ms-flex:1;flex:1;-ms-flex-order:3;order:3;min-width:0;max-width:100%}::slotted(.buttons-first-slot){-webkit-margin-start:4px;margin-inline-start:4px}::slotted(.buttons-last-slot){-webkit-margin-end:4px;margin-inline-end:4px}::slotted([slot=start]){-ms-flex-order:2;order:2}::slotted([slot=secondary]){-ms-flex-order:4;order:4}::slotted([slot=primary]){-ms-flex-order:5;order:5;text-align:end}::slotted([slot=end]){-ms-flex-order:6;order:6;text-align:end}";
const Toolbar = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.childrenStyles = new Map();
    this.color = undefined;
  }
  componentWillLoad() {
    const buttons = Array.from(this.el.querySelectorAll('ion-buttons'));
    const firstButtons = buttons.find(button => {
      return button.slot === 'start';
    });
    if (firstButtons) {
      firstButtons.classList.add('buttons-first-slot');
    }
    const buttonsReversed = buttons.reverse();
    const lastButtons = buttonsReversed.find(button => button.slot === 'end') || buttonsReversed.find(button => button.slot === 'primary') || buttonsReversed.find(button => button.slot === 'secondary');
    if (lastButtons) {
      lastButtons.classList.add('buttons-last-slot');
    }
  }
  childrenStyle(ev) {
    ev.stopPropagation();
    const tagName = ev.target.tagName;
    const updatedStyles = ev.detail;
    const newStyles = {};
    const childStyles = this.childrenStyles.get(tagName) || {};
    let hasStyleChange = false;
    Object.keys(updatedStyles).forEach(key => {
      const childKey = `toolbar-${key}`;
      const newValue = updatedStyles[key];
      if (newValue !== childStyles[childKey]) {
        hasStyleChange = true;
      }
      if (newValue) {
        newStyles[childKey] = true;
      }
    });
    if (hasStyleChange) {
      this.childrenStyles.set(tagName, newStyles);
      (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.i)(this);
    }
  }
  render() {
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const childStyles = {};
    this.childrenStyles.forEach(value => {
      Object.assign(childStyles, value);
    });
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: Object.assign(Object.assign({}, childStyles), (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.color, {
        [mode]: true,
        'in-toolbar': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_5__.h)('ion-toolbar', this.el)
      }))
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "toolbar-background"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "toolbar-container"
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "start"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "secondary"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "toolbar-content"
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "primary"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "end"
    })));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
Toolbar.style = {
  ios: toolbarIosCss,
  md: toolbarMdCss
};


/***/ }),

/***/ 51257:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createColorClasses),
/* harmony export */   g: () => (/* binding */ getClassMap),
/* harmony export */   h: () => (/* binding */ hostContext),
/* harmony export */   o: () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */
const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};
const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }
  return [];
};
const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};
const SCHEME = /^[a-z][a-z0-9+\-.]*:/;
const openURL = /*#__PURE__*/function () {
  var _ref = (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');
      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }
        return router.push(url, direction, animation);
      }
    }
    return false;
  });
  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLWFwcF84X2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzhKO0FBQ25FO0FBQzBEO0FBQ3RHO0FBQ2lDO0FBQytCO0FBQzdCO0FBQ1I7QUFDb0I7QUFDeEM7QUFDekI7QUFDQTtBQUNHO0FBRWhDLE1BQU0yQyxNQUFNLEdBQUcsdVNBQXVTO0FBRXRULE1BQU1DLEdBQUcsR0FBRyxNQUFNO0VBQ2hCQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUU7SUFDbkI3QyxxREFBZ0IsQ0FBQyxJQUFJLEVBQUU2QyxPQUFPLENBQUM7RUFDakM7RUFDQUMsZ0JBQWdCQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxLQUFBO0lBQ2pCO01BQ0VDLEdBQUcsZUFBQUMsOEpBQUEsQ0FBQyxhQUFZO1FBQ2QsTUFBTUMsUUFBUSxHQUFHL0IsNERBQVUsQ0FBQ2dDLE1BQU0sRUFBRSxRQUFRLENBQUM7UUFDN0MsSUFBSSxDQUFDbEMsd0RBQU0sQ0FBQ21DLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRTtVQUNsQyxpTEFBNkIsQ0FBQ0MsSUFBSSxDQUFFQyxNQUFNLElBQUtBLE1BQU0sQ0FBQ0MsYUFBYSxDQUFDdEMsd0RBQU0sQ0FBQyxDQUFDO1FBQzlFO1FBQ0EsSUFBSUEsd0RBQU0sQ0FBQ21DLFVBQVUsQ0FBQyxXQUFXLEVBQUVGLFFBQVEsQ0FBQyxFQUFFO1VBQzVDLDBMQUFrQyxDQUFDRyxJQUFJLENBQUVDLE1BQU0sSUFBS0EsTUFBTSxDQUFDRSxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQzlFO1FBQ0EsSUFBSXZDLHdEQUFNLENBQUNtQyxVQUFVLENBQUMsWUFBWSxFQUFFSyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7VUFDckQ7QUFDVjtBQUNBO0FBQ0E7VUFDVSxNQUFNQyxRQUFRLEdBQUd2Qyw0REFBVSxDQUFDZ0MsTUFBTSxFQUFF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RyxPQUFPQSxDQUFBbE8sRUFBQSxFQUFBVSxHQUFBLEVBQUFDLEdBQUEsRUFBQWdGLEdBQUE7SUFBQSxPQUFBd0ksSUFBQSxDQUFBbE8sS0FBQSxPQUFBQyxTQUFBO0VBQUE7QUFBQSxHQVdaIiwic291cmNlcyI6WyIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS9pb24tYXBwXzguZW50cnkuanMiLCIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS90aGVtZS03NjcwMzQxYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBoLCBIIGFzIEhvc3QsIGYgYXMgZ2V0RWxlbWVudCwgZCBhcyBjcmVhdGVFdmVudCwgZSBhcyByZWFkVGFzaywgaSBhcyBmb3JjZVVwZGF0ZSwgdyBhcyB3cml0ZVRhc2sgfSBmcm9tICcuL2luZGV4LTM2YTVmZDc1LmpzJztcbmltcG9ydCB7IGIgYXMgZ2V0SW9uTW9kZSwgYyBhcyBjb25maWcsIGEgYXMgaXNQbGF0Zm9ybSB9IGZyb20gJy4vaW9uaWMtZ2xvYmFsLWE5YWJkNTY5LmpzJztcbmltcG9ydCB7IGMgYXMgY29tcG9uZW50T25SZWFkeSwgbCBhcyBjbGFtcCwgaSBhcyBpbmhlcml0QXJpYUF0dHJpYnV0ZXMsIHMgYXMgc2hhbGxvd0VxdWFsU3RyaW5nTWFwLCBtIGFzIGhhc0xhenlCdWlsZCB9IGZyb20gJy4vaGVscGVycy1mNTg2ZGIxYy5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzUlRMIH0gZnJvbSAnLi9kaXItZThiNzY3YTguanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVDb2xvckNsYXNzZXMsIGggYXMgaG9zdENvbnRleHQgfSBmcm9tICcuL3RoZW1lLTc2NzAzNDFjLmpzJztcbmltcG9ydCB7IGEgYXMgZmluZElvbkNvbnRlbnQsIHAgYXMgcHJpbnRJb25Db250ZW50RXJyb3JNc2csIGcgYXMgZ2V0U2Nyb2xsRWxlbWVudCB9IGZyb20gJy4vaW5kZXgtNzM3MzkyNGYuanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVLZXlib2FyZENvbnRyb2xsZXIgfSBmcm9tICcuL2tleWJvYXJkLWNvbnRyb2xsZXItMjQ4NzMxMGYuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbiB9IGZyb20gJy4vY3ViaWMtYmV6aWVyLWU3OGQxMzA3LmpzJztcbmltcG9ydCB7IGEgYXMgYXR0YWNoQ29tcG9uZW50LCBkIGFzIGRldGFjaENvbXBvbmVudCB9IGZyb20gJy4vZnJhbWV3b3JrLWRlbGVnYXRlLTZhNDVlZDMwLmpzJztcbmltcG9ydCB7IHQgYXMgdHJhbnNpdGlvbiB9IGZyb20gJy4vaW5kZXgtYWZlYTJiY2YuanMnO1xuaW1wb3J0ICcuL2luZGV4LWU4NmYwMTE3LmpzJztcbmltcG9ydCAnLi9pbmRleC1iMzJjYWQ5OC5qcyc7XG5pbXBvcnQgJy4va2V5Ym9hcmQtODU2YmM5MjkuanMnO1xuXG5jb25zdCBhcHBDc3MgPSBcImh0bWwucGx0LW1vYmlsZSBpb24tYXBwey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX1odG1sLnBsdC1tb2JpbGUgaW9uLWFwcCBbY29udGVudGVkaXRhYmxlXXstd2Via2l0LXVzZXItc2VsZWN0OnRleHQ7LW1vei11c2VyLXNlbGVjdDp0ZXh0Oy1tcy11c2VyLXNlbGVjdDp0ZXh0O3VzZXItc2VsZWN0OnRleHR9aW9uLWFwcC5mb3JjZS1zdGF0dXNiYXItcGFkZGluZ3stLWlvbi1zYWZlLWFyZWEtdG9wOjIwcHh9XCI7XG5cbmNvbnN0IEFwcCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB7XG4gICAgICBySUMoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBpc0h5YnJpZCA9IGlzUGxhdGZvcm0od2luZG93LCAnaHlicmlkJyk7XG4gICAgICAgIGlmICghY29uZmlnLmdldEJvb2xlYW4oJ190ZXN0aW5nJykpIHtcbiAgICAgICAgICBpbXBvcnQoJy4vaW5kZXgtMTIwNGZlOTUuanMnKS50aGVuKChtb2R1bGUpID0+IG1vZHVsZS5zdGFydFRhcENsaWNrKGNvbmZpZykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbignc3RhdHVzVGFwJywgaXNIeWJyaWQpKSB7XG4gICAgICAgICAgaW1wb3J0KCcuL3N0YXR1cy10YXAtMjExZjFhZDguanMnKS50aGVuKChtb2R1bGUpID0+IG1vZHVsZS5zdGFydFN0YXR1c1RhcCgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLmdldEJvb2xlYW4oJ2lucHV0U2hpbXMnLCBuZWVkSW5wdXRTaGltcygpKSkge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIG5lZWRJbnB1dFNoaW1zKCkgZW5zdXJlcyB0aGF0IG9ubHkgaU9TIGFuZCBBbmRyb2lkXG4gICAgICAgICAgICogcGxhdGZvcm1zIHByb2NlZWQgaW50byB0aGlzIGJsb2NrLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IHBsYXRmb3JtID0gaXNQbGF0Zm9ybSh3aW5kb3csICdpb3MnKSA/ICdpb3MnIDogJ2FuZHJvaWQnO1xuICAgICAgICAgIGltcG9ydCgnLi9pbnB1dC1zaGltcy02ZjcxYjU1Mi5qcycpLnRoZW4oKG1vZHVsZSkgPT4gbW9kdWxlLnN0YXJ0SW5wdXRTaGltcyhjb25maWcsIHBsYXRmb3JtKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFyZHdhcmVCYWNrQnV0dG9uTW9kdWxlID0gYXdhaXQgaW1wb3J0KCcuL2hhcmR3YXJlLWJhY2stYnV0dG9uLTQ5MGRmMTE1LmpzJyk7XG4gICAgICAgIGlmIChjb25maWcuZ2V0Qm9vbGVhbignaGFyZHdhcmVCYWNrQnV0dG9uJywgaXNIeWJyaWQpKSB7XG4gICAgICAgICAgaGFyZHdhcmVCYWNrQnV0dG9uTW9kdWxlLnN0YXJ0SGFyZHdhcmVCYWNrQnV0dG9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaGFyZHdhcmVCYWNrQnV0dG9uTW9kdWxlLmJsb2NrSGFyZHdhcmVCYWNrQnV0dG9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaW1wb3J0KCcuL2tleWJvYXJkLTlhZDYxNjE2LmpzJykudGhlbigobW9kdWxlKSA9PiBtb2R1bGUuc3RhcnRLZXlib2FyZEFzc2lzdCh3aW5kb3cpKTtcbiAgICAgICAgfVxuICAgICAgICBpbXBvcnQoJy4vZm9jdXMtdmlzaWJsZS0xMGFkNDg2Ny5qcycpLnRoZW4oKG1vZHVsZSkgPT4gKHRoaXMuZm9jdXNWaXNpYmxlID0gbW9kdWxlLnN0YXJ0Rm9jdXNWaXNpYmxlKCkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFVzZWQgdG8gc2V0IGZvY3VzIG9uIGFuIGVsZW1lbnQgdGhhdCB1c2VzIGBpb24tZm9jdXNhYmxlYC5cbiAgICogRG8gbm90IHVzZSB0aGlzIGlmIGZvY3VzaW5nIHRoZSBlbGVtZW50IGFzIGEgcmVzdWx0IG9mIGEga2V5Ym9hcmRcbiAgICogZXZlbnQgYXMgdGhlIGZvY3VzIHV0aWxpdHkgc2hvdWxkIGhhbmRsZSB0aGlzIGZvciB1cy4gVGhpcyBtZXRob2RcbiAgICogc2hvdWxkIGJlIHVzZWQgd2hlbiB3ZSB3YW50IHRvIHByb2dyYW1tYXRpY2FsbHkgZm9jdXMgYW4gZWxlbWVudCBhc1xuICAgKiBhIHJlc3VsdCBvZiBhbm90aGVyIHVzZXIgYWN0aW9uLiAoRXg6IFdlIGZvY3VzIHRoZSBmaXJzdCBlbGVtZW50XG4gICAqIGluc2lkZSBvZiBhIHBvcG92ZXIgd2hlbiB0aGUgdXNlciBwcmVzZW50cyBpdCwgYnV0IHRoZSBwb3BvdmVyIGlzIG5vdCBhbHdheXNcbiAgICogcHJlc2VudGVkIGFzIGEgcmVzdWx0IG9mIGtleWJvYXJkIGFjdGlvbi4pXG4gICAqL1xuICBhc3luYyBzZXRGb2N1cyhlbGVtZW50cykge1xuICAgIGlmICh0aGlzLmZvY3VzVmlzaWJsZSkge1xuICAgICAgdGhpcy5mb2N1c1Zpc2libGUuc2V0Rm9jdXMoZWxlbWVudHMpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAnaW9uLXBhZ2UnOiB0cnVlLFxuICAgICAgICAnZm9yY2Utc3RhdHVzYmFyLXBhZGRpbmcnOiBjb25maWcuZ2V0Qm9vbGVhbignX2ZvcmNlU3RhdHVzYmFyUGFkZGluZycpLFxuICAgICAgfSB9KSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbmNvbnN0IG5lZWRJbnB1dFNoaW1zID0gKCkgPT4ge1xuICAvKipcbiAgICogaU9TIGFsd2F5cyBuZWVkcyBpbnB1dCBzaGltc1xuICAgKi9cbiAgY29uc3QgbmVlZHNTaGltc0lPUyA9IGlzUGxhdGZvcm0od2luZG93LCAnaW9zJykgJiYgaXNQbGF0Zm9ybSh3aW5kb3csICdtb2JpbGUnKTtcbiAgaWYgKG5lZWRzU2hpbXNJT1MpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogQW5kcm9pZCBvbmx5IG5lZWRzIGlucHV0IHNoaW1zIHdoZW4gcnVubmluZ1xuICAgKiBpbiB0aGUgYnJvd3NlciBhbmQgb25seSBpZiB0aGUgYnJvd3NlciBpcyB1c2luZyB0aGVcbiAgICogbmV3IENocm9tZSAxMDgrIHJlc2l6ZSBiZWhhdmlvcjogaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL3ZpZXdwb3J0LXJlc2l6ZS1iZWhhdmlvci9cbiAgICovXG4gIGNvbnN0IGlzQW5kcm9pZE1vYmlsZVdlYiA9IGlzUGxhdGZvcm0od2luZG93LCAnYW5kcm9pZCcpICYmIGlzUGxhdGZvcm0od2luZG93LCAnbW9iaWxld2ViJyk7XG4gIGlmIChpc0FuZHJvaWRNb2JpbGVXZWIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgcklDID0gKGNhbGxiYWNrKSA9PiB7XG4gIGlmICgncmVxdWVzdElkbGVDYWxsYmFjaycgaW4gd2luZG93KSB7XG4gICAgd2luZG93LnJlcXVlc3RJZGxlQ2FsbGJhY2soY2FsbGJhY2spO1xuICB9XG4gIGVsc2Uge1xuICAgIHNldFRpbWVvdXQoY2FsbGJhY2ssIDMyKTtcbiAgfVxufTtcbkFwcC5zdHlsZSA9IGFwcENzcztcblxuY29uc3QgYnV0dG9uc0lvc0NzcyA9IFwiLnNjLWlvbi1idXR0b25zLWlvcy1oe2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt6LWluZGV4Ojk5fS5zYy1pb24tYnV0dG9ucy1pb3MtcyBpb24tYnV0dG9uey0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctYm90dG9tOjA7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowfS5zYy1pb24tYnV0dG9ucy1pb3MtcyBpb24tYnV0dG9uey0tcGFkZGluZy1zdGFydDo1cHg7LS1wYWRkaW5nLWVuZDo1cHg7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MnB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6MnB4Oy13ZWJraXQtbWFyZ2luLWVuZDoycHg7bWFyZ2luLWlubGluZS1lbmQ6MnB4O2hlaWdodDozMnB4fS5zYy1pb24tYnV0dG9ucy1pb3MtcyBpb24tYnV0dG9uOm5vdCguYnV0dG9uLXJvdW5kKXstLWJvcmRlci1yYWRpdXM6NHB4fS5zYy1pb24tYnV0dG9ucy1pb3MtaC5pb24tY29sb3Iuc2MtaW9uLWJ1dHRvbnMtaW9zLXMgLmJ1dHRvbiwuaW9uLWNvbG9yIC5zYy1pb24tYnV0dG9ucy1pb3MtaC5zYy1pb24tYnV0dG9ucy1pb3MtcyAuYnV0dG9uey0tY29sb3I6aW5pdGlhbDstLWJvcmRlci1jb2xvcjppbml0aWFsOy0tYmFja2dyb3VuZC1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9LnNjLWlvbi1idXR0b25zLWlvcy1oLmlvbi1jb2xvci5zYy1pb24tYnV0dG9ucy1pb3MtcyAuYnV0dG9uLXNvbGlkLC5pb24tY29sb3IgLnNjLWlvbi1idXR0b25zLWlvcy1oLnNjLWlvbi1idXR0b25zLWlvcy1zIC5idXR0b24tc29saWR7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCk7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6IzAwMDstLWJhY2tncm91bmQtZm9jdXNlZC1vcGFjaXR5Oi4xMjstLWJhY2tncm91bmQtYWN0aXZhdGVkOiMwMDA7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZC1vcGFjaXR5Oi4xMjstLWJhY2tncm91bmQtaG92ZXI6dmFyKC0taW9uLWNvbG9yLWJhc2UpOy0tYmFja2dyb3VuZC1ob3Zlci1vcGFjaXR5OjAuNDU7LS1jb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSk7LS1jb2xvci1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1iYXNlKX0uc2MtaW9uLWJ1dHRvbnMtaW9zLWguaW9uLWNvbG9yLnNjLWlvbi1idXR0b25zLWlvcy1zIC5idXR0b24tY2xlYXIsLmlvbi1jb2xvciAuc2MtaW9uLWJ1dHRvbnMtaW9zLWguc2MtaW9uLWJ1dHRvbnMtaW9zLXMgLmJ1dHRvbi1jbGVhcnstLWNvbG9yLWFjdGl2YXRlZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpOy0tY29sb3ItZm9jdXNlZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfS5zYy1pb24tYnV0dG9ucy1pb3MtaC5pb24tY29sb3Iuc2MtaW9uLWJ1dHRvbnMtaW9zLXMgLmJ1dHRvbi1vdXRsaW5lLC5pb24tY29sb3IgLnNjLWlvbi1idXR0b25zLWlvcy1oLnNjLWlvbi1idXR0b25zLWlvcy1zIC5idXR0b24tb3V0bGluZXstLWNvbG9yLWFjdGl2YXRlZDp2YXIoLS1pb24tY29sb3ItYmFzZSk7LS1jb2xvci1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCk7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfS5zYy1pb24tYnV0dG9ucy1pb3MtcyAuYnV0dG9uLWNsZWFyLC5zYy1pb24tYnV0dG9ucy1pb3MtcyAuYnV0dG9uLW91dGxpbmV7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZDp0cmFuc3BhcmVudDstLWJhY2tncm91bmQtZm9jdXNlZDpjdXJyZW50Q29sb3I7LS1iYWNrZ3JvdW5kLWhvdmVyOnRyYW5zcGFyZW50fS5zYy1pb24tYnV0dG9ucy1pb3MtcyAuYnV0dG9uLXNvbGlkOm5vdCguaW9uLWNvbG9yKXstLWJhY2tncm91bmQtZm9jdXNlZDojMDAwOy0tYmFja2dyb3VuZC1mb2N1c2VkLW9wYWNpdHk6LjEyOy0tYmFja2dyb3VuZC1hY3RpdmF0ZWQ6IzAwMDstLWJhY2tncm91bmQtYWN0aXZhdGVkLW9wYWNpdHk6LjEyfS5zYy1pb24tYnV0dG9ucy1pb3MtcyBpb24taWNvbltzbG90PXN0YXJ0XXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7LXdlYmtpdC1tYXJnaW4tZW5kOjAuM2VtO21hcmdpbi1pbmxpbmUtZW5kOjAuM2VtO2ZvbnQtc2l6ZToyNHB4O2xpbmUtaGVpZ2h0OjAuNjd9LnNjLWlvbi1idXR0b25zLWlvcy1zIGlvbi1pY29uW3Nsb3Q9ZW5kXXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MC40ZW07bWFyZ2luLWlubGluZS1zdGFydDowLjRlbTtmb250LXNpemU6MjRweDtsaW5lLWhlaWdodDowLjY3fS5zYy1pb24tYnV0dG9ucy1pb3MtcyBpb24taWNvbltzbG90PWljb24tb25seV17cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7Zm9udC1zaXplOjI4cHg7bGluZS1oZWlnaHQ6MC42N31cIjtcblxuY29uc3QgYnV0dG9uc01kQ3NzID0gXCIuc2MtaW9uLWJ1dHRvbnMtbWQtaHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7ei1pbmRleDo5OX0uc2MtaW9uLWJ1dHRvbnMtbWQtcyBpb24tYnV0dG9uey0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctYm90dG9tOjA7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowfS5zYy1pb24tYnV0dG9ucy1tZC1zIGlvbi1idXR0b257LS1wYWRkaW5nLXRvcDowOy0tcGFkZGluZy1ib3R0b206MDstLXBhZGRpbmctc3RhcnQ6OHB4Oy0tcGFkZGluZy1lbmQ6OHB4Oy0tYm94LXNoYWRvdzpub25lOy13ZWJraXQtbWFyZ2luLXN0YXJ0OjJweDttYXJnaW4taW5saW5lLXN0YXJ0OjJweDstd2Via2l0LW1hcmdpbi1lbmQ6MnB4O21hcmdpbi1pbmxpbmUtZW5kOjJweDtoZWlnaHQ6MzJweH0uc2MtaW9uLWJ1dHRvbnMtbWQtcyBpb24tYnV0dG9uOm5vdCguYnV0dG9uLXJvdW5kKXstLWJvcmRlci1yYWRpdXM6MnB4fS5zYy1pb24tYnV0dG9ucy1tZC1oLmlvbi1jb2xvci5zYy1pb24tYnV0dG9ucy1tZC1zIC5idXR0b24sLmlvbi1jb2xvciAuc2MtaW9uLWJ1dHRvbnMtbWQtaC5zYy1pb24tYnV0dG9ucy1tZC1zIC5idXR0b257LS1jb2xvcjppbml0aWFsOy0tY29sb3ItZm9jdXNlZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpOy0tY29sb3ItaG92ZXI6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KTstLWJhY2tncm91bmQtYWN0aXZhdGVkOnRyYW5zcGFyZW50Oy0tYmFja2dyb3VuZC1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCk7LS1iYWNrZ3JvdW5kLWhvdmVyOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9LnNjLWlvbi1idXR0b25zLW1kLWguaW9uLWNvbG9yLnNjLWlvbi1idXR0b25zLW1kLXMgLmJ1dHRvbi1zb2xpZCwuaW9uLWNvbG9yIC5zYy1pb24tYnV0dG9ucy1tZC1oLnNjLWlvbi1idXR0b25zLW1kLXMgLmJ1dHRvbi1zb2xpZHstLWJhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KTstLWJhY2tncm91bmQtYWN0aXZhdGVkOnRyYW5zcGFyZW50Oy0tYmFja2dyb3VuZC1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1zaGFkZSk7LS1iYWNrZ3JvdW5kLWhvdmVyOnZhcigtLWlvbi1jb2xvci1iYXNlKTstLWNvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKTstLWNvbG9yLWZvY3VzZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpOy0tY29sb3ItaG92ZXI6dmFyKC0taW9uLWNvbG9yLWJhc2UpfS5zYy1pb24tYnV0dG9ucy1tZC1oLmlvbi1jb2xvci5zYy1pb24tYnV0dG9ucy1tZC1zIC5idXR0b24tb3V0bGluZSwuaW9uLWNvbG9yIC5zYy1pb24tYnV0dG9ucy1tZC1oLnNjLWlvbi1idXR0b25zLW1kLXMgLmJ1dHRvbi1vdXRsaW5ley0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9LnNjLWlvbi1idXR0b25zLW1kLXMgLmJ1dHRvbi1oYXMtaWNvbi1vbmx5LmJ1dHRvbi1jbGVhcnstLXBhZGRpbmctdG9wOjEycHg7LS1wYWRkaW5nLWVuZDoxMnB4Oy0tcGFkZGluZy1ib3R0b206MTJweDstLXBhZGRpbmctc3RhcnQ6MTJweDstLWJvcmRlci1yYWRpdXM6NTAlO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDt3aWR0aDo0OHB4O2hlaWdodDo0OHB4fS5zYy1pb24tYnV0dG9ucy1tZC1zIC5idXR0b257LS1iYWNrZ3JvdW5kLWhvdmVyOmN1cnJlbnRDb2xvcn0uc2MtaW9uLWJ1dHRvbnMtbWQtcyAuYnV0dG9uLXNvbGlkey0tY29sb3I6dmFyKC0taW9uLXRvb2xiYXItYmFja2dyb3VuZCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKTstLWJhY2tncm91bmQ6dmFyKC0taW9uLXRvb2xiYXItY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjNDI0MjQyKSk7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZDp0cmFuc3BhcmVudDstLWJhY2tncm91bmQtZm9jdXNlZDpjdXJyZW50Q29sb3J9LnNjLWlvbi1idXR0b25zLW1kLXMgLmJ1dHRvbi1vdXRsaW5ley0tY29sb3I6aW5pdGlhbDstLWJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZDp0cmFuc3BhcmVudDstLWJhY2tncm91bmQtZm9jdXNlZDpjdXJyZW50Q29sb3I7LS1iYWNrZ3JvdW5kLWhvdmVyOmN1cnJlbnRDb2xvcjstLWJvcmRlci1jb2xvcjpjdXJyZW50Q29sb3J9LnNjLWlvbi1idXR0b25zLW1kLXMgLmJ1dHRvbi1jbGVhcnstLWNvbG9yOmluaXRpYWw7LS1iYWNrZ3JvdW5kOnRyYW5zcGFyZW50Oy0tYmFja2dyb3VuZC1hY3RpdmF0ZWQ6dHJhbnNwYXJlbnQ7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6Y3VycmVudENvbG9yOy0tYmFja2dyb3VuZC1ob3ZlcjpjdXJyZW50Q29sb3J9LnNjLWlvbi1idXR0b25zLW1kLXMgaW9uLWljb25bc2xvdD1zdGFydF17bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowOy13ZWJraXQtbWFyZ2luLWVuZDowLjNlbTttYXJnaW4taW5saW5lLWVuZDowLjNlbTtmb250LXNpemU6MS40ZW19LnNjLWlvbi1idXR0b25zLW1kLXMgaW9uLWljb25bc2xvdD1lbmRde21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDstd2Via2l0LW1hcmdpbi1zdGFydDowLjRlbTttYXJnaW4taW5saW5lLXN0YXJ0OjAuNGVtO2ZvbnQtc2l6ZToxLjRlbX0uc2MtaW9uLWJ1dHRvbnMtbWQtcyBpb24taWNvbltzbG90PWljb24tb25seV17cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7Zm9udC1zaXplOjEuOGVtfVwiO1xuXG5jb25zdCBCdXR0b25zID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmNvbGxhcHNlID0gZmFsc2U7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgWydidXR0b25zLWNvbGxhcHNlJ106IHRoaXMuY29sbGFwc2UsXG4gICAgICB9IH0pKTtcbiAgfVxufTtcbkJ1dHRvbnMuc3R5bGUgPSB7XG4gIGlvczogYnV0dG9uc0lvc0NzcyxcbiAgbWQ6IGJ1dHRvbnNNZENzc1xufTtcblxuY29uc3QgY29udGVudENzcyA9IFwiOmhvc3R7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKTstLWNvbG9yOnZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKTstLXBhZGRpbmctdG9wOjBweDstLXBhZGRpbmctYm90dG9tOjBweDstLXBhZGRpbmctc3RhcnQ6MHB4Oy0tcGFkZGluZy1lbmQ6MHB4Oy0ta2V5Ym9hcmQtb2Zmc2V0OjBweDstLW9mZnNldC10b3A6MHB4Oy0tb2Zmc2V0LWJvdHRvbTowcHg7LS1vdmVyZmxvdzphdXRvO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXg6MTtmbGV4OjE7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTttYXJnaW46MCAhaW1wb3J0YW50O3BhZGRpbmc6MCAhaW1wb3J0YW50O2ZvbnQtZmFtaWx5OnZhcigtLWlvbi1mb250LWZhbWlseSwgaW5oZXJpdCk7Y29udGFpbjpzaXplIHN0eWxlfTpob3N0KC5pb24tY29sb3IpIC5pbm5lci1zY3JvbGx7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItYmFzZSk7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX06aG9zdCgub3V0ZXItY29udGVudCl7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTUwLCAjZjJmMmYyKX0jYmFja2dyb3VuZC1jb250ZW50e2xlZnQ6MHB4O3JpZ2h0OjBweDt0b3A6Y2FsYyh2YXIoLS1vZmZzZXQtdG9wKSAqIC0xKTtib3R0b206Y2FsYyh2YXIoLS1vZmZzZXQtYm90dG9tKSAqIC0xKTtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpfS5pbm5lci1zY3JvbGx7bGVmdDowcHg7cmlnaHQ6MHB4O3RvcDpjYWxjKHZhcigtLW9mZnNldC10b3ApICogLTEpO2JvdHRvbTpjYWxjKHZhcigtLW9mZnNldC1ib3R0b20pICogLTEpOy13ZWJraXQtcGFkZGluZy1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLWlubGluZS1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctdG9wOmNhbGModmFyKC0tcGFkZGluZy10b3ApICsgdmFyKC0tb2Zmc2V0LXRvcCkpO3BhZGRpbmctYm90dG9tOmNhbGModmFyKC0tcGFkZGluZy1ib3R0b20pICsgdmFyKC0ta2V5Ym9hcmQtb2Zmc2V0KSArIHZhcigtLW9mZnNldC1ib3R0b20pKTtwb3NpdGlvbjphYnNvbHV0ZTtjb2xvcjp2YXIoLS1jb2xvcik7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OmhpZGRlbjstbXMtdG91Y2gtYWN0aW9uOnBhbi14IHBhbi15IHBpbmNoLXpvb207dG91Y2gtYWN0aW9uOnBhbi14IHBhbi15IHBpbmNoLXpvb219LnNjcm9sbC15LC5zY3JvbGwteHstd2Via2l0LW92ZXJmbG93LXNjcm9sbGluZzp0b3VjaDt6LWluZGV4OjA7d2lsbC1jaGFuZ2U6c2Nyb2xsLXBvc2l0aW9ufS5zY3JvbGwteXtvdmVyZmxvdy15OnZhcigtLW92ZXJmbG93KTtvdmVyc2Nyb2xsLWJlaGF2aW9yLXk6Y29udGFpbn0uc2Nyb2xsLXh7b3ZlcmZsb3cteDp2YXIoLS1vdmVyZmxvdyk7b3ZlcnNjcm9sbC1iZWhhdmlvci14OmNvbnRhaW59Lm92ZXJzY3JvbGw6OmJlZm9yZSwub3ZlcnNjcm9sbDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MXB4O2hlaWdodDoxcHg7Y29udGVudDpcXFwiXFxcIn0ub3ZlcnNjcm9sbDo6YmVmb3Jle2JvdHRvbTotMXB4fS5vdmVyc2Nyb2xsOjphZnRlcnt0b3A6LTFweH06aG9zdCguY29udGVudC1zaXppbmcpe2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO21pbi1oZWlnaHQ6MDtjb250YWluOm5vbmV9Omhvc3QoLmNvbnRlbnQtc2l6aW5nKSAuaW5uZXItc2Nyb2xse3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDowO2JvdHRvbTowO21hcmdpbi10b3A6Y2FsYyh2YXIoLS1vZmZzZXQtdG9wKSAqIC0xKTttYXJnaW4tYm90dG9tOmNhbGModmFyKC0tb2Zmc2V0LWJvdHRvbSkgKiAtMSl9LnRyYW5zaXRpb24tZWZmZWN0e2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDB2aDtvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguY29udGVudC1sdHIpIC50cmFuc2l0aW9uLWVmZmVjdHtsZWZ0Oi0xMDAlO306aG9zdCguY29udGVudC1ydGwpIC50cmFuc2l0aW9uLWVmZmVjdHtyaWdodDotMTAwJTt9LnRyYW5zaXRpb24tY292ZXJ7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JhY2tncm91bmQ6YmxhY2s7b3BhY2l0eTowLjF9LnRyYW5zaXRpb24tc2hhZG93e2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTstd2Via2l0LWJveC1zaGFkb3c6aW5zZXQgLTlweCAwIDlweCAwIHJnYmEoMCwgMCwgMTAwLCAwLjAzKTtib3gtc2hhZG93Omluc2V0IC05cHggMCA5cHggMCByZ2JhKDAsIDAsIDEwMCwgMC4wMyl9Omhvc3QoLmNvbnRlbnQtbHRyKSAudHJhbnNpdGlvbi1zaGFkb3d7cmlnaHQ6MDt9Omhvc3QoLmNvbnRlbnQtcnRsKSAudHJhbnNpdGlvbi1zaGFkb3d7bGVmdDowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlWCgtMSk7dHJhbnNmb3JtOnNjYWxlWCgtMSl9OjpzbG90dGVkKFtzbG90PWZpeGVkXSl7cG9zaXRpb246YWJzb2x1dGU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX1cIjtcblxuY29uc3QgQ29udGVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25TY3JvbGxTdGFydCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uU2Nyb2xsU3RhcnRcIiwgNyk7XG4gICAgdGhpcy5pb25TY3JvbGwgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblNjcm9sbFwiLCA3KTtcbiAgICB0aGlzLmlvblNjcm9sbEVuZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uU2Nyb2xsRW5kXCIsIDcpO1xuICAgIHRoaXMud2F0Y2hEb2cgPSBudWxsO1xuICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmxhc3RTY3JvbGwgPSAwO1xuICAgIHRoaXMucXVldWVkID0gZmFsc2U7XG4gICAgdGhpcy5jVG9wID0gLTE7XG4gICAgdGhpcy5jQm90dG9tID0gLTE7XG4gICAgdGhpcy5pc01haW5Db250ZW50ID0gdHJ1ZTtcbiAgICB0aGlzLnJlc2l6ZVRpbWVvdXQgPSBudWxsO1xuICAgIC8vIERldGFpbCBpcyB1c2VkIGluIGEgaG90IGxvb3AgaW4gdGhlIHNjcm9sbCBldmVudCwgYnkgYWxsb2NhdGluZyBpdCBoZXJlXG4gICAgLy8gVjggd2lsbCBiZSBhYmxlIHRvIGlubGluZSBhbnkgcmVhZC93cml0ZSB0byBpdCBzaW5jZSBpdCdzIGEgbW9ub21vcnBoaWMgY2xhc3MuXG4gICAgLy8gaHR0cHM6Ly9tcmFsZS5waC9ibG9nLzIwMTUvMDEvMTEvd2hhdHMtdXAtd2l0aC1tb25vbW9ycGhpc20uaHRtbFxuICAgIHRoaXMuZGV0YWlsID0ge1xuICAgICAgc2Nyb2xsVG9wOiAwLFxuICAgICAgc2Nyb2xsTGVmdDogMCxcbiAgICAgIHR5cGU6ICdzY3JvbGwnLFxuICAgICAgZXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXJ0WDogMCxcbiAgICAgIHN0YXJ0WTogMCxcbiAgICAgIHN0YXJ0VGltZTogMCxcbiAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgY3VycmVudFk6IDAsXG4gICAgICB2ZWxvY2l0eVg6IDAsXG4gICAgICB2ZWxvY2l0eVk6IDAsXG4gICAgICBkZWx0YVg6IDAsXG4gICAgICBkZWx0YVk6IDAsXG4gICAgICBjdXJyZW50VGltZTogMCxcbiAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGlzU2Nyb2xsaW5nOiB0cnVlLFxuICAgIH07XG4gICAgdGhpcy5jb2xvciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZ1bGxzY3JlZW4gPSBmYWxzZTtcbiAgICB0aGlzLmZvcmNlT3ZlcnNjcm9sbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNjcm9sbFggPSBmYWxzZTtcbiAgICB0aGlzLnNjcm9sbFkgPSB0cnVlO1xuICAgIHRoaXMuc2Nyb2xsRXZlbnRzID0gZmFsc2U7XG4gIH1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5pc01haW5Db250ZW50ID0gdGhpcy5lbC5jbG9zZXN0KCdpb24tbWVudSwgaW9uLXBvcG92ZXIsIGlvbi1tb2RhbCcpID09PSBudWxsO1xuICB9XG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMub25TY3JvbGxFbmQoKTtcbiAgfVxuICBvbkFwcExvYWQoKSB7XG4gICAgdGhpcy5yZXNpemUoKTtcbiAgfVxuICAvKipcbiAgICogUm90YXRpbmcgY2VydGFpbiBkZXZpY2VzIGNhbiB1cGRhdGVcbiAgICogdGhlIHNhZmUgYXJlYSBpbnNldHMuIEFzIGEgcmVzdWx0LFxuICAgKiB0aGUgZnVsbHNjcmVlbiBmZWF0dXJlIG9uIGlvbi1jb250ZW50XG4gICAqIG5lZWRzIHRvIGJlIHJlY2FsY3VsYXRlZC5cbiAgICpcbiAgICogV2UgbGlzdGVuIGZvciBcInJlc2l6ZVwiIGJlY2F1c2Ugd2VcbiAgICogZG8gbm90IGNhcmUgd2hhdCB0aGUgb3JpZW50YXRpb24gb2ZcbiAgICogdGhlIGRldmljZSBpcy4gT3RoZXIgQVBJc1xuICAgKiBzdWNoIGFzIFNjcmVlbk9yaWVudGF0aW9uIG9yXG4gICAqIHRoZSBkZXZpY2VvcmllbnRhdGlvbiBldmVudCBtdXN0IGhhdmVcbiAgICogcGVybWlzc2lvbiBmcm9tIHRoZSB1c2VyIGZpcnN0IHdoZXJlYXNcbiAgICogdGhlIFwicmVzaXplXCIgZXZlbnQgZG9lcyBub3QuXG4gICAqXG4gICAqIFdlIGFsc28gdGhyb3R0bGUgdGhlIGNhbGxiYWNrIHRvIG1pbmltaXplXG4gICAqIHRocmFzaGluZyB3aGVuIHF1aWNrbHkgcmVzaXppbmcgYSB3aW5kb3cuXG4gICAqL1xuICBvblJlc2l6ZSgpIHtcbiAgICBpZiAodGhpcy5yZXNpemVUaW1lb3V0KSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lb3V0KTtcbiAgICAgIHRoaXMucmVzaXplVGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiBSZXNpemUgc2hvdWxkIG9ubHkgaGFwcGVuXG4gICAgICAgKiBpZiB0aGUgY29udGVudCBpcyB2aXNpYmxlLlxuICAgICAgICogV2hlbiB0aGUgY29udGVudCBpcyBoaWRkZW5cbiAgICAgICAqIHRoZW4gb2Zmc2V0UGFyZW50IHdpbGwgYmUgbnVsbC5cbiAgICAgICAqL1xuICAgICAgaWYgKHRoaXMuZWwub2Zmc2V0UGFyZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfSwgMTAwKTtcbiAgfVxuICBzaG91bGRGb3JjZU92ZXJzY3JvbGwoKSB7XG4gICAgY29uc3QgeyBmb3JjZU92ZXJzY3JvbGwgfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgcmV0dXJuIGZvcmNlT3ZlcnNjcm9sbCA9PT0gdW5kZWZpbmVkID8gbW9kZSA9PT0gJ2lvcycgJiYgaXNQbGF0Zm9ybSgnaW9zJykgOiBmb3JjZU92ZXJzY3JvbGw7XG4gIH1cbiAgcmVzaXplKCkge1xuICAgIC8qKlxuICAgICAqIE9ubHkgZm9yY2UgdXBkYXRlIGlmIHRoZSBjb21wb25lbnQgaXMgcmVuZGVyZWQgaW4gYSBicm93c2VyIGNvbnRleHQuXG4gICAgICogVXNpbmcgYGZvcmNlVXBkYXRlYCBpbiBhIHNlcnZlciBjb250ZXh0IHdpdGggcHJlLXJlbmRlcmluZyBjYW4gbGVhZCB0byBhbiBpbmZpbml0ZSBsb29wLlxuICAgICAqIFRoZSBgaHlkcmF0ZURvY3VtZW50YCBmdW5jdGlvbiBpbiBgQHN0ZW5jaWwvY29yZWAgd2lsbCByZW5kZXIgdGhlIGBpb24tY29udGVudGAsIGJ1dFxuICAgICAqIGBmb3JjZVVwZGF0ZWAgd2lsbCB0cmlnZ2VyIGFub3RoZXIgcmVuZGVyLCBsb2NraW5nIHVwIHRoZSBzZXJ2ZXIuXG4gICAgICpcbiAgICAgKiBUT0RPOiBSZW1vdmUgaWYgU1RFTkNJTC04MzQgZGV0ZXJtaW5lcyBTdGVuY2lsIHdpbGwgYWNjb3VudCBmb3IgdGhpcy5cbiAgICAgKi9cbiAgICB7XG4gICAgICBpZiAodGhpcy5mdWxsc2NyZWVuKSB7XG4gICAgICAgIHJlYWRUYXNrKCgpID0+IHRoaXMucmVhZERpbWVuc2lvbnMoKSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLmNUb3AgIT09IDAgfHwgdGhpcy5jQm90dG9tICE9PSAwKSB7XG4gICAgICAgIHRoaXMuY1RvcCA9IHRoaXMuY0JvdHRvbSA9IDA7XG4gICAgICAgIGZvcmNlVXBkYXRlKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZWFkRGltZW5zaW9ucygpIHtcbiAgICBjb25zdCBwYWdlID0gZ2V0UGFnZUVsZW1lbnQodGhpcy5lbCk7XG4gICAgY29uc3QgdG9wID0gTWF0aC5tYXgodGhpcy5lbC5vZmZzZXRUb3AsIDApO1xuICAgIGNvbnN0IGJvdHRvbSA9IE1hdGgubWF4KHBhZ2Uub2Zmc2V0SGVpZ2h0IC0gdG9wIC0gdGhpcy5lbC5vZmZzZXRIZWlnaHQsIDApO1xuICAgIGNvbnN0IGRpcnR5ID0gdG9wICE9PSB0aGlzLmNUb3AgfHwgYm90dG9tICE9PSB0aGlzLmNCb3R0b207XG4gICAgaWYgKGRpcnR5KSB7XG4gICAgICB0aGlzLmNUb3AgPSB0b3A7XG4gICAgICB0aGlzLmNCb3R0b20gPSBib3R0b207XG4gICAgICBmb3JjZVVwZGF0ZSh0aGlzKTtcbiAgICB9XG4gIH1cbiAgb25TY3JvbGwoZXYpIHtcbiAgICBjb25zdCB0aW1lU3RhbXAgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IHNob3VsZFN0YXJ0ID0gIXRoaXMuaXNTY3JvbGxpbmc7XG4gICAgdGhpcy5sYXN0U2Nyb2xsID0gdGltZVN0YW1wO1xuICAgIGlmIChzaG91bGRTdGFydCkge1xuICAgICAgdGhpcy5vblNjcm9sbFN0YXJ0KCk7XG4gICAgfVxuICAgIGlmICghdGhpcy5xdWV1ZWQgJiYgdGhpcy5zY3JvbGxFdmVudHMpIHtcbiAgICAgIHRoaXMucXVldWVkID0gdHJ1ZTtcbiAgICAgIHJlYWRUYXNrKCh0cykgPT4ge1xuICAgICAgICB0aGlzLnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRldGFpbC5ldmVudCA9IGV2O1xuICAgICAgICB1cGRhdGVTY3JvbGxEZXRhaWwodGhpcy5kZXRhaWwsIHRoaXMuc2Nyb2xsRWwsIHRzLCBzaG91bGRTdGFydCk7XG4gICAgICAgIHRoaXMuaW9uU2Nyb2xsLmVtaXQodGhpcy5kZXRhaWwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGFjdHVhbCBzY3JvbGxpbmcgdGFrZXMgcGxhY2UuXG4gICAqIFRoaXMgZWxlbWVudCBjYW4gYmUgdXNlZCB0byBzdWJzY3JpYmUgdG8gYHNjcm9sbGAgZXZlbnRzIG9yIG1hbnVhbGx5IG1vZGlmeVxuICAgKiBgc2Nyb2xsVG9wYC4gSG93ZXZlciwgaXQncyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIEFQSSBwcm92aWRlZCBieSBgaW9uLWNvbnRlbnRgOlxuICAgKlxuICAgKiBpLmUuIFVzaW5nIGBpb25TY3JvbGxgLCBgaW9uU2Nyb2xsU3RhcnRgLCBgaW9uU2Nyb2xsRW5kYCBmb3Igc2Nyb2xsaW5nIGV2ZW50c1xuICAgKiBhbmQgYHNjcm9sbFRvUG9pbnQoKWAgdG8gc2Nyb2xsIHRoZSBjb250ZW50IGludG8gYSBjZXJ0YWluIHBvaW50LlxuICAgKi9cbiAgYXN5bmMgZ2V0U2Nyb2xsRWxlbWVudCgpIHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGlzIGdldHMgY2FsbGVkIGluIGNlcnRhaW4gZWFybHkgbGlmZWN5Y2xlIGhvb2tzIChleDogVnVlIG9uTW91bnRlZCksXG4gICAgICogc2Nyb2xsRWwgd29uJ3QgYmUgZGVmaW5lZCB5ZXQgd2l0aCB0aGUgY3VzdG9tIGVsZW1lbnRzIGJ1aWxkLCBzbyB3YWl0IGZvciBpdCB0byBsb2FkIGluLlxuICAgICAqL1xuICAgIGlmICghdGhpcy5zY3JvbGxFbCkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IGNvbXBvbmVudE9uUmVhZHkodGhpcy5lbCwgcmVzb2x2ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuc2Nyb2xsRWwpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBiYWNrZ3JvdW5kIGNvbnRlbnQgZWxlbWVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBnZXRCYWNrZ3JvdW5kRWxlbWVudCgpIHtcbiAgICBpZiAoIXRoaXMuYmFja2dyb3VuZENvbnRlbnRFbCkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IGNvbXBvbmVudE9uUmVhZHkodGhpcy5lbCwgcmVzb2x2ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuYmFja2dyb3VuZENvbnRlbnRFbCk7XG4gIH1cbiAgLyoqXG4gICAqIFNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gdGFrZSBzY3JvbGxpbmcgdG8gdGhlIHRvcC4gRGVmYXVsdHMgdG8gYDBgLlxuICAgKi9cbiAgc2Nyb2xsVG9Ub3AoZHVyYXRpb24gPSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsVG9Qb2ludCh1bmRlZmluZWQsIDAsIGR1cmF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogU2Nyb2xsIHRvIHRoZSBib3R0b20gb2YgdGhlIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIGR1cmF0aW9uIFRoZSBhbW91bnQgb2YgdGltZSB0byB0YWtlIHNjcm9sbGluZyB0byB0aGUgYm90dG9tLiBEZWZhdWx0cyB0byBgMGAuXG4gICAqL1xuICBhc3luYyBzY3JvbGxUb0JvdHRvbShkdXJhdGlvbiA9IDApIHtcbiAgICBjb25zdCBzY3JvbGxFbCA9IGF3YWl0IHRoaXMuZ2V0U2Nyb2xsRWxlbWVudCgpO1xuICAgIGNvbnN0IHkgPSBzY3JvbGxFbC5zY3JvbGxIZWlnaHQgLSBzY3JvbGxFbC5jbGllbnRIZWlnaHQ7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsVG9Qb2ludCh1bmRlZmluZWQsIHksIGR1cmF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogU2Nyb2xsIGJ5IGEgc3BlY2lmaWVkIFgvWSBkaXN0YW5jZSBpbiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0geCBUaGUgYW1vdW50IHRvIHNjcm9sbCBieSBvbiB0aGUgaG9yaXpvbnRhbCBheGlzLlxuICAgKiBAcGFyYW0geSBUaGUgYW1vdW50IHRvIHNjcm9sbCBieSBvbiB0aGUgdmVydGljYWwgYXhpcy5cbiAgICogQHBhcmFtIGR1cmF0aW9uIFRoZSBhbW91bnQgb2YgdGltZSB0byB0YWtlIHNjcm9sbGluZyBieSB0aGF0IGFtb3VudC5cbiAgICovXG4gIGFzeW5jIHNjcm9sbEJ5UG9pbnQoeCwgeSwgZHVyYXRpb24pIHtcbiAgICBjb25zdCBzY3JvbGxFbCA9IGF3YWl0IHRoaXMuZ2V0U2Nyb2xsRWxlbWVudCgpO1xuICAgIHJldHVybiB0aGlzLnNjcm9sbFRvUG9pbnQoeCArIHNjcm9sbEVsLnNjcm9sbExlZnQsIHkgKyBzY3JvbGxFbC5zY3JvbGxUb3AsIGR1cmF0aW9uKTtcbiAgfVxuICAvKipcbiAgICogU2Nyb2xsIHRvIGEgc3BlY2lmaWVkIFgvWSBsb2NhdGlvbiBpbiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0geCBUaGUgcG9pbnQgdG8gc2Nyb2xsIHRvIG9uIHRoZSBob3Jpem9udGFsIGF4aXMuXG4gICAqIEBwYXJhbSB5IFRoZSBwb2ludCB0byBzY3JvbGwgdG8gb24gdGhlIHZlcnRpY2FsIGF4aXMuXG4gICAqIEBwYXJhbSBkdXJhdGlvbiBUaGUgYW1vdW50IG9mIHRpbWUgdG8gdGFrZSBzY3JvbGxpbmcgdG8gdGhhdCBwb2ludC4gRGVmYXVsdHMgdG8gYDBgLlxuICAgKi9cbiAgYXN5bmMgc2Nyb2xsVG9Qb2ludCh4LCB5LCBkdXJhdGlvbiA9IDApIHtcbiAgICBjb25zdCBlbCA9IGF3YWl0IHRoaXMuZ2V0U2Nyb2xsRWxlbWVudCgpO1xuICAgIGlmIChkdXJhdGlvbiA8IDMyKSB7XG4gICAgICBpZiAoeSAhPSBudWxsKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IHk7XG4gICAgICB9XG4gICAgICBpZiAoeCAhPSBudWxsKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSB4O1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcmVzb2x2ZTtcbiAgICBsZXQgc3RhcnRUaW1lID0gMDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHIpID0+IChyZXNvbHZlID0gcikpO1xuICAgIGNvbnN0IGZyb21ZID0gZWwuc2Nyb2xsVG9wO1xuICAgIGNvbnN0IGZyb21YID0gZWwuc2Nyb2xsTGVmdDtcbiAgICBjb25zdCBkZWx0YVkgPSB5ICE9IG51bGwgPyB5IC0gZnJvbVkgOiAwO1xuICAgIGNvbnN0IGRlbHRhWCA9IHggIT0gbnVsbCA/IHggLSBmcm9tWCA6IDA7XG4gICAgLy8gc2Nyb2xsIGxvb3BcbiAgICBjb25zdCBzdGVwID0gKHRpbWVTdGFtcCkgPT4ge1xuICAgICAgY29uc3QgbGluZWFyVGltZSA9IE1hdGgubWluKDEsICh0aW1lU3RhbXAgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24pIC0gMTtcbiAgICAgIGNvbnN0IGVhc2VkVCA9IE1hdGgucG93KGxpbmVhclRpbWUsIDMpICsgMTtcbiAgICAgIGlmIChkZWx0YVkgIT09IDApIHtcbiAgICAgICAgZWwuc2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlYXNlZFQgKiBkZWx0YVkgKyBmcm9tWSk7XG4gICAgICB9XG4gICAgICBpZiAoZGVsdGFYICE9PSAwKSB7XG4gICAgICAgIGVsLnNjcm9sbExlZnQgPSBNYXRoLmZsb29yKGVhc2VkVCAqIGRlbHRhWCArIGZyb21YKTtcbiAgICAgIH1cbiAgICAgIGlmIChlYXNlZFQgPCAxKSB7XG4gICAgICAgIC8vIGRvIG5vdCB1c2UgRG9tQ29udHJvbGxlciBoZXJlXG4gICAgICAgIC8vIG11c3QgdXNlIG5hdGl2ZVJhZiBpbiBvcmRlciB0byBmaXJlIGluIHRoZSBuZXh0IGZyYW1lXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBjaGlsbCBvdXQgZm9yIGEgZnJhbWUgZmlyc3RcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKHRzKSA9PiB7XG4gICAgICBzdGFydFRpbWUgPSB0cztcbiAgICAgIHN0ZXAodHMpO1xuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIG9uU2Nyb2xsU3RhcnQoKSB7XG4gICAgdGhpcy5pc1Njcm9sbGluZyA9IHRydWU7XG4gICAgdGhpcy5pb25TY3JvbGxTdGFydC5lbWl0KHtcbiAgICAgIGlzU2Nyb2xsaW5nOiB0cnVlLFxuICAgIH0pO1xuICAgIGlmICh0aGlzLndhdGNoRG9nKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMud2F0Y2hEb2cpO1xuICAgIH1cbiAgICAvLyB3YXRjaGRvZ1xuICAgIHRoaXMud2F0Y2hEb2cgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAodGhpcy5sYXN0U2Nyb2xsIDwgRGF0ZS5ub3coKSAtIDEyMCkge1xuICAgICAgICB0aGlzLm9uU2Nyb2xsRW5kKCk7XG4gICAgICB9XG4gICAgfSwgMTAwKTtcbiAgfVxuICBvblNjcm9sbEVuZCgpIHtcbiAgICBpZiAodGhpcy53YXRjaERvZylcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy53YXRjaERvZyk7XG4gICAgdGhpcy53YXRjaERvZyA9IG51bGw7XG4gICAgaWYgKHRoaXMuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHRoaXMuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuaW9uU2Nyb2xsRW5kLmVtaXQoe1xuICAgICAgICBpc1Njcm9sbGluZzogZmFsc2UsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaXNNYWluQ29udGVudCwgc2Nyb2xsWCwgc2Nyb2xsWSwgZWwgfSA9IHRoaXM7XG4gICAgY29uc3QgcnRsID0gaXNSVEwoZWwpID8gJ3J0bCcgOiAnbHRyJztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBmb3JjZU92ZXJzY3JvbGwgPSB0aGlzLnNob3VsZEZvcmNlT3ZlcnNjcm9sbCgpO1xuICAgIGNvbnN0IHRyYW5zaXRpb25TaGFkb3cgPSBtb2RlID09PSAnaW9zJztcbiAgICBjb25zdCBUYWdUeXBlID0gaXNNYWluQ29udGVudCA/ICdtYWluJyA6ICdkaXYnO1xuICAgIHRoaXMucmVzaXplKCk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IGNyZWF0ZUNvbG9yQ2xhc3Nlcyh0aGlzLmNvbG9yLCB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgJ2NvbnRlbnQtc2l6aW5nJzogaG9zdENvbnRleHQoJ2lvbi1wb3BvdmVyJywgdGhpcy5lbCksXG4gICAgICAgIG92ZXJzY3JvbGw6IGZvcmNlT3ZlcnNjcm9sbCxcbiAgICAgICAgW2Bjb250ZW50LSR7cnRsfWBdOiB0cnVlLFxuICAgICAgfSksIHN0eWxlOiB7XG4gICAgICAgICctLW9mZnNldC10b3AnOiBgJHt0aGlzLmNUb3B9cHhgLFxuICAgICAgICAnLS1vZmZzZXQtYm90dG9tJzogYCR7dGhpcy5jQm90dG9tfXB4YCxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IHJlZjogKGVsKSA9PiAodGhpcy5iYWNrZ3JvdW5kQ29udGVudEVsID0gZWwpLCBpZDogXCJiYWNrZ3JvdW5kLWNvbnRlbnRcIiwgcGFydDogXCJiYWNrZ3JvdW5kXCIgfSksIGgoVGFnVHlwZSwgeyBjbGFzczoge1xuICAgICAgICAnaW5uZXItc2Nyb2xsJzogdHJ1ZSxcbiAgICAgICAgJ3Njcm9sbC14Jzogc2Nyb2xsWCxcbiAgICAgICAgJ3Njcm9sbC15Jzogc2Nyb2xsWSxcbiAgICAgICAgb3ZlcnNjcm9sbDogKHNjcm9sbFggfHwgc2Nyb2xsWSkgJiYgZm9yY2VPdmVyc2Nyb2xsLFxuICAgICAgfSwgcmVmOiAoc2Nyb2xsRWwpID0+ICh0aGlzLnNjcm9sbEVsID0gc2Nyb2xsRWwpLCBvblNjcm9sbDogdGhpcy5zY3JvbGxFdmVudHMgPyAoZXYpID0+IHRoaXMub25TY3JvbGwoZXYpIDogdW5kZWZpbmVkLCBwYXJ0OiBcInNjcm9sbFwiIH0sIGgoXCJzbG90XCIsIG51bGwpKSwgdHJhbnNpdGlvblNoYWRvdyA/IChoKFwiZGl2XCIsIHsgY2xhc3M6IFwidHJhbnNpdGlvbi1lZmZlY3RcIiB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidHJhbnNpdGlvbi1jb3ZlclwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidHJhbnNpdGlvbi1zaGFkb3dcIiB9KSkpIDogbnVsbCwgaChcInNsb3RcIiwgeyBuYW1lOiBcImZpeGVkXCIgfSkpKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG59O1xuY29uc3QgZ2V0UGFyZW50RWxlbWVudCA9IChlbCkgPT4ge1xuICB2YXIgX2E7XG4gIGlmIChlbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgLy8gbm9ybWFsIGVsZW1lbnQgd2l0aCBhIHBhcmVudCBlbGVtZW50XG4gICAgcmV0dXJuIGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgaWYgKChfYSA9IGVsLnBhcmVudE5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5ob3N0KSB7XG4gICAgLy8gc2hhZG93IGRvbSdzIGRvY3VtZW50IGZyYWdtZW50XG4gICAgcmV0dXJuIGVsLnBhcmVudE5vZGUuaG9zdDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5jb25zdCBnZXRQYWdlRWxlbWVudCA9IChlbCkgPT4ge1xuICBjb25zdCB0YWJzID0gZWwuY2xvc2VzdCgnaW9uLXRhYnMnKTtcbiAgaWYgKHRhYnMpIHtcbiAgICByZXR1cm4gdGFicztcbiAgfVxuICAvKipcbiAgICogSWYgd2UncmUgaW4gYSBwb3BvdmVyLCB3ZSBuZWVkIHRvIHVzZSBpdHMgd3JhcHBlciBzbyB3ZSBjYW4gYWNjb3VudCBmb3Igc3BhY2VcbiAgICogYmV0d2VlbiB0aGUgcG9wb3ZlciBhbmQgdGhlIGVkZ2VzIG9mIHRoZSBzY3JlZW4uIEJ1dCBpZiB0aGUgcG9wb3ZlciBjb250YWluc1xuICAgKiBpdHMgb3duIHBhZ2UgZWxlbWVudCwgd2Ugc2hvdWxkIHVzZSB0aGF0IGluc3RlYWQuXG4gICAqL1xuICBjb25zdCBwYWdlID0gZWwuY2xvc2VzdCgnaW9uLWFwcCwgaW9uLXBhZ2UsIC5pb24tcGFnZSwgcGFnZS1pbm5lciwgLnBvcG92ZXItY29udGVudCcpO1xuICBpZiAocGFnZSkge1xuICAgIHJldHVybiBwYWdlO1xuICB9XG4gIHJldHVybiBnZXRQYXJlbnRFbGVtZW50KGVsKTtcbn07XG4vLyAqKioqKioqKiBET00gUkVBRCAqKioqKioqKioqKioqKioqXG5jb25zdCB1cGRhdGVTY3JvbGxEZXRhaWwgPSAoZGV0YWlsLCBlbCwgdGltZXN0YW1wLCBzaG91bGRTdGFydCkgPT4ge1xuICBjb25zdCBwcmV2WCA9IGRldGFpbC5jdXJyZW50WDtcbiAgY29uc3QgcHJldlkgPSBkZXRhaWwuY3VycmVudFk7XG4gIGNvbnN0IHByZXZUID0gZGV0YWlsLmN1cnJlbnRUaW1lO1xuICBjb25zdCBjdXJyZW50WCA9IGVsLnNjcm9sbExlZnQ7XG4gIGNvbnN0IGN1cnJlbnRZID0gZWwuc2Nyb2xsVG9wO1xuICBjb25zdCB0aW1lRGVsdGEgPSB0aW1lc3RhbXAgLSBwcmV2VDtcbiAgaWYgKHNob3VsZFN0YXJ0KSB7XG4gICAgLy8gcmVtZW1iZXIgdGhlIHN0YXJ0IHBvc2l0aW9uc1xuICAgIGRldGFpbC5zdGFydFRpbWUgPSB0aW1lc3RhbXA7XG4gICAgZGV0YWlsLnN0YXJ0WCA9IGN1cnJlbnRYO1xuICAgIGRldGFpbC5zdGFydFkgPSBjdXJyZW50WTtcbiAgICBkZXRhaWwudmVsb2NpdHlYID0gZGV0YWlsLnZlbG9jaXR5WSA9IDA7XG4gIH1cbiAgZGV0YWlsLmN1cnJlbnRUaW1lID0gdGltZXN0YW1wO1xuICBkZXRhaWwuY3VycmVudFggPSBkZXRhaWwuc2Nyb2xsTGVmdCA9IGN1cnJlbnRYO1xuICBkZXRhaWwuY3VycmVudFkgPSBkZXRhaWwuc2Nyb2xsVG9wID0gY3VycmVudFk7XG4gIGRldGFpbC5kZWx0YVggPSBjdXJyZW50WCAtIGRldGFpbC5zdGFydFg7XG4gIGRldGFpbC5kZWx0YVkgPSBjdXJyZW50WSAtIGRldGFpbC5zdGFydFk7XG4gIGlmICh0aW1lRGVsdGEgPiAwICYmIHRpbWVEZWx0YSA8IDEwMCkge1xuICAgIGNvbnN0IHZlbG9jaXR5WCA9IChjdXJyZW50WCAtIHByZXZYKSAvIHRpbWVEZWx0YTtcbiAgICBjb25zdCB2ZWxvY2l0eVkgPSAoY3VycmVudFkgLSBwcmV2WSkgLyB0aW1lRGVsdGE7XG4gICAgZGV0YWlsLnZlbG9jaXR5WCA9IHZlbG9jaXR5WCAqIDAuNyArIGRldGFpbC52ZWxvY2l0eVggKiAwLjM7XG4gICAgZGV0YWlsLnZlbG9jaXR5WSA9IHZlbG9jaXR5WSAqIDAuNyArIGRldGFpbC52ZWxvY2l0eVkgKiAwLjM7XG4gIH1cbn07XG5Db250ZW50LnN0eWxlID0gY29udGVudENzcztcblxuY29uc3QgaGFuZGxlRm9vdGVyRmFkZSA9IChzY3JvbGxFbCwgYmFzZUVsKSA9PiB7XG4gIHJlYWRUYXNrKCgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBzY3JvbGxFbC5zY3JvbGxUb3A7XG4gICAgY29uc3QgbWF4U2Nyb2xsID0gc2Nyb2xsRWwuc2Nyb2xsSGVpZ2h0IC0gc2Nyb2xsRWwuY2xpZW50SGVpZ2h0O1xuICAgIC8qKlxuICAgICAqIFRvb2xiYXIgYmFja2dyb3VuZCB3aWxsIGZhZGVcbiAgICAgKiBvdXQgb3ZlciBmYWRlRHVyYXRpb24gaW4gcGl4ZWxzLlxuICAgICAqL1xuICAgIGNvbnN0IGZhZGVEdXJhdGlvbiA9IDEwO1xuICAgIC8qKlxuICAgICAqIEJlZ2luIGZhZGluZyBvdXQgbWF4U2Nyb2xsIC0gMzBweFxuICAgICAqIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgY29udGVudC5cbiAgICAgKiBBbHNvIGRldGVybWluZSBob3cgY2xvc2Ugd2UgYXJlXG4gICAgICogdG8gc3RhcnRpbmcgdGhlIGZhZGUuIElmIHdlIGFyZVxuICAgICAqIGJlZm9yZSB0aGUgc3RhcnRpbmcgcG9pbnQsIHRoZVxuICAgICAqIHNjYWxlIHZhbHVlIHdpbGwgZ2V0IGNsYW1wZWQgdG8gMC5cbiAgICAgKiBJZiB3ZSBhcmUgYWZ0ZXIgdGhlIG1heFNjcm9sbCAocnViYmVyXG4gICAgICogYmFuZCBzY3JvbGxpbmcpLCB0aGUgc2NhbGUgdmFsdWUgd2lsbFxuICAgICAqIGdldCBjbGFtcGVkIHRvIDEuXG4gICAgICovXG4gICAgY29uc3QgZmFkZVN0YXJ0ID0gbWF4U2Nyb2xsIC0gZmFkZUR1cmF0aW9uO1xuICAgIGNvbnN0IGRpc3RhbmNlVG9TdGFydCA9IHNjcm9sbFRvcCAtIGZhZGVTdGFydDtcbiAgICBjb25zdCBzY2FsZSA9IGNsYW1wKDAsIDEgLSBkaXN0YW5jZVRvU3RhcnQgLyBmYWRlRHVyYXRpb24sIDEpO1xuICAgIHdyaXRlVGFzaygoKSA9PiB7XG4gICAgICBiYXNlRWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tb3BhY2l0eS1zY2FsZScsIHNjYWxlLnRvU3RyaW5nKCkpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IGZvb3Rlcklvc0NzcyA9IFwiaW9uLWZvb3RlcntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LW9yZGVyOjE7b3JkZXI6MTt3aWR0aDoxMDAlO3otaW5kZXg6MTB9aW9uLWZvb3Rlci5mb290ZXItdG9vbGJhci1wYWRkaW5nIGlvbi10b29sYmFyOmxhc3Qtb2YtdHlwZXtwYWRkaW5nLWJvdHRvbTp2YXIoLS1pb24tc2FmZS1hcmVhLWJvdHRvbSwgMCl9LmZvb3Rlci1pb3MgaW9uLXRvb2xiYXI6Zmlyc3Qtb2YtdHlwZXstLWJvcmRlci13aWR0aDowLjU1cHggMCAwfUBzdXBwb3J0cyAoKC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDApKSBvciAoYmFja2Ryb3AtZmlsdGVyOiBibHVyKDApKSl7LmZvb3Rlci1iYWNrZ3JvdW5ke2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlOy13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOnNhdHVyYXRlKDE4MCUpIGJsdXIoMjBweCk7YmFja2Ryb3AtZmlsdGVyOnNhdHVyYXRlKDE4MCUpIGJsdXIoMjBweCl9LmZvb3Rlci10cmFuc2x1Y2VudC1pb3MgaW9uLXRvb2xiYXJ7LS1vcGFjaXR5Oi44fX0uZm9vdGVyLWlvcy5pb24tbm8tYm9yZGVyIGlvbi10b29sYmFyOmZpcnN0LW9mLXR5cGV7LS1ib3JkZXItd2lkdGg6MH0uZm9vdGVyLWNvbGxhcHNlLWZhZGUgaW9uLXRvb2xiYXJ7LS1vcGFjaXR5LXNjYWxlOmluaGVyaXR9XCI7XG5cbmNvbnN0IGZvb3Rlck1kQ3NzID0gXCJpb24tZm9vdGVye2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtb3JkZXI6MTtvcmRlcjoxO3dpZHRoOjEwMCU7ei1pbmRleDoxMH1pb24tZm9vdGVyLmZvb3Rlci10b29sYmFyLXBhZGRpbmcgaW9uLXRvb2xiYXI6bGFzdC1vZi10eXBle3BhZGRpbmctYm90dG9tOnZhcigtLWlvbi1zYWZlLWFyZWEtYm90dG9tLCAwKX0uZm9vdGVyLW1key13ZWJraXQtYm94LXNoYWRvdzowIDJweCA0cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNHB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgMXB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpO2JveC1zaGFkb3c6MCAycHggNHB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDRweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDFweCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKX0uZm9vdGVyLW1kLmlvbi1uby1ib3JkZXJ7LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lfVwiO1xuXG5jb25zdCBGb290ZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMua2V5Ym9hcmRDdHJsID0gbnVsbDtcbiAgICB0aGlzLmNoZWNrQ29sbGFwc2libGVGb290ZXIgPSAoKSA9PiB7XG4gICAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICAgIGlmIChtb2RlICE9PSAnaW9zJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IGNvbGxhcHNlIH0gPSB0aGlzO1xuICAgICAgY29uc3QgaGFzRmFkZSA9IGNvbGxhcHNlID09PSAnZmFkZSc7XG4gICAgICB0aGlzLmRlc3Ryb3lDb2xsYXBzaWJsZUZvb3RlcigpO1xuICAgICAgaWYgKGhhc0ZhZGUpIHtcbiAgICAgICAgY29uc3QgcGFnZUVsID0gdGhpcy5lbC5jbG9zZXN0KCdpb24tYXBwLGlvbi1wYWdlLC5pb24tcGFnZSxwYWdlLWlubmVyJyk7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRFbCA9IHBhZ2VFbCA/IGZpbmRJb25Db250ZW50KHBhZ2VFbCkgOiBudWxsO1xuICAgICAgICBpZiAoIWNvbnRlbnRFbCkge1xuICAgICAgICAgIHByaW50SW9uQ29udGVudEVycm9yTXNnKHRoaXMuZWwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldHVwRmFkZUZvb3Rlcihjb250ZW50RWwpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5zZXR1cEZhZGVGb290ZXIgPSBhc3luYyAoY29udGVudEVsKSA9PiB7XG4gICAgICBjb25zdCBzY3JvbGxFbCA9ICh0aGlzLnNjcm9sbEVsID0gYXdhaXQgZ2V0U2Nyb2xsRWxlbWVudChjb250ZW50RWwpKTtcbiAgICAgIC8qKlxuICAgICAgICogSGFuZGxlIGZhZGluZyBvZiB0b29sYmFycyBvbiBzY3JvbGxcbiAgICAgICAqL1xuICAgICAgdGhpcy5jb250ZW50U2Nyb2xsQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICAgIGhhbmRsZUZvb3RlckZhZGUoc2Nyb2xsRWwsIHRoaXMuZWwpO1xuICAgICAgfTtcbiAgICAgIHNjcm9sbEVsLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrKTtcbiAgICAgIGhhbmRsZUZvb3RlckZhZGUoc2Nyb2xsRWwsIHRoaXMuZWwpO1xuICAgIH07XG4gICAgdGhpcy5rZXlib2FyZFZpc2libGUgPSBmYWxzZTtcbiAgICB0aGlzLmNvbGxhcHNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudHJhbnNsdWNlbnQgPSBmYWxzZTtcbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHRoaXMuY2hlY2tDb2xsYXBzaWJsZUZvb3RlcigpO1xuICB9XG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLmNoZWNrQ29sbGFwc2libGVGb290ZXIoKTtcbiAgfVxuICBhc3luYyBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmtleWJvYXJkQ3RybCA9IGF3YWl0IGNyZWF0ZUtleWJvYXJkQ29udHJvbGxlcihhc3luYyAoa2V5Ym9hcmRPcGVuLCB3YWl0Rm9yUmVzaXplKSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIElmIHRoZSBrZXlib2FyZCBpcyBoaWRpbmcsIHRoZW4gd2UgbmVlZCB0byB3YWl0XG4gICAgICAgKiBmb3IgdGhlIHdlYnZpZXcgdG8gcmVzaXplLiBPdGhlcndpc2UsIHRoZSBmb290ZXJcbiAgICAgICAqIHdpbGwgZmxpY2tlciBiZWZvcmUgdGhlIHdlYnZpZXcgcmVzaXplcy5cbiAgICAgICAqL1xuICAgICAgaWYgKGtleWJvYXJkT3BlbiA9PT0gZmFsc2UgJiYgd2FpdEZvclJlc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGF3YWl0IHdhaXRGb3JSZXNpemU7XG4gICAgICB9XG4gICAgICB0aGlzLmtleWJvYXJkVmlzaWJsZSA9IGtleWJvYXJkT3BlbjsgLy8gdHJpZ2dlciByZS1yZW5kZXIgYnkgdXBkYXRpbmcgc3RhdGVcbiAgICB9KTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5rZXlib2FyZEN0cmwpIHtcbiAgICAgIHRoaXMua2V5Ym9hcmRDdHJsLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveUNvbGxhcHNpYmxlRm9vdGVyKCkge1xuICAgIGlmICh0aGlzLnNjcm9sbEVsICYmIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrKSB7XG4gICAgICB0aGlzLnNjcm9sbEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrKTtcbiAgICAgIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0cmFuc2x1Y2VudCwgY29sbGFwc2UgfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgdGFicyA9IHRoaXMuZWwuY2xvc2VzdCgnaW9uLXRhYnMnKTtcbiAgICBjb25zdCB0YWJCYXIgPSB0YWJzID09PSBudWxsIHx8IHRhYnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRhYnMucXVlcnlTZWxlY3RvcignOnNjb3BlID4gaW9uLXRhYi1iYXInKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyByb2xlOiBcImNvbnRlbnRpbmZvXCIsIGNsYXNzOiB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgLy8gVXNlZCBpbnRlcm5hbGx5IGZvciBzdHlsaW5nXG4gICAgICAgIFtgZm9vdGVyLSR7bW9kZX1gXTogdHJ1ZSxcbiAgICAgICAgW2Bmb290ZXItdHJhbnNsdWNlbnRgXTogdHJhbnNsdWNlbnQsXG4gICAgICAgIFtgZm9vdGVyLXRyYW5zbHVjZW50LSR7bW9kZX1gXTogdHJhbnNsdWNlbnQsXG4gICAgICAgIFsnZm9vdGVyLXRvb2xiYXItcGFkZGluZyddOiAhdGhpcy5rZXlib2FyZFZpc2libGUgJiYgKCF0YWJCYXIgfHwgdGFiQmFyLnNsb3QgIT09ICdib3R0b20nKSxcbiAgICAgICAgW2Bmb290ZXItY29sbGFwc2UtJHtjb2xsYXBzZX1gXTogY29sbGFwc2UgIT09IHVuZGVmaW5lZCxcbiAgICAgIH0gfSwgbW9kZSA9PT0gJ2lvcycgJiYgdHJhbnNsdWNlbnQgJiYgaChcImRpdlwiLCB7IGNsYXNzOiBcImZvb3Rlci1iYWNrZ3JvdW5kXCIgfSksIGgoXCJzbG90XCIsIG51bGwpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbkZvb3Rlci5zdHlsZSA9IHtcbiAgaW9zOiBmb290ZXJJb3NDc3MsXG4gIG1kOiBmb290ZXJNZENzc1xufTtcblxuY29uc3QgVFJBTlNJVElPTiA9ICdhbGwgMC4ycyBlYXNlLWluLW91dCc7XG5jb25zdCBjbG9uZUVsZW1lbnQgPSAodGFnTmFtZSkgPT4ge1xuICBjb25zdCBnZXRDYWNoZWRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCR7dGFnTmFtZX0uaW9uLWNsb25lZC1lbGVtZW50YCk7XG4gIGlmIChnZXRDYWNoZWRFbCAhPT0gbnVsbCkge1xuICAgIHJldHVybiBnZXRDYWNoZWRFbDtcbiAgfVxuICBjb25zdCBjbG9uZWRFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGNsb25lZEVsLmNsYXNzTGlzdC5hZGQoJ2lvbi1jbG9uZWQtZWxlbWVudCcpO1xuICBjbG9uZWRFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnZGlzcGxheScsICdub25lJyk7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2xvbmVkRWwpO1xuICByZXR1cm4gY2xvbmVkRWw7XG59O1xuY29uc3QgY3JlYXRlSGVhZGVySW5kZXggPSAoaGVhZGVyRWwpID0+IHtcbiAgaWYgKCFoZWFkZXJFbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCB0b29sYmFycyA9IGhlYWRlckVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lvbi10b29sYmFyJyk7XG4gIHJldHVybiB7XG4gICAgZWw6IGhlYWRlckVsLFxuICAgIHRvb2xiYXJzOiBBcnJheS5mcm9tKHRvb2xiYXJzKS5tYXAoKHRvb2xiYXIpID0+IHtcbiAgICAgIGNvbnN0IGlvblRpdGxlRWwgPSB0b29sYmFyLnF1ZXJ5U2VsZWN0b3IoJ2lvbi10aXRsZScpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZWw6IHRvb2xiYXIsXG4gICAgICAgIGJhY2tncm91bmQ6IHRvb2xiYXIuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcudG9vbGJhci1iYWNrZ3JvdW5kJyksXG4gICAgICAgIGlvblRpdGxlRWwsXG4gICAgICAgIGlubmVyVGl0bGVFbDogaW9uVGl0bGVFbCA/IGlvblRpdGxlRWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcudG9vbGJhci10aXRsZScpIDogbnVsbCxcbiAgICAgICAgaW9uQnV0dG9uc0VsOiBBcnJheS5mcm9tKHRvb2xiYXIucXVlcnlTZWxlY3RvckFsbCgnaW9uLWJ1dHRvbnMnKSksXG4gICAgICB9O1xuICAgIH0pLFxuICB9O1xufTtcbmNvbnN0IGhhbmRsZUNvbnRlbnRTY3JvbGwgPSAoc2Nyb2xsRWwsIHNjcm9sbEhlYWRlckluZGV4LCBjb250ZW50RWwpID0+IHtcbiAgcmVhZFRhc2soKCkgPT4ge1xuICAgIGNvbnN0IHNjcm9sbFRvcCA9IHNjcm9sbEVsLnNjcm9sbFRvcDtcbiAgICBjb25zdCBzY2FsZSA9IGNsYW1wKDEsIDEgKyAtc2Nyb2xsVG9wIC8gNTAwLCAxLjEpO1xuICAgIC8vIE5hdGl2ZSByZWZyZXNoZXIgc2hvdWxkIG5vdCBjYXVzZSB0aXRsZXMgdG8gc2NhbGVcbiAgICBjb25zdCBuYXRpdmVSZWZyZXNoZXIgPSBjb250ZW50RWwucXVlcnlTZWxlY3RvcignaW9uLXJlZnJlc2hlci5yZWZyZXNoZXItbmF0aXZlJyk7XG4gICAgaWYgKG5hdGl2ZVJlZnJlc2hlciA9PT0gbnVsbCkge1xuICAgICAgd3JpdGVUYXNrKCgpID0+IHtcbiAgICAgICAgc2NhbGVMYXJnZVRpdGxlcyhzY3JvbGxIZWFkZXJJbmRleC50b29sYmFycywgc2NhbGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5jb25zdCBzZXRUb29sYmFyQmFja2dyb3VuZE9wYWNpdHkgPSAoaGVhZGVyRWwsIG9wYWNpdHkpID0+IHtcbiAgLyoqXG4gICAqIEZhZGluZyBpbiB0aGUgYmFja2Ryb3Agb3BhY2l0eVxuICAgKiBzaG91bGQgaGFwcGVuIGFmdGVyIHRoZSBsYXJnZSB0aXRsZVxuICAgKiBoYXMgY29sbGFwc2VkLCBzbyBpdCBpcyBoYW5kbGVkXG4gICAqIGJ5IGhhbmRsZUhlYWRlckZhZGUoKVxuICAgKi9cbiAgaWYgKGhlYWRlckVsLmNvbGxhcHNlID09PSAnZmFkZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG9wYWNpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgIGhlYWRlckVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCctLW9wYWNpdHktc2NhbGUnKTtcbiAgfVxuICBlbHNlIHtcbiAgICBoZWFkZXJFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1vcGFjaXR5LXNjYWxlJywgb3BhY2l0eS50b1N0cmluZygpKTtcbiAgfVxufTtcbmNvbnN0IGhhbmRsZVRvb2xiYXJCb3JkZXJJbnRlcnNlY3Rpb24gPSAoZXYsIG1haW5IZWFkZXJJbmRleCwgc2Nyb2xsVG9wKSA9PiB7XG4gIGlmICghZXZbMF0uaXNJbnRlcnNlY3RpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIFRoZXJlIGlzIGEgYnVnIGluIFNhZmFyaSB3aGVyZSBvdmVyZmxvdyBzY3JvbGxpbmcgb24gYSBub24tYm9keSBlbGVtZW50XG4gICAqIGRvZXMgbm90IGFsd2F5cyByZXNldCB0aGUgc2Nyb2xsVG9wIHBvc2l0aW9uIHRvIDAgd2hlbiBsZXR0aW5nIGdvLiBJdCB3aWxsXG4gICAqIHNldCB0byAxIG9uY2UgdGhlIHJ1YmJlciBiYW5kIGVmZmVjdCBoYXMgZW5kZWQuIFRoaXMgY2F1c2VzIHRoZSBiYWNrZ3JvdW5kIHRvXG4gICAqIGFwcGVhciBzbGlnaHRseSBvbiBjZXJ0YWluIGFwcCBzZXR1cHMuXG4gICAqXG4gICAqIEFkZGl0aW9uYWxseSwgd2UgY2hlY2sgaWYgdXNlciBpcyBydWJiZXIgYmFuZGluZyAoc2Nyb2xsaW5nIGlzIG5lZ2F0aXZlKVxuICAgKiBhcyB0aGlzIGNhbiBtZWFuIHRoZXkgYXJlIHVzaW5nIHB1bGwgdG8gcmVmcmVzaC4gT25jZSB0aGUgcmVmcmVzaGVyIHN0YXJ0cyxcbiAgICogdGhlIGNvbnRlbnQgaXMgdHJhbnNmb3JtZWQgd2hpY2ggY2FuIGNhdXNlIHRoZSBpbnRlcnNlY3Rpb24gb2JzZXJ2ZXIgdG8gZXJyb25lb3VzbHlcbiAgICogZmlyZSBoZXJlIGFzIHdlbGwuXG4gICAqL1xuICBjb25zdCBzY2FsZSA9IGV2WzBdLmludGVyc2VjdGlvblJhdGlvID4gMC45IHx8IHNjcm9sbFRvcCA8PSAwID8gMCA6ICgoMSAtIGV2WzBdLmludGVyc2VjdGlvblJhdGlvKSAqIDEwMCkgLyA3NTtcbiAgc2V0VG9vbGJhckJhY2tncm91bmRPcGFjaXR5KG1haW5IZWFkZXJJbmRleC5lbCwgc2NhbGUgPT09IDEgPyB1bmRlZmluZWQgOiBzY2FsZSk7XG59O1xuLyoqXG4gKiBJZiB0b29sYmFycyBhcmUgaW50ZXJzZWN0aW5nLCBoaWRlIHRoZSBzY3JvbGxhYmxlIHRvb2xiYXIgY29udGVudFxuICogYW5kIHNob3cgdGhlIHByaW1hcnkgdG9vbGJhciBjb250ZW50LiBJZiB0aGUgdG9vbGJhcnMgYXJlIG5vdCBpbnRlcnNlY3RpbmcsXG4gKiBoaWRlIHRoZSBwcmltYXJ5IHRvb2xiYXIgY29udGVudCBhbmQgc2hvdyB0aGUgc2Nyb2xsYWJsZSB0b29sYmFyIGNvbnRlbnRcbiAqL1xuY29uc3QgaGFuZGxlVG9vbGJhckludGVyc2VjdGlvbiA9IChldiwgLy8gVE9ETyhGVy0yODMyKTogdHlwZSAoSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeVtdIHRyaWdnZXJzIGVycm9ycyB3aGljaCBzaG91bGQgYmUgc29ydGVkKVxubWFpbkhlYWRlckluZGV4LCBzY3JvbGxIZWFkZXJJbmRleCwgc2Nyb2xsRWwpID0+IHtcbiAgd3JpdGVUYXNrKCgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBzY3JvbGxFbC5zY3JvbGxUb3A7XG4gICAgaGFuZGxlVG9vbGJhckJvcmRlckludGVyc2VjdGlvbihldiwgbWFpbkhlYWRlckluZGV4LCBzY3JvbGxUb3ApO1xuICAgIGNvbnN0IGV2ZW50ID0gZXZbMF07XG4gICAgY29uc3QgaW50ZXJzZWN0aW9uID0gZXZlbnQuaW50ZXJzZWN0aW9uUmVjdDtcbiAgICBjb25zdCBpbnRlcnNlY3Rpb25BcmVhID0gaW50ZXJzZWN0aW9uLndpZHRoICogaW50ZXJzZWN0aW9uLmhlaWdodDtcbiAgICBjb25zdCByb290QXJlYSA9IGV2ZW50LnJvb3RCb3VuZHMud2lkdGggKiBldmVudC5yb290Qm91bmRzLmhlaWdodDtcbiAgICBjb25zdCBpc1BhZ2VIaWRkZW4gPSBpbnRlcnNlY3Rpb25BcmVhID09PSAwICYmIHJvb3RBcmVhID09PSAwO1xuICAgIGNvbnN0IGxlZnREaWZmID0gTWF0aC5hYnMoaW50ZXJzZWN0aW9uLmxlZnQgLSBldmVudC5ib3VuZGluZ0NsaWVudFJlY3QubGVmdCk7XG4gICAgY29uc3QgcmlnaHREaWZmID0gTWF0aC5hYnMoaW50ZXJzZWN0aW9uLnJpZ2h0IC0gZXZlbnQuYm91bmRpbmdDbGllbnRSZWN0LnJpZ2h0KTtcbiAgICBjb25zdCBpc1BhZ2VUcmFuc2l0aW9uaW5nID0gaW50ZXJzZWN0aW9uQXJlYSA+IDAgJiYgKGxlZnREaWZmID49IDUgfHwgcmlnaHREaWZmID49IDUpO1xuICAgIGlmIChpc1BhZ2VIaWRkZW4gfHwgaXNQYWdlVHJhbnNpdGlvbmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXZlbnQuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgIHNldEhlYWRlckFjdGl2ZShtYWluSGVhZGVySW5kZXgsIGZhbHNlKTtcbiAgICAgIHNldEhlYWRlckFjdGl2ZShzY3JvbGxIZWFkZXJJbmRleCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGVyZSBpcyBhIGJ1ZyB3aXRoIEludGVyc2VjdGlvbk9ic2VydmVyIG9uIFNhZmFyaVxuICAgICAgICogd2hlcmUgYGV2ZW50LmlzSW50ZXJzZWN0aW5nID09PSBmYWxzZWAgd2hlbiBjYW5jZWxsaW5nXG4gICAgICAgKiBhIHN3aXBlIHRvIGdvIGJhY2sgZ2VzdHVyZS4gQ2hlY2tpbmcgdGhlIGludGVyc2VjdGlvblxuICAgICAgICogeCwgeSwgd2lkdGgsIGFuZCBoZWlnaHQgcHJvdmlkZXMgYSB3b3JrYXJvdW5kLiBUaGlzIGJ1Z1xuICAgICAgICogZG9lcyBub3QgaGFwcGVuIHdoZW4gdXNpbmcgU2FmYXJpICsgV2ViIEFuaW1hdGlvbnMsXG4gICAgICAgKiBvbmx5IFNhZmFyaSArIENTUyBBbmltYXRpb25zLlxuICAgICAgICovXG4gICAgICBjb25zdCBoYXNWYWxpZEludGVyc2VjdGlvbiA9IChpbnRlcnNlY3Rpb24ueCA9PT0gMCAmJiBpbnRlcnNlY3Rpb24ueSA9PT0gMCkgfHwgKGludGVyc2VjdGlvbi53aWR0aCAhPT0gMCAmJiBpbnRlcnNlY3Rpb24uaGVpZ2h0ICE9PSAwKTtcbiAgICAgIGlmIChoYXNWYWxpZEludGVyc2VjdGlvbiAmJiBzY3JvbGxUb3AgPiAwKSB7XG4gICAgICAgIHNldEhlYWRlckFjdGl2ZShtYWluSGVhZGVySW5kZXgpO1xuICAgICAgICBzZXRIZWFkZXJBY3RpdmUoc2Nyb2xsSGVhZGVySW5kZXgsIGZhbHNlKTtcbiAgICAgICAgc2V0VG9vbGJhckJhY2tncm91bmRPcGFjaXR5KG1haW5IZWFkZXJJbmRleC5lbCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5jb25zdCBzZXRIZWFkZXJBY3RpdmUgPSAoaGVhZGVySW5kZXgsIGFjdGl2ZSA9IHRydWUpID0+IHtcbiAgY29uc3QgaGVhZGVyRWwgPSBoZWFkZXJJbmRleC5lbDtcbiAgaWYgKGFjdGl2ZSkge1xuICAgIGhlYWRlckVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1jb2xsYXBzZS1jb25kZW5zZS1pbmFjdGl2ZScpO1xuICAgIGhlYWRlckVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgfVxuICBlbHNlIHtcbiAgICBoZWFkZXJFbC5jbGFzc0xpc3QuYWRkKCdoZWFkZXItY29sbGFwc2UtY29uZGVuc2UtaW5hY3RpdmUnKTtcbiAgICBoZWFkZXJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgfVxufTtcbmNvbnN0IHNjYWxlTGFyZ2VUaXRsZXMgPSAodG9vbGJhcnMgPSBbXSwgc2NhbGUgPSAxLCB0cmFuc2l0aW9uID0gZmFsc2UpID0+IHtcbiAgdG9vbGJhcnMuZm9yRWFjaCgodG9vbGJhcikgPT4ge1xuICAgIGNvbnN0IGlvblRpdGxlID0gdG9vbGJhci5pb25UaXRsZUVsO1xuICAgIGNvbnN0IHRpdGxlRGl2ID0gdG9vbGJhci5pbm5lclRpdGxlRWw7XG4gICAgaWYgKCFpb25UaXRsZSB8fCBpb25UaXRsZS5zaXplICE9PSAnbGFyZ2UnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRpdGxlRGl2LnN0eWxlLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uID8gVFJBTlNJVElPTiA6ICcnO1xuICAgIHRpdGxlRGl2LnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZTNkKCR7c2NhbGV9LCAke3NjYWxlfSwgMSlgO1xuICB9KTtcbn07XG5jb25zdCBoYW5kbGVIZWFkZXJGYWRlID0gKHNjcm9sbEVsLCBiYXNlRWwsIGNvbmRlbnNlSGVhZGVyKSA9PiB7XG4gIHJlYWRUYXNrKCgpID0+IHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBzY3JvbGxFbC5zY3JvbGxUb3A7XG4gICAgY29uc3QgYmFzZUVsSGVpZ2h0ID0gYmFzZUVsLmNsaWVudEhlaWdodDtcbiAgICBjb25zdCBmYWRlU3RhcnQgPSBjb25kZW5zZUhlYWRlciA/IGNvbmRlbnNlSGVhZGVyLmNsaWVudEhlaWdodCA6IDA7XG4gICAgLyoqXG4gICAgICogSWYgd2UgYXJlIHVzaW5nIGZhZGUgaGVhZGVyIHdpdGggYSBjb25kZW5zZVxuICAgICAqIGhlYWRlciwgdGhlbiB0aGUgdG9vbGJhciBiYWNrZ3JvdW5kcyBzaG91bGRcbiAgICAgKiBub3QgYmVnaW4gdG8gZmFkZSBpbiB1bnRpbCB0aGUgY29uZGVuc2VcbiAgICAgKiBoZWFkZXIgaGFzIGZ1bGx5IGNvbGxhcHNlZC5cbiAgICAgKlxuICAgICAqIEFkZGl0aW9uYWxseSwgdGhlIG1haW4gY29udGVudCBzaG91bGQgbm90XG4gICAgICogb3ZlcmZsb3cgb3V0IG9mIHRoZSBjb250YWluZXIgdW50aWwgdGhlXG4gICAgICogY29uZGVuc2UgaGVhZGVyIGhhcyBmdWxseSBjb2xsYXBzZWQuIFdoZW5cbiAgICAgKiB1c2luZyBqdXN0IHRoZSBjb25kZW5zZSBoZWFkZXIgdGhlIGNvbnRlbnRcbiAgICAgKiBzaG91bGQgb3ZlcmZsb3cgb3V0IG9mIHRoZSBjb250YWluZXIuXG4gICAgICovXG4gICAgaWYgKGNvbmRlbnNlSGVhZGVyICE9PSBudWxsICYmIHNjcm9sbFRvcCA8IGZhZGVTdGFydCkge1xuICAgICAgYmFzZUVsLnN0eWxlLnNldFByb3BlcnR5KCctLW9wYWNpdHktc2NhbGUnLCAnMCcpO1xuICAgICAgc2Nyb2xsRWwuc3R5bGUuc2V0UHJvcGVydHkoJ2NsaXAtcGF0aCcsIGBpbnNldCgke2Jhc2VFbEhlaWdodH1weCAwcHggMHB4IDBweClgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGlzdGFuY2VUb1N0YXJ0ID0gc2Nyb2xsVG9wIC0gZmFkZVN0YXJ0O1xuICAgIGNvbnN0IGZhZGVEdXJhdGlvbiA9IDEwO1xuICAgIGNvbnN0IHNjYWxlID0gY2xhbXAoMCwgZGlzdGFuY2VUb1N0YXJ0IC8gZmFkZUR1cmF0aW9uLCAxKTtcbiAgICB3cml0ZVRhc2soKCkgPT4ge1xuICAgICAgc2Nyb2xsRWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ2NsaXAtcGF0aCcpO1xuICAgICAgYmFzZUVsLnN0eWxlLnNldFByb3BlcnR5KCctLW9wYWNpdHktc2NhbGUnLCBzY2FsZS50b1N0cmluZygpKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBoZWFkZXJJb3NDc3MgPSBcImlvbi1oZWFkZXJ7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1vcmRlcjotMTtvcmRlcjotMTt3aWR0aDoxMDAlO3otaW5kZXg6MTB9aW9uLWhlYWRlciBpb24tdG9vbGJhcjpmaXJzdC1vZi10eXBle3BhZGRpbmctdG9wOnZhcigtLWlvbi1zYWZlLWFyZWEtdG9wLCAwKX0uaGVhZGVyLWlvcyBpb24tdG9vbGJhcjpsYXN0LW9mLXR5cGV7LS1ib3JkZXItd2lkdGg6MCAwIDAuNTVweH1Ac3VwcG9ydHMgKCgtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigwKSkgb3IgKGJhY2tkcm9wLWZpbHRlcjogYmx1cigwKSkpey5oZWFkZXItYmFja2dyb3VuZHtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpzYXR1cmF0ZSgxODAlKSBibHVyKDIwcHgpO2JhY2tkcm9wLWZpbHRlcjpzYXR1cmF0ZSgxODAlKSBibHVyKDIwcHgpfS5oZWFkZXItdHJhbnNsdWNlbnQtaW9zIGlvbi10b29sYmFyey0tb3BhY2l0eTouOH0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlLWluYWN0aXZlIC5oZWFkZXItYmFja2dyb3VuZHstd2Via2l0LWJhY2tkcm9wLWZpbHRlcjpibHVyKDIwcHgpO2JhY2tkcm9wLWZpbHRlcjpibHVyKDIwcHgpfX0uaGVhZGVyLWlvcy5pb24tbm8tYm9yZGVyIGlvbi10b29sYmFyOmxhc3Qtb2YtdHlwZXstLWJvcmRlci13aWR0aDowfS5oZWFkZXItY29sbGFwc2UtZmFkZSBpb24tdG9vbGJhcnstLW9wYWNpdHktc2NhbGU6aW5oZXJpdH0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNle3otaW5kZXg6OX0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlIGlvbi10b29sYmFye3Bvc2l0aW9uOi13ZWJraXQtc3RpY2t5O3Bvc2l0aW9uOnN0aWNreTt0b3A6MH0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlIGlvbi10b29sYmFyOmZpcnN0LW9mLXR5cGV7cGFkZGluZy10b3A6N3B4O3otaW5kZXg6MX0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlIGlvbi10b29sYmFyey0tYmFja2dyb3VuZDp2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZik7ei1pbmRleDowfS5oZWFkZXItY29sbGFwc2UtY29uZGVuc2UgaW9uLXRvb2xiYXI6bGFzdC1vZi10eXBley0tYm9yZGVyLXdpZHRoOjBweH0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlIGlvbi10b29sYmFyIGlvbi1zZWFyY2hiYXJ7aGVpZ2h0OjQ4cHg7cGFkZGluZy10b3A6MHB4O3BhZGRpbmctYm90dG9tOjEzcHh9LmhlYWRlci1jb2xsYXBzZS1tYWluey0tb3BhY2l0eS1zY2FsZToxfS5oZWFkZXItY29sbGFwc2UtbWFpbiBpb24tdG9vbGJhcnstLW9wYWNpdHktc2NhbGU6aW5oZXJpdH0uaGVhZGVyLWNvbGxhcHNlLW1haW4gaW9uLXRvb2xiYXIuaW4tdG9vbGJhciBpb24tdGl0bGUsLmhlYWRlci1jb2xsYXBzZS1tYWluIGlvbi10b29sYmFyLmluLXRvb2xiYXIgaW9uLWJ1dHRvbnN7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjJzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YWxsIDAuMnMgZWFzZS1pbi1vdXR9LmhlYWRlci1jb2xsYXBzZS1jb25kZW5zZS1pbmFjdGl2ZTpub3QoLmhlYWRlci1jb2xsYXBzZS1jb25kZW5zZSkgaW9uLXRvb2xiYXIuaW4tdG9vbGJhciBpb24tdGl0bGUsLmhlYWRlci1jb2xsYXBzZS1jb25kZW5zZS1pbmFjdGl2ZTpub3QoLmhlYWRlci1jb2xsYXBzZS1jb25kZW5zZSkgaW9uLXRvb2xiYXIuaW4tdG9vbGJhciBpb24tYnV0dG9ucy5idXR0b25zLWNvbGxhcHNle29wYWNpdHk6MDtwb2ludGVyLWV2ZW50czpub25lfS5oZWFkZXItY29sbGFwc2UtY29uZGVuc2UtaW5hY3RpdmUuaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlIGlvbi10b29sYmFyLmluLXRvb2xiYXIgaW9uLXRpdGxlLC5oZWFkZXItY29sbGFwc2UtY29uZGVuc2UtaW5hY3RpdmUuaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNlIGlvbi10b29sYmFyLmluLXRvb2xiYXIgaW9uLWJ1dHRvbnMuYnV0dG9ucy1jb2xsYXBzZXt2aXNpYmlsaXR5OmhpZGRlbn1cIjtcblxuY29uc3QgaGVhZGVyTWRDc3MgPSBcImlvbi1oZWFkZXJ7ZGlzcGxheTpibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1vcmRlcjotMTtvcmRlcjotMTt3aWR0aDoxMDAlO3otaW5kZXg6MTB9aW9uLWhlYWRlciBpb24tdG9vbGJhcjpmaXJzdC1vZi10eXBle3BhZGRpbmctdG9wOnZhcigtLWlvbi1zYWZlLWFyZWEtdG9wLCAwKX0uaGVhZGVyLW1key13ZWJraXQtYm94LXNoYWRvdzowIDJweCA0cHggLTFweCByZ2JhKDAsIDAsIDAsIDAuMiksIDAgNHB4IDVweCAwIHJnYmEoMCwgMCwgMCwgMC4xNCksIDAgMXB4IDEwcHggMCByZ2JhKDAsIDAsIDAsIDAuMTIpO2JveC1zaGFkb3c6MCAycHggNHB4IC0xcHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwIDRweCA1cHggMCByZ2JhKDAsIDAsIDAsIDAuMTQpLCAwIDFweCAxMHB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKX0uaGVhZGVyLWNvbGxhcHNlLWNvbmRlbnNle2Rpc3BsYXk6bm9uZX0uaGVhZGVyLW1kLmlvbi1uby1ib3JkZXJ7LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lfVwiO1xuXG5jb25zdCBIZWFkZXIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IHt9O1xuICAgIHRoaXMuc2V0dXBGYWRlSGVhZGVyID0gYXN5bmMgKGNvbnRlbnRFbCwgY29uZGVuc2VIZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IHNjcm9sbEVsID0gKHRoaXMuc2Nyb2xsRWwgPSBhd2FpdCBnZXRTY3JvbGxFbGVtZW50KGNvbnRlbnRFbCkpO1xuICAgICAgLyoqXG4gICAgICAgKiBIYW5kbGUgZmFkaW5nIG9mIHRvb2xiYXJzIG9uIHNjcm9sbFxuICAgICAgICovXG4gICAgICB0aGlzLmNvbnRlbnRTY3JvbGxDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgaGFuZGxlSGVhZGVyRmFkZSh0aGlzLnNjcm9sbEVsLCB0aGlzLmVsLCBjb25kZW5zZUhlYWRlcik7XG4gICAgICB9O1xuICAgICAgc2Nyb2xsRWwuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5jb250ZW50U2Nyb2xsQ2FsbGJhY2spO1xuICAgICAgaGFuZGxlSGVhZGVyRmFkZSh0aGlzLnNjcm9sbEVsLCB0aGlzLmVsLCBjb25kZW5zZUhlYWRlcik7XG4gICAgfTtcbiAgICB0aGlzLmNvbGxhcHNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudHJhbnNsdWNlbnQgPSBmYWxzZTtcbiAgfVxuICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSBpbmhlcml0QXJpYUF0dHJpYnV0ZXModGhpcy5lbCk7XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLmNoZWNrQ29sbGFwc2libGVIZWFkZXIoKTtcbiAgfVxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5jaGVja0NvbGxhcHNpYmxlSGVhZGVyKCk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5kZXN0cm95Q29sbGFwc2libGVIZWFkZXIoKTtcbiAgfVxuICBhc3luYyBjaGVja0NvbGxhcHNpYmxlSGVhZGVyKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGlmIChtb2RlICE9PSAnaW9zJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IGNvbGxhcHNlIH0gPSB0aGlzO1xuICAgIGNvbnN0IGhhc0NvbmRlbnNlID0gY29sbGFwc2UgPT09ICdjb25kZW5zZSc7XG4gICAgY29uc3QgaGFzRmFkZSA9IGNvbGxhcHNlID09PSAnZmFkZSc7XG4gICAgdGhpcy5kZXN0cm95Q29sbGFwc2libGVIZWFkZXIoKTtcbiAgICBpZiAoaGFzQ29uZGVuc2UpIHtcbiAgICAgIGNvbnN0IHBhZ2VFbCA9IHRoaXMuZWwuY2xvc2VzdCgnaW9uLWFwcCxpb24tcGFnZSwuaW9uLXBhZ2UscGFnZS1pbm5lcicpO1xuICAgICAgY29uc3QgY29udGVudEVsID0gcGFnZUVsID8gZmluZElvbkNvbnRlbnQocGFnZUVsKSA6IG51bGw7XG4gICAgICAvLyBDbG9uZWQgZWxlbWVudHMgYXJlIGFsd2F5cyBuZWVkZWQgaW4gaU9TIHRyYW5zaXRpb25cbiAgICAgIHdyaXRlVGFzaygoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gY2xvbmVFbGVtZW50KCdpb24tdGl0bGUnKTtcbiAgICAgICAgdGl0bGUuc2l6ZSA9ICdsYXJnZSc7XG4gICAgICAgIGNsb25lRWxlbWVudCgnaW9uLWJhY2stYnV0dG9uJyk7XG4gICAgICB9KTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0dXBDb25kZW5zZUhlYWRlcihjb250ZW50RWwsIHBhZ2VFbCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhhc0ZhZGUpIHtcbiAgICAgIGNvbnN0IHBhZ2VFbCA9IHRoaXMuZWwuY2xvc2VzdCgnaW9uLWFwcCxpb24tcGFnZSwuaW9uLXBhZ2UscGFnZS1pbm5lcicpO1xuICAgICAgY29uc3QgY29udGVudEVsID0gcGFnZUVsID8gZmluZElvbkNvbnRlbnQocGFnZUVsKSA6IG51bGw7XG4gICAgICBpZiAoIWNvbnRlbnRFbCkge1xuICAgICAgICBwcmludElvbkNvbnRlbnRFcnJvck1zZyh0aGlzLmVsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY29uZGVuc2VIZWFkZXIgPSBjb250ZW50RWwucXVlcnlTZWxlY3RvcignaW9uLWhlYWRlcltjb2xsYXBzZT1cImNvbmRlbnNlXCJdJyk7XG4gICAgICBhd2FpdCB0aGlzLnNldHVwRmFkZUhlYWRlcihjb250ZW50RWwsIGNvbmRlbnNlSGVhZGVyKTtcbiAgICB9XG4gIH1cbiAgZGVzdHJveUNvbGxhcHNpYmxlSGVhZGVyKCkge1xuICAgIGlmICh0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyKSB7XG4gICAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnNjcm9sbEVsICYmIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrKSB7XG4gICAgICB0aGlzLnNjcm9sbEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrKTtcbiAgICAgIHRoaXMuY29udGVudFNjcm9sbENhbGxiYWNrID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodGhpcy5jb2xsYXBzaWJsZU1haW5IZWFkZXIpIHtcbiAgICAgIHRoaXMuY29sbGFwc2libGVNYWluSGVhZGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hlYWRlci1jb2xsYXBzZS1tYWluJyk7XG4gICAgICB0aGlzLmNvbGxhcHNpYmxlTWFpbkhlYWRlciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgYXN5bmMgc2V0dXBDb25kZW5zZUhlYWRlcihjb250ZW50RWwsIHBhZ2VFbCkge1xuICAgIGlmICghY29udGVudEVsIHx8ICFwYWdlRWwpIHtcbiAgICAgIHByaW50SW9uQ29udGVudEVycm9yTXNnKHRoaXMuZWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIEludGVyc2VjdGlvbk9ic2VydmVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNjcm9sbEVsID0gYXdhaXQgZ2V0U2Nyb2xsRWxlbWVudChjb250ZW50RWwpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBwYWdlRWwucXVlcnlTZWxlY3RvckFsbCgnaW9uLWhlYWRlcicpO1xuICAgIHRoaXMuY29sbGFwc2libGVNYWluSGVhZGVyID0gQXJyYXkuZnJvbShoZWFkZXJzKS5maW5kKChoZWFkZXIpID0+IGhlYWRlci5jb2xsYXBzZSAhPT0gJ2NvbmRlbnNlJyk7XG4gICAgaWYgKCF0aGlzLmNvbGxhcHNpYmxlTWFpbkhlYWRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtYWluSGVhZGVySW5kZXggPSBjcmVhdGVIZWFkZXJJbmRleCh0aGlzLmNvbGxhcHNpYmxlTWFpbkhlYWRlcik7XG4gICAgY29uc3Qgc2Nyb2xsSGVhZGVySW5kZXggPSBjcmVhdGVIZWFkZXJJbmRleCh0aGlzLmVsKTtcbiAgICBpZiAoIW1haW5IZWFkZXJJbmRleCB8fCAhc2Nyb2xsSGVhZGVySW5kZXgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2V0SGVhZGVyQWN0aXZlKG1haW5IZWFkZXJJbmRleCwgZmFsc2UpO1xuICAgIHNldFRvb2xiYXJCYWNrZ3JvdW5kT3BhY2l0eShtYWluSGVhZGVySW5kZXguZWwsIDApO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBpbnRlcmFjdGlvbiBiZXR3ZWVuIHRvb2xiYXIgY29sbGFwc2UgYW5kXG4gICAgICogc2hvd2luZy9oaWRpbmcgY29udGVudCBpbiB0aGUgcHJpbWFyeSBpb24taGVhZGVyXG4gICAgICogYXMgd2VsbCBhcyBwcm9ncmVzc2l2ZWx5IHNob3dpbmcvaGlkaW5nIHRoZSBtYWluIGhlYWRlclxuICAgICAqIGJvcmRlciBhcyB0aGUgdG9wLW1vc3QgdG9vbGJhciBjb2xsYXBzZXMgb3IgZXhwYW5kcy5cbiAgICAgKi9cbiAgICBjb25zdCB0b29sYmFySW50ZXJzZWN0aW9uID0gKGV2KSA9PiB7XG4gICAgICBoYW5kbGVUb29sYmFySW50ZXJzZWN0aW9uKGV2LCBtYWluSGVhZGVySW5kZXgsIHNjcm9sbEhlYWRlckluZGV4LCB0aGlzLnNjcm9sbEVsKTtcbiAgICB9O1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIodG9vbGJhckludGVyc2VjdGlvbiwge1xuICAgICAgcm9vdDogY29udGVudEVsLFxuICAgICAgdGhyZXNob2xkOiBbMC4yNSwgMC4zLCAwLjQsIDAuNSwgMC42LCAwLjcsIDAuOCwgMC45LCAxXSxcbiAgICB9KTtcbiAgICB0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoc2Nyb2xsSGVhZGVySW5kZXgudG9vbGJhcnNbc2Nyb2xsSGVhZGVySW5kZXgudG9vbGJhcnMubGVuZ3RoIC0gMV0uZWwpO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBzY2FsaW5nIG9mIGxhcmdlIGlPUyB0aXRsZXMgYW5kXG4gICAgICogc2hvd2luZy9oaWRpbmcgYm9yZGVyIG9uIGxhc3QgdG9vbGJhclxuICAgICAqIGluIHByaW1hcnkgaGVhZGVyXG4gICAgICovXG4gICAgdGhpcy5jb250ZW50U2Nyb2xsQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICBoYW5kbGVDb250ZW50U2Nyb2xsKHRoaXMuc2Nyb2xsRWwsIHNjcm9sbEhlYWRlckluZGV4LCBjb250ZW50RWwpO1xuICAgIH07XG4gICAgdGhpcy5zY3JvbGxFbC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmNvbnRlbnRTY3JvbGxDYWxsYmFjayk7XG4gICAgd3JpdGVUYXNrKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmNvbGxhcHNpYmxlTWFpbkhlYWRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY29sbGFwc2libGVNYWluSGVhZGVyLmNsYXNzTGlzdC5hZGQoJ2hlYWRlci1jb2xsYXBzZS1tYWluJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdHJhbnNsdWNlbnQsIGluaGVyaXRlZEF0dHJpYnV0ZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgY29sbGFwc2UgPSB0aGlzLmNvbGxhcHNlIHx8ICdub25lJztcbiAgICAvLyBiYW5uZXIgcm9sZSBtdXN0IGJlIGF0IHRvcCBsZXZlbCwgc28gcmVtb3ZlIHJvbGUgaWYgaW5zaWRlIGEgbWVudVxuICAgIGNvbnN0IHJvbGVUeXBlID0gaG9zdENvbnRleHQoJ2lvbi1tZW51JywgdGhpcy5lbCkgPyAnbm9uZScgOiAnYmFubmVyJztcbiAgICByZXR1cm4gKGgoSG9zdCwgT2JqZWN0LmFzc2lnbih7IHJvbGU6IHJvbGVUeXBlLCBjbGFzczoge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgIC8vIFVzZWQgaW50ZXJuYWxseSBmb3Igc3R5bGluZ1xuICAgICAgICBbYGhlYWRlci0ke21vZGV9YF06IHRydWUsXG4gICAgICAgIFtgaGVhZGVyLXRyYW5zbHVjZW50YF06IHRoaXMudHJhbnNsdWNlbnQsXG4gICAgICAgIFtgaGVhZGVyLWNvbGxhcHNlLSR7Y29sbGFwc2V9YF06IHRydWUsXG4gICAgICAgIFtgaGVhZGVyLXRyYW5zbHVjZW50LSR7bW9kZX1gXTogdGhpcy50cmFuc2x1Y2VudCxcbiAgICAgIH0gfSwgaW5oZXJpdGVkQXR0cmlidXRlcyksIG1vZGUgPT09ICdpb3MnICYmIHRyYW5zbHVjZW50ICYmIGgoXCJkaXZcIiwgeyBjbGFzczogXCJoZWFkZXItYmFja2dyb3VuZFwiIH0pLCBoKFwic2xvdFwiLCBudWxsKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5IZWFkZXIuc3R5bGUgPSB7XG4gIGlvczogaGVhZGVySW9zQ3NzLFxuICBtZDogaGVhZGVyTWRDc3Ncbn07XG5cbmNvbnN0IHJvdXRlT3V0bGV0Q3NzID0gXCI6aG9zdHtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTtjb250YWluOmxheW91dCBzaXplIHN0eWxlO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjB9XCI7XG5cbmNvbnN0IFJvdXRlck91dGxldCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25OYXZXaWxsTG9hZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTmF2V2lsbExvYWRcIiwgNyk7XG4gICAgdGhpcy5pb25OYXZXaWxsQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZXaWxsQ2hhbmdlXCIsIDMpO1xuICAgIHRoaXMuaW9uTmF2RGlkQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZEaWRDaGFuZ2VcIiwgMyk7XG4gICAgdGhpcy5nZXN0dXJlT3JBbmltYXRpb25JblByb2dyZXNzID0gZmFsc2U7XG4gICAgdGhpcy5tb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICB0aGlzLmRlbGVnYXRlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYW5pbWF0ZWQgPSB0cnVlO1xuICAgIHRoaXMuYW5pbWF0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuc3dpcGVIYW5kbGVyID0gdW5kZWZpbmVkO1xuICB9XG4gIHN3aXBlSGFuZGxlckNoYW5nZWQoKSB7XG4gICAgaWYgKHRoaXMuZ2VzdHVyZSkge1xuICAgICAgdGhpcy5nZXN0dXJlLmVuYWJsZSh0aGlzLnN3aXBlSGFuZGxlciAhPT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29uc3Qgb25TdGFydCA9ICgpID0+IHtcbiAgICAgIHRoaXMuZ2VzdHVyZU9yQW5pbWF0aW9uSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICBpZiAodGhpcy5zd2lwZUhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5zd2lwZUhhbmRsZXIub25TdGFydCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5nZXN0dXJlID0gKGF3YWl0IGltcG9ydCgnLi9zd2lwZS1iYWNrLTFiYjY2ZWQyLmpzJykpLmNyZWF0ZVN3aXBlQmFja0dlc3R1cmUodGhpcy5lbCwgKCkgPT4gIXRoaXMuZ2VzdHVyZU9yQW5pbWF0aW9uSW5Qcm9ncmVzcyAmJiAhIXRoaXMuc3dpcGVIYW5kbGVyICYmIHRoaXMuc3dpcGVIYW5kbGVyLmNhblN0YXJ0KCksICgpID0+IG9uU3RhcnQoKSwgKHN0ZXApID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdGhpcy5hbmkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wcm9ncmVzc1N0ZXAoc3RlcCk7IH0sIChzaG91bGRDb21wbGV0ZSwgc3RlcCwgZHVyKSA9PiB7XG4gICAgICBpZiAodGhpcy5hbmkpIHtcbiAgICAgICAgdGhpcy5hbmkub25GaW5pc2goKCkgPT4ge1xuICAgICAgICAgIHRoaXMuZ2VzdHVyZU9yQW5pbWF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgIGlmICh0aGlzLnN3aXBlSGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5zd2lwZUhhbmRsZXIub25FbmQoc2hvdWxkQ29tcGxldGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgeyBvbmVUaW1lQ2FsbGJhY2s6IHRydWUgfSk7XG4gICAgICAgIC8vIEFjY291bnQgZm9yIHJvdW5kaW5nIGVycm9ycyBpbiBKU1xuICAgICAgICBsZXQgbmV3U3RlcFZhbHVlID0gc2hvdWxkQ29tcGxldGUgPyAtMC4wMDEgOiAwLjAwMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuaW1hdGlvbiB3aWxsIGJlIHJldmVyc2VkIGhlcmUsIHNvIG5lZWQgdG9cbiAgICAgICAgICogcmV2ZXJzZSB0aGUgZWFzaW5nIGN1cnZlIGFzIHdlbGxcbiAgICAgICAgICpcbiAgICAgICAgICogQWRkaXRpb25hbGx5LCB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoZSB0aW1lIHJlbGF0aXZlXG4gICAgICAgICAqIHRvIHRoZSBuZXcgZWFzaW5nIGN1cnZlLCBhcyBgc3RlcFZhbHVlYCBpcyBnb2luZyB0byBiZSBnaXZlblxuICAgICAgICAgKiBpbiB0ZXJtcyBvZiBhIGxpbmVhciBjdXJ2ZS5cbiAgICAgICAgICovXG4gICAgICAgIGlmICghc2hvdWxkQ29tcGxldGUpIHtcbiAgICAgICAgICB0aGlzLmFuaS5lYXNpbmcoJ2N1YmljLWJlemllcigxLCAwLCAwLjY4LCAwLjI4KScpO1xuICAgICAgICAgIG5ld1N0ZXBWYWx1ZSArPSBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbihbMCwgMF0sIFsxLCAwXSwgWzAuNjgsIDAuMjhdLCBbMSwgMV0sIHN0ZXApWzBdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIG5ld1N0ZXBWYWx1ZSArPSBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbihbMCwgMF0sIFswLjMyLCAwLjcyXSwgWzAsIDFdLCBbMSwgMV0sIHN0ZXApWzBdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5pLnByb2dyZXNzRW5kKHNob3VsZENvbXBsZXRlID8gMSA6IDAsIG5ld1N0ZXBWYWx1ZSwgZHVyKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmdlc3R1cmVPckFuaW1hdGlvbkluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnN3aXBlSGFuZGxlckNoYW5nZWQoKTtcbiAgfVxuICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICB0aGlzLmlvbk5hdldpbGxMb2FkLmVtaXQoKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICB0aGlzLmdlc3R1cmUuZGVzdHJveSgpO1xuICAgICAgdGhpcy5nZXN0dXJlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIGNvbW1pdChlbnRlcmluZ0VsLCBsZWF2aW5nRWwsIG9wdHMpIHtcbiAgICBjb25zdCB1bmxvY2sgPSBhd2FpdCB0aGlzLmxvY2soKTtcbiAgICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICBjaGFuZ2VkID0gYXdhaXQgdGhpcy50cmFuc2l0aW9uKGVudGVyaW5nRWwsIGxlYXZpbmdFbCwgb3B0cyk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgICB1bmxvY2soKTtcbiAgICByZXR1cm4gY2hhbmdlZDtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIHNldFJvdXRlSWQoaWQsIHBhcmFtcywgZGlyZWN0aW9uLCBhbmltYXRpb24pIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gYXdhaXQgdGhpcy5zZXRSb290KGlkLCBwYXJhbXMsIHtcbiAgICAgIGR1cmF0aW9uOiBkaXJlY3Rpb24gPT09ICdyb290JyA/IDAgOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvbiA9PT0gJ2JhY2snID8gJ2JhY2snIDogJ2ZvcndhcmQnLFxuICAgICAgYW5pbWF0aW9uQnVpbGRlcjogYW5pbWF0aW9uLFxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBjaGFuZ2VkLFxuICAgICAgZWxlbWVudDogdGhpcy5hY3RpdmVFbCxcbiAgICB9O1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgYXN5bmMgZ2V0Um91dGVJZCgpIHtcbiAgICBjb25zdCBhY3RpdmUgPSB0aGlzLmFjdGl2ZUVsO1xuICAgIHJldHVybiBhY3RpdmVcbiAgICAgID8ge1xuICAgICAgICBpZDogYWN0aXZlLnRhZ05hbWUsXG4gICAgICAgIGVsZW1lbnQ6IGFjdGl2ZSxcbiAgICAgICAgcGFyYW1zOiB0aGlzLmFjdGl2ZVBhcmFtcyxcbiAgICAgIH1cbiAgICAgIDogdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIHNldFJvb3QoY29tcG9uZW50LCBwYXJhbXMsIG9wdHMpIHtcbiAgICBpZiAodGhpcy5hY3RpdmVDb21wb25lbnQgPT09IGNvbXBvbmVudCAmJiBzaGFsbG93RXF1YWxTdHJpbmdNYXAocGFyYW1zLCB0aGlzLmFjdGl2ZVBhcmFtcykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gYXR0YWNoIGVudGVyaW5nIHZpZXcgdG8gRE9NXG4gICAgY29uc3QgbGVhdmluZ0VsID0gdGhpcy5hY3RpdmVFbDtcbiAgICBjb25zdCBlbnRlcmluZ0VsID0gYXdhaXQgYXR0YWNoQ29tcG9uZW50KHRoaXMuZGVsZWdhdGUsIHRoaXMuZWwsIGNvbXBvbmVudCwgWydpb24tcGFnZScsICdpb24tcGFnZS1pbnZpc2libGUnXSwgcGFyYW1zKTtcbiAgICB0aGlzLmFjdGl2ZUNvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICB0aGlzLmFjdGl2ZUVsID0gZW50ZXJpbmdFbDtcbiAgICB0aGlzLmFjdGl2ZVBhcmFtcyA9IHBhcmFtcztcbiAgICAvLyBjb21taXQgYW5pbWF0aW9uXG4gICAgYXdhaXQgdGhpcy5jb21taXQoZW50ZXJpbmdFbCwgbGVhdmluZ0VsLCBvcHRzKTtcbiAgICBhd2FpdCBkZXRhY2hDb21wb25lbnQodGhpcy5kZWxlZ2F0ZSwgbGVhdmluZ0VsKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyB0cmFuc2l0aW9uKGVudGVyaW5nRWwsIGxlYXZpbmdFbCwgb3B0cyA9IHt9KSB7XG4gICAgaWYgKGxlYXZpbmdFbCA9PT0gZW50ZXJpbmdFbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBlbWl0IG5hdiB3aWxsIGNoYW5nZSBldmVudFxuICAgIHRoaXMuaW9uTmF2V2lsbENoYW5nZS5lbWl0KCk7XG4gICAgY29uc3QgeyBlbCwgbW9kZSB9ID0gdGhpcztcbiAgICBjb25zdCBhbmltYXRlZCA9IHRoaXMuYW5pbWF0ZWQgJiYgY29uZmlnLmdldEJvb2xlYW4oJ2FuaW1hdGVkJywgdHJ1ZSk7XG4gICAgY29uc3QgYW5pbWF0aW9uQnVpbGRlciA9IG9wdHMuYW5pbWF0aW9uQnVpbGRlciB8fCB0aGlzLmFuaW1hdGlvbiB8fCBjb25maWcuZ2V0KCduYXZBbmltYXRpb24nKTtcbiAgICBhd2FpdCB0cmFuc2l0aW9uKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1vZGUsXG4gICAgICBhbmltYXRlZCxcbiAgICAgIGVudGVyaW5nRWwsXG4gICAgICBsZWF2aW5nRWwsIGJhc2VFbDogZWwsXG4gICAgICAvKipcbiAgICAgICAqIFdlIG5lZWQgdG8gd2FpdCBmb3IgYWxsIFN0ZW5jaWwgY29tcG9uZW50c1xuICAgICAgICogdG8gYmUgcmVhZHkgb25seSB3aGVuIHVzaW5nIHRoZSBsYXp5XG4gICAgICAgKiBsb2FkZWQgYnVuZGxlLlxuICAgICAgICovXG4gICAgICBkZWVwV2FpdDogaGFzTGF6eUJ1aWxkKGVsKSwgcHJvZ3Jlc3NDYWxsYmFjazogb3B0cy5wcm9ncmVzc0FuaW1hdGlvblxuICAgICAgICA/IChhbmkpID0+IHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBCZWNhdXNlIHRoaXMgcHJvZ3Jlc3MgY2FsbGJhY2sgaXMgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgICAgICogaXQgaXMgcG9zc2libGUgZm9yIHRoZSBnZXN0dXJlIHRvIHN0YXJ0IGFuZCBlbmQgYmVmb3JlXG4gICAgICAgICAgICogdGhlIGFuaW1hdGlvbiBpcyBldmVyIHNldC4gSW4gdGhhdCBzY2VuYXJpbywgd2Ugc2hvdWxkXG4gICAgICAgICAgICogaW1tZWRpYXRlbHkgY2FsbCBwcm9ncmVzc0VuZCBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIHByb21pc2VcbiAgICAgICAgICAgKiByZXNvbHZlcyBhbmQgdGhlIGdlc3R1cmUgZG9lcyBub3QgZ2V0IGxvY2tlZCB1cC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpZiAoYW5pICE9PSB1bmRlZmluZWQgJiYgIXRoaXMuZ2VzdHVyZU9yQW5pbWF0aW9uSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgdGhpcy5nZXN0dXJlT3JBbmltYXRpb25JblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGFuaS5vbkZpbmlzaCgoKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuZ2VzdHVyZU9yQW5pbWF0aW9uSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAodGhpcy5zd2lwZUhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXBlSGFuZGxlci5vbkVuZChmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHsgb25lVGltZUNhbGxiYWNrOiB0cnVlIH0pO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQbGF5aW5nIGFuaW1hdGlvbiB0byBiZWdpbm5pbmdcbiAgICAgICAgICAgICAqIHdpdGggYSBkdXJhdGlvbiBvZiAwIHByZXZlbnRzXG4gICAgICAgICAgICAgKiBhbnkgZmxpY2tlcmluZyB3aGVuIHRoZSBhbmltYXRpb25cbiAgICAgICAgICAgICAqIGlzIGxhdGVyIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFuaS5wcm9ncmVzc0VuZCgwLCAwLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFuaSA9IGFuaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgOiB1bmRlZmluZWQgfSwgb3B0cyksIHsgYW5pbWF0aW9uQnVpbGRlciB9KSk7XG4gICAgLy8gZW1pdCBuYXYgY2hhbmdlZCBldmVudFxuICAgIHRoaXMuaW9uTmF2RGlkQ2hhbmdlLmVtaXQoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBhc3luYyBsb2NrKCkge1xuICAgIGNvbnN0IHAgPSB0aGlzLndhaXRQcm9taXNlO1xuICAgIGxldCByZXNvbHZlO1xuICAgIHRoaXMud2FpdFByb21pc2UgPSBuZXcgUHJvbWlzZSgocikgPT4gKHJlc29sdmUgPSByKSk7XG4gICAgaWYgKHAgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXdhaXQgcDtcbiAgICB9XG4gICAgcmV0dXJuIHJlc29sdmU7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBoKFwic2xvdFwiLCBudWxsKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgXCJzd2lwZUhhbmRsZXJcIjogW1wic3dpcGVIYW5kbGVyQ2hhbmdlZFwiXVxuICB9OyB9XG59O1xuUm91dGVyT3V0bGV0LnN0eWxlID0gcm91dGVPdXRsZXRDc3M7XG5cbmNvbnN0IHRpdGxlSW9zQ3NzID0gXCI6aG9zdHstLWNvbG9yOmluaXRpYWw7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXg6MTtmbGV4OjE7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApO2NvbG9yOnZhcigtLWNvbG9yKX06aG9zdCguaW9uLWNvbG9yKXtjb2xvcjp2YXIoLS1pb24tY29sb3ItYmFzZSl9LnRvb2xiYXItdGl0bGV7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjtwb2ludGVyLWV2ZW50czphdXRvfTpob3N0KC50aXRsZS1zbWFsbCkgLnRvb2xiYXItdGl0bGV7d2hpdGUtc3BhY2U6bm9ybWFsfTpob3N0e3RvcDowOy13ZWJraXQtcGFkZGluZy1zdGFydDo5MHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjkwcHg7LXdlYmtpdC1wYWRkaW5nLWVuZDo5MHB4O3BhZGRpbmctaW5saW5lLWVuZDo5MHB4O3BhZGRpbmctdG9wOnZhcigtLXBhZGRpbmctdG9wKTtwYWRkaW5nLWJvdHRvbTp2YXIoLS1wYWRkaW5nLWJvdHRvbSk7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApO2ZvbnQtc2l6ZToxN3B4O2ZvbnQtd2VpZ2h0OjYwMDt0ZXh0LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9pbnRlci1ldmVudHM6bm9uZX1Ac3VwcG9ydHMgKGluc2V0LWlubGluZS1zdGFydDogMCl7Omhvc3R7aW5zZXQtaW5saW5lLXN0YXJ0OjB9fUBzdXBwb3J0cyBub3QgKGluc2V0LWlubGluZS1zdGFydDogMCl7Omhvc3R7bGVmdDowfTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKXtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjB9QHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSl7Omhvc3Q6ZGlyKHJ0bCl7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfX19Omhvc3QoLnRpdGxlLXNtYWxsKXstd2Via2l0LXBhZGRpbmctc3RhcnQ6OXB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjlweDstd2Via2l0LXBhZGRpbmctZW5kOjlweDtwYWRkaW5nLWlubGluZS1lbmQ6OXB4O3BhZGRpbmctdG9wOjZweDtwYWRkaW5nLWJvdHRvbToxNnB4O3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtc2l6ZToxM3B4O2ZvbnQtd2VpZ2h0Om5vcm1hbH06aG9zdCgudGl0bGUtbGFyZ2Upey13ZWJraXQtcGFkZGluZy1zdGFydDoxNnB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjE2cHg7LXdlYmtpdC1wYWRkaW5nLWVuZDoxNnB4O3BhZGRpbmctaW5saW5lLWVuZDoxNnB4O3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IGNlbnRlcjtib3R0b206MDstbXMtZmxleC1hbGlnbjplbmQ7YWxpZ24taXRlbXM6ZmxleC1lbmQ7bWluLXdpZHRoOjEwMCU7cGFkZGluZy1ib3R0b206NnB4O2ZvbnQtc2l6ZTozNHB4O2ZvbnQtd2VpZ2h0OjcwMDt0ZXh0LWFsaWduOnN0YXJ0fTpob3N0KC50aXRsZS1sYXJnZS50aXRsZS1ydGwpey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXI7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCBjZW50ZXJ9Omhvc3QoLnRpdGxlLWxhcmdlLmlvbi1jbG9uZWQtZWxlbWVudCl7LS1jb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCl9Omhvc3QoLnRpdGxlLWxhcmdlKSAudG9vbGJhci10aXRsZXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46aW5oZXJpdDt0cmFuc2Zvcm0tb3JpZ2luOmluaGVyaXR9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLnRpdGxlLWxhcmdlKSAudG9vbGJhci10aXRsZSw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkudGl0bGUtbGFyZ2UgLnRvb2xiYXItdGl0bGV7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNhbGMoMTAwJSAtIGluaGVyaXQpO3RyYW5zZm9ybS1vcmlnaW46Y2FsYygxMDAlIC0gaW5oZXJpdCl9QHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSl7Omhvc3QoLnRpdGxlLWxhcmdlKSAudG9vbGJhci10aXRsZTpkaXIocnRsKXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2FsYygxMDAlIC0gaW5oZXJpdCk7dHJhbnNmb3JtLW9yaWdpbjpjYWxjKDEwMCUgLSBpbmhlcml0KX19XCI7XG5cbmNvbnN0IHRpdGxlTWRDc3MgPSBcIjpob3N0ey0tY29sb3I6aW5pdGlhbDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleDoxO2ZsZXg6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7Y29sb3I6dmFyKC0tY29sb3IpfTpob3N0KC5pb24tY29sb3Ipe2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX0udG9vbGJhci10aXRsZXtkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMCU7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVuO3BvaW50ZXItZXZlbnRzOmF1dG99Omhvc3QoLnRpdGxlLXNtYWxsKSAudG9vbGJhci10aXRsZXt3aGl0ZS1zcGFjZTpub3JtYWx9Omhvc3R7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjIwcHg7cGFkZGluZy1pbmxpbmUtc3RhcnQ6MjBweDstd2Via2l0LXBhZGRpbmctZW5kOjIwcHg7cGFkZGluZy1pbmxpbmUtZW5kOjIwcHg7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO2ZvbnQtc2l6ZToyMHB4O2ZvbnQtd2VpZ2h0OjUwMDtsZXR0ZXItc3BhY2luZzowLjAxMjVlbX06aG9zdCgudGl0bGUtc21hbGwpe3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Zm9udC1zaXplOjE1cHg7Zm9udC13ZWlnaHQ6bm9ybWFsfVwiO1xuXG5jb25zdCBUb29sYmFyVGl0bGUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uU3R5bGUgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblN0eWxlXCIsIDcpO1xuICAgIHRoaXMuY29sb3IgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zaXplID0gdW5kZWZpbmVkO1xuICB9XG4gIHNpemVDaGFuZ2VkKCkge1xuICAgIHRoaXMuZW1pdFN0eWxlKCk7XG4gIH1cbiAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgfVxuICBlbWl0U3R5bGUoKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgIHRoaXMuaW9uU3R5bGUuZW1pdCh7XG4gICAgICBbYHRpdGxlLSR7c2l6ZX1gXTogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuICBnZXRTaXplKCkge1xuICAgIHJldHVybiB0aGlzLnNpemUgIT09IHVuZGVmaW5lZCA/IHRoaXMuc2l6ZSA6ICdkZWZhdWx0JztcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiBjcmVhdGVDb2xvckNsYXNzZXModGhpcy5jb2xvciwge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgIFtgdGl0bGUtJHtzaXplfWBdOiB0cnVlLFxuICAgICAgICAndGl0bGUtcnRsJzogZG9jdW1lbnQuZGlyID09PSAncnRsJyxcbiAgICAgIH0pIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJ0b29sYmFyLXRpdGxlXCIgfSwgaChcInNsb3RcIiwgbnVsbCkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwic2l6ZVwiOiBbXCJzaXplQ2hhbmdlZFwiXVxuICB9OyB9XG59O1xuVG9vbGJhclRpdGxlLnN0eWxlID0ge1xuICBpb3M6IHRpdGxlSW9zQ3NzLFxuICBtZDogdGl0bGVNZENzc1xufTtcblxuY29uc3QgdG9vbGJhcklvc0NzcyA9IFwiOmhvc3R7LS1ib3JkZXItd2lkdGg6MDstLWJvcmRlci1zdHlsZTpzb2xpZDstLW9wYWNpdHk6MTstLW9wYWNpdHktc2NhbGU6MTstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGU7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDstd2Via2l0LXBhZGRpbmctc3RhcnQ6dmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1pb24tc2FmZS1hcmVhLWxlZnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0taW9uLXNhZmUtYXJlYS1yaWdodCk7cGFkZGluZy1pbmxpbmUtZW5kOnZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtjb2xvcjp2YXIoLS1jb2xvcik7Zm9udC1mYW1pbHk6dmFyKC0taW9uLWZvbnQtZmFtaWx5LCBpbmhlcml0KTtjb250YWluOmNvbnRlbnQ7ei1pbmRleDoxMDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Omhvc3QoLmlvbi1jb2xvcil7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX06aG9zdCguaW9uLWNvbG9yKSAudG9vbGJhci1iYWNrZ3JvdW5ke2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfS50b29sYmFyLWNvbnRhaW5lcnstd2Via2l0LXBhZGRpbmctc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7LXdlYmtpdC1wYWRkaW5nLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy1pbmxpbmUtZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLXRvcDp2YXIoLS1wYWRkaW5nLXRvcCk7cGFkZGluZy1ib3R0b206dmFyKC0tcGFkZGluZy1ib3R0b20pO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3dpZHRoOjEwMCU7bWluLWhlaWdodDp2YXIoLS1taW4taGVpZ2h0KTtjb250YWluOmNvbnRlbnQ7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6MTA7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fS50b29sYmFyLWJhY2tncm91bmR7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7cG9zaXRpb246YWJzb2x1dGU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKTtib3JkZXItd2lkdGg6dmFyKC0tYm9yZGVyLXdpZHRoKTtib3JkZXItc3R5bGU6dmFyKC0tYm9yZGVyLXN0eWxlKTtib3JkZXItY29sb3I6dmFyKC0tYm9yZGVyLWNvbG9yKTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbnRhaW46c3RyaWN0O29wYWNpdHk6Y2FsYyh2YXIoLS1vcGFjaXR5KSAqIHZhcigtLW9wYWNpdHktc2NhbGUpKTt6LWluZGV4Oi0xO3BvaW50ZXItZXZlbnRzOm5vbmV9OjpzbG90dGVkKGlvbi1wcm9ncmVzcy1iYXIpe2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlfTpob3N0ey0tYmFja2dyb3VuZDp2YXIoLS1pb24tdG9vbGJhci1iYWNrZ3JvdW5kLCB2YXIoLS1pb24tY29sb3Itc3RlcC01MCwgI2Y3ZjdmNykpOy0tY29sb3I6dmFyKC0taW9uLXRvb2xiYXItY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKSk7LS1ib3JkZXItY29sb3I6dmFyKC0taW9uLXRvb2xiYXItYm9yZGVyLWNvbG9yLCB2YXIoLS1pb24tYm9yZGVyLWNvbG9yLCB2YXIoLS1pb24tY29sb3Itc3RlcC0xNTAsIHJnYmEoMCwgMCwgMCwgMC4yKSkpKTstLXBhZGRpbmctdG9wOjNweDstLXBhZGRpbmctYm90dG9tOjNweDstLXBhZGRpbmctc3RhcnQ6NHB4Oy0tcGFkZGluZy1lbmQ6NHB4Oy0tbWluLWhlaWdodDo0NHB4fS50b29sYmFyLWNvbnRlbnR7LW1zLWZsZXg6MTtmbGV4OjE7LW1zLWZsZXgtb3JkZXI6NDtvcmRlcjo0O21pbi13aWR0aDowfTpob3N0KC50b29sYmFyLXNlZ21lbnQpIC50b29sYmFyLWNvbnRlbnR7ZGlzcGxheTotbXMtaW5saW5lLWZsZXhib3g7ZGlzcGxheTppbmxpbmUtZmxleH06aG9zdCgudG9vbGJhci1zZWFyY2hiYXIpIC50b29sYmFyLWNvbnRhaW5lcntwYWRkaW5nLXRvcDowO3BhZGRpbmctYm90dG9tOjB9Omhvc3QoLnRvb2xiYXItc2VhcmNoYmFyKSA6OnNsb3R0ZWQoKil7LW1zLWZsZXgtaXRlbS1hbGlnbjpzdGFydDthbGlnbi1zZWxmOnN0YXJ0fTpob3N0KC50b29sYmFyLXNlYXJjaGJhcikgOjpzbG90dGVkKGlvbi1jaGlwKXttYXJnaW4tdG9wOjNweH06aG9zdCgudG9vbGJhci1zZWFyY2hiYXIpIDo6c2xvdHRlZChpb24tYmFjay1idXR0b24pe2hlaWdodDozOHB4fTo6c2xvdHRlZChpb24tYnV0dG9ucyl7bWluLWhlaWdodDozOHB4fTo6c2xvdHRlZChbc2xvdD1zdGFydF0pey1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6Mn06OnNsb3R0ZWQoW3Nsb3Q9c2Vjb25kYXJ5XSl7LW1zLWZsZXgtb3JkZXI6MztvcmRlcjozfTo6c2xvdHRlZChbc2xvdD1wcmltYXJ5XSl7LW1zLWZsZXgtb3JkZXI6NTtvcmRlcjo1O3RleHQtYWxpZ246ZW5kfTo6c2xvdHRlZChbc2xvdD1lbmRdKXstbXMtZmxleC1vcmRlcjo2O29yZGVyOjY7dGV4dC1hbGlnbjplbmR9Omhvc3QoLnRvb2xiYXItdGl0bGUtbGFyZ2UpIC50b29sYmFyLWNvbnRhaW5lcnstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXA7LW1zLWZsZXgtYWxpZ246c3RhcnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydH06aG9zdCgudG9vbGJhci10aXRsZS1sYXJnZSkgLnRvb2xiYXItY29udGVudCBpb24tdGl0bGV7LW1zLWZsZXg6MTtmbGV4OjE7LW1zLWZsZXgtb3JkZXI6ODtvcmRlcjo4O21pbi13aWR0aDoxMDAlfVwiO1xuXG5jb25zdCB0b29sYmFyTWRDc3MgPSBcIjpob3N0ey0tYm9yZGVyLXdpZHRoOjA7LS1ib3JkZXItc3R5bGU6c29saWQ7LS1vcGFjaXR5OjE7LS1vcGFjaXR5LXNjYWxlOjE7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLWlvbi1zYWZlLWFyZWEtbGVmdCk7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0taW9uLXNhZmUtYXJlYS1sZWZ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLWlvbi1zYWZlLWFyZWEtcmlnaHQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1pb24tc2FmZS1hcmVhLXJpZ2h0KTtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7Y29sb3I6dmFyKC0tY29sb3IpO2ZvbnQtZmFtaWx5OnZhcigtLWlvbi1mb250LWZhbWlseSwgaW5oZXJpdCk7Y29udGFpbjpjb250ZW50O3otaW5kZXg6MTA7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94fTpob3N0KC5pb24tY29sb3Ipe2NvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9Omhvc3QoLmlvbi1jb2xvcikgLnRvb2xiYXItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1iYXNlKX0udG9vbGJhci1jb250YWluZXJ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbjt3aWR0aDoxMDAlO21pbi1oZWlnaHQ6dmFyKC0tbWluLWhlaWdodCk7Y29udGFpbjpjb250ZW50O292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjEwOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0udG9vbGJhci1iYWNrZ3JvdW5ke2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7Ym9yZGVyLXdpZHRoOnZhcigtLWJvcmRlci13aWR0aCk7Ym9yZGVyLXN0eWxlOnZhcigtLWJvcmRlci1zdHlsZSk7Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvcik7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb250YWluOnN0cmljdDtvcGFjaXR5OmNhbGModmFyKC0tb3BhY2l0eSkgKiB2YXIoLS1vcGFjaXR5LXNjYWxlKSk7ei1pbmRleDotMTtwb2ludGVyLWV2ZW50czpub25lfTo6c2xvdHRlZChpb24tcHJvZ3Jlc3MtYmFyKXtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZX06aG9zdHstLWJhY2tncm91bmQ6dmFyKC0taW9uLXRvb2xiYXItYmFja2dyb3VuZCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKTstLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLWNvbG9yLCB2YXIoLS1pb24tdGV4dC1jb2xvciwgIzQyNDI0MikpOy0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCAjYzFjNGNkKSkpOy0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctYm90dG9tOjA7LS1wYWRkaW5nLXN0YXJ0OjA7LS1wYWRkaW5nLWVuZDowOy0tbWluLWhlaWdodDo1NnB4fS50b29sYmFyLWNvbnRlbnR7LW1zLWZsZXg6MTtmbGV4OjE7LW1zLWZsZXgtb3JkZXI6MztvcmRlcjozO21pbi13aWR0aDowO21heC13aWR0aDoxMDAlfTo6c2xvdHRlZCguYnV0dG9ucy1maXJzdC1zbG90KXstd2Via2l0LW1hcmdpbi1zdGFydDo0cHg7bWFyZ2luLWlubGluZS1zdGFydDo0cHh9OjpzbG90dGVkKC5idXR0b25zLWxhc3Qtc2xvdCl7LXdlYmtpdC1tYXJnaW4tZW5kOjRweDttYXJnaW4taW5saW5lLWVuZDo0cHh9OjpzbG90dGVkKFtzbG90PXN0YXJ0XSl7LW1zLWZsZXgtb3JkZXI6MjtvcmRlcjoyfTo6c2xvdHRlZChbc2xvdD1zZWNvbmRhcnldKXstbXMtZmxleC1vcmRlcjo0O29yZGVyOjR9OjpzbG90dGVkKFtzbG90PXByaW1hcnldKXstbXMtZmxleC1vcmRlcjo1O29yZGVyOjU7dGV4dC1hbGlnbjplbmR9OjpzbG90dGVkKFtzbG90PWVuZF0pey1tcy1mbGV4LW9yZGVyOjY7b3JkZXI6Njt0ZXh0LWFsaWduOmVuZH1cIjtcblxuY29uc3QgVG9vbGJhciA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5jaGlsZHJlblN0eWxlcyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmNvbG9yID0gdW5kZWZpbmVkO1xuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnaW9uLWJ1dHRvbnMnKSk7XG4gICAgY29uc3QgZmlyc3RCdXR0b25zID0gYnV0dG9ucy5maW5kKChidXR0b24pID0+IHtcbiAgICAgIHJldHVybiBidXR0b24uc2xvdCA9PT0gJ3N0YXJ0JztcbiAgICB9KTtcbiAgICBpZiAoZmlyc3RCdXR0b25zKSB7XG4gICAgICBmaXJzdEJ1dHRvbnMuY2xhc3NMaXN0LmFkZCgnYnV0dG9ucy1maXJzdC1zbG90Jyk7XG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbnNSZXZlcnNlZCA9IGJ1dHRvbnMucmV2ZXJzZSgpO1xuICAgIGNvbnN0IGxhc3RCdXR0b25zID0gYnV0dG9uc1JldmVyc2VkLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnNsb3QgPT09ICdlbmQnKSB8fFxuICAgICAgYnV0dG9uc1JldmVyc2VkLmZpbmQoKGJ1dHRvbikgPT4gYnV0dG9uLnNsb3QgPT09ICdwcmltYXJ5JykgfHxcbiAgICAgIGJ1dHRvbnNSZXZlcnNlZC5maW5kKChidXR0b24pID0+IGJ1dHRvbi5zbG90ID09PSAnc2Vjb25kYXJ5Jyk7XG4gICAgaWYgKGxhc3RCdXR0b25zKSB7XG4gICAgICBsYXN0QnV0dG9ucy5jbGFzc0xpc3QuYWRkKCdidXR0b25zLWxhc3Qtc2xvdCcpO1xuICAgIH1cbiAgfVxuICBjaGlsZHJlblN0eWxlKGV2KSB7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgY29uc3QgdGFnTmFtZSA9IGV2LnRhcmdldC50YWdOYW1lO1xuICAgIGNvbnN0IHVwZGF0ZWRTdHlsZXMgPSBldi5kZXRhaWw7XG4gICAgY29uc3QgbmV3U3R5bGVzID0ge307XG4gICAgY29uc3QgY2hpbGRTdHlsZXMgPSB0aGlzLmNoaWxkcmVuU3R5bGVzLmdldCh0YWdOYW1lKSB8fCB7fTtcbiAgICBsZXQgaGFzU3R5bGVDaGFuZ2UgPSBmYWxzZTtcbiAgICBPYmplY3Qua2V5cyh1cGRhdGVkU3R5bGVzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGNoaWxkS2V5ID0gYHRvb2xiYXItJHtrZXl9YDtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdXBkYXRlZFN0eWxlc1trZXldO1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjaGlsZFN0eWxlc1tjaGlsZEtleV0pIHtcbiAgICAgICAgaGFzU3R5bGVDaGFuZ2UgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKG5ld1ZhbHVlKSB7XG4gICAgICAgIG5ld1N0eWxlc1tjaGlsZEtleV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChoYXNTdHlsZUNoYW5nZSkge1xuICAgICAgdGhpcy5jaGlsZHJlblN0eWxlcy5zZXQodGFnTmFtZSwgbmV3U3R5bGVzKTtcbiAgICAgIGZvcmNlVXBkYXRlKHRoaXMpO1xuICAgIH1cbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgY2hpbGRTdHlsZXMgPSB7fTtcbiAgICB0aGlzLmNoaWxkcmVuU3R5bGVzLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICBPYmplY3QuYXNzaWduKGNoaWxkU3R5bGVzLCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgY2hpbGRTdHlsZXMpLCBjcmVhdGVDb2xvckNsYXNzZXModGhpcy5jb2xvciwge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICdpbi10b29sYmFyJzogaG9zdENvbnRleHQoJ2lvbi10b29sYmFyJywgdGhpcy5lbCksXG4gICAgICB9KSkgfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInRvb2xiYXItYmFja2dyb3VuZFwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidG9vbGJhci1jb250YWluZXJcIiB9LCBoKFwic2xvdFwiLCB7IG5hbWU6IFwic3RhcnRcIiB9KSwgaChcInNsb3RcIiwgeyBuYW1lOiBcInNlY29uZGFyeVwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidG9vbGJhci1jb250ZW50XCIgfSwgaChcInNsb3RcIiwgbnVsbCkpLCBoKFwic2xvdFwiLCB7IG5hbWU6IFwicHJpbWFyeVwiIH0pLCBoKFwic2xvdFwiLCB7IG5hbWU6IFwiZW5kXCIgfSkpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcblRvb2xiYXIuc3R5bGUgPSB7XG4gIGlvczogdG9vbGJhcklvc0NzcyxcbiAgbWQ6IHRvb2xiYXJNZENzc1xufTtcblxuZXhwb3J0IHsgQXBwIGFzIGlvbl9hcHAsIEJ1dHRvbnMgYXMgaW9uX2J1dHRvbnMsIENvbnRlbnQgYXMgaW9uX2NvbnRlbnQsIEZvb3RlciBhcyBpb25fZm9vdGVyLCBIZWFkZXIgYXMgaW9uX2hlYWRlciwgUm91dGVyT3V0bGV0IGFzIGlvbl9yb3V0ZXJfb3V0bGV0LCBUb29sYmFyVGl0bGUgYXMgaW9uX3RpdGxlLCBUb29sYmFyIGFzIGlvbl90b29sYmFyIH07XG4iLCIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuY29uc3QgaG9zdENvbnRleHQgPSAoc2VsZWN0b3IsIGVsKSA9PiB7XG4gIHJldHVybiBlbC5jbG9zZXN0KHNlbGVjdG9yKSAhPT0gbnVsbDtcbn07XG4vKipcbiAqIENyZWF0ZSB0aGUgbW9kZSBhbmQgY29sb3IgY2xhc3NlcyBmb3IgdGhlIGNvbXBvbmVudCBiYXNlZCBvbiB0aGUgY2xhc3NlcyBwYXNzZWQgaW5cbiAqL1xuY29uc3QgY3JlYXRlQ29sb3JDbGFzc2VzID0gKGNvbG9yLCBjc3NDbGFzc01hcCkgPT4ge1xuICByZXR1cm4gdHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJyAmJiBjb2xvci5sZW5ndGggPiAwXG4gICAgPyBPYmplY3QuYXNzaWduKHsgJ2lvbi1jb2xvcic6IHRydWUsIFtgaW9uLWNvbG9yLSR7Y29sb3J9YF06IHRydWUgfSwgY3NzQ2xhc3NNYXApIDogY3NzQ2xhc3NNYXA7XG59O1xuY29uc3QgZ2V0Q2xhc3NMaXN0ID0gKGNsYXNzZXMpID0+IHtcbiAgaWYgKGNsYXNzZXMgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gICAgcmV0dXJuIGFycmF5XG4gICAgICAuZmlsdGVyKChjKSA9PiBjICE9IG51bGwpXG4gICAgICAubWFwKChjKSA9PiBjLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoKGMpID0+IGMgIT09ICcnKTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuY29uc3QgZ2V0Q2xhc3NNYXAgPSAoY2xhc3NlcykgPT4ge1xuICBjb25zdCBtYXAgPSB7fTtcbiAgZ2V0Q2xhc3NMaXN0KGNsYXNzZXMpLmZvckVhY2goKGMpID0+IChtYXBbY10gPSB0cnVlKSk7XG4gIHJldHVybiBtYXA7XG59O1xuY29uc3QgU0NIRU1FID0gL15bYS16XVthLXowLTkrXFwtLl0qOi87XG5jb25zdCBvcGVuVVJMID0gYXN5bmMgKHVybCwgZXYsIGRpcmVjdGlvbiwgYW5pbWF0aW9uKSA9PiB7XG4gIGlmICh1cmwgIT0gbnVsbCAmJiB1cmxbMF0gIT09ICcjJyAmJiAhU0NIRU1FLnRlc3QodXJsKSkge1xuICAgIGNvbnN0IHJvdXRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yb3V0ZXInKTtcbiAgICBpZiAocm91dGVyKSB7XG4gICAgICBpZiAoZXYgIT0gbnVsbCkge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvdXRlci5wdXNoKHVybCwgZGlyZWN0aW9uLCBhbmltYXRpb24pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5leHBvcnQgeyBjcmVhdGVDb2xvckNsYXNzZXMgYXMgYywgZ2V0Q2xhc3NNYXAgYXMgZywgaG9zdENvbnRleHQgYXMgaCwgb3BlblVSTCBhcyBvIH07XG4iXSwibmFtZXMiOlsiciIsInJlZ2lzdGVySW5zdGFuY2UiLCJoIiwiSCIsIkhvc3QiLCJmIiwiZ2V0RWxlbWVudCIsImQiLCJjcmVhdGVFdmVudCIsImUiLCJyZWFkVGFzayIsImkiLCJmb3JjZVVwZGF0ZSIsInciLCJ3cml0ZVRhc2siLCJiIiwiZ2V0SW9uTW9kZSIsImMiLCJjb25maWciLCJhIiwiaXNQbGF0Zm9ybSIsImNvbXBvbmVudE9uUmVhZHkiLCJsIiwiY2xhbXAiLCJpbmhlcml0QXJpYUF0dHJpYnV0ZXMiLCJzIiwic2hhbGxvd0VxdWFsU3RyaW5nTWFwIiwibSIsImhhc0xhenlCdWlsZCIsImlzUlRMIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiaG9zdENvbnRleHQiLCJmaW5kSW9uQ29udGVudCIsInAiLCJwcmludElvbkNvbnRlbnRFcnJvck1zZyIsImciLCJnZXRTY3JvbGxFbGVtZW50IiwiY3JlYXRlS2V5Ym9hcmRDb250cm9sbGVyIiwiZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24iLCJhdHRhY2hDb21wb25lbnQiLCJkZXRhY2hDb21wb25lbnQiLCJ0IiwidHJhbnNpdGlvbiIsImFwcENzcyIsIkFwcCIsImNvbnN0cnVjdG9yIiwiaG9zdFJlZiIsImNvbXBvbmVudERpZExvYWQiLCJfdGhpcyIsInJJQyIsIl9hc3luY1RvR2VuZXJhdG9yIiwiaXNIeWJyaWQiLCJ3aW5kb3ciLCJnZXRCb29sZWFuIiwidGhlbiIsIm1vZHVsZSIsInN0YXJ0VGFwQ2xpY2siLCJzdGFydFN0YXR1c1RhcCIsIm5lZWRJbnB1dFNoaW1zIiwicGxhdGZvcm0iLCJzdGFydElucHV0U2hpbXMiLCJoYXJkd2FyZUJhY2tCdXR0b25Nb2R1bGUiLCJzdGFydEhhcmR3YXJlQmFja0J1dHRvbiIsImJsb2NrSGFyZHdhcmVCYWNrQnV0dG9uIiwic3RhcnRLZXlib2FyZEFzc2lzdCIsImZvY3VzVmlzaWJsZSIsInN0YXJ0Rm9jdXNWaXNpYmxlIiwic2V0Rm9jdXMiLCJlbGVtZW50cyIsIl90aGlzMiIsInJlbmRlciIsIm1vZGUiLCJjbGFzcyIsImVsIiwibmVlZHNTaGltc0lPUyIsImlzQW5kcm9pZE1vYmlsZVdlYiIsImNhbGxiYWNrIiwicmVxdWVzdElkbGVDYWxsYmFjayIsInNldFRpbWVvdXQiLCJzdHlsZSIsImJ1dHRvbnNJb3NDc3MiLCJidXR0b25zTWRDc3MiLCJCdXR0b25zIiwiY29sbGFwc2UiLCJpb3MiLCJtZCIsImNvbnRlbnRDc3MiLCJDb250ZW50IiwiaW9uU2Nyb2xsU3RhcnQiLCJpb25TY3JvbGwiLCJpb25TY3JvbGxFbmQiLCJ3YXRjaERvZyIsImlzU2Nyb2xsaW5nIiwibGFzdFNjcm9sbCIsInF1ZXVlZCIsImNUb3AiLCJjQm90dG9tIiwiaXNNYWluQ29udGVudCIsInJlc2l6ZVRpbWVvdXQiLCJkZXRhaWwiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwidHlwZSIsImV2ZW50IiwidW5kZWZpbmVkIiwic3RhcnRYIiwic3RhcnRZIiwic3RhcnRUaW1lIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImRlbHRhWCIsImRlbHRhWSIsImN1cnJlbnRUaW1lIiwiZGF0YSIsImNvbG9yIiwiZnVsbHNjcmVlbiIsImZvcmNlT3ZlcnNjcm9sbCIsInNjcm9sbFgiLCJzY3JvbGxZIiwic2Nyb2xsRXZlbnRzIiwiY29ubmVjdGVkQ2FsbGJhY2siLCJjbG9zZXN0IiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJvblNjcm9sbEVuZCIsIm9uQXBwTG9hZCIsInJlc2l6ZSIsIm9uUmVzaXplIiwiY2xlYXJUaW1lb3V0Iiwib2Zmc2V0UGFyZW50Iiwic2hvdWxkRm9yY2VPdmVyc2Nyb2xsIiwicmVhZERpbWVuc2lvbnMiLCJwYWdlIiwiZ2V0UGFnZUVsZW1lbnQiLCJ0b3AiLCJNYXRoIiwibWF4Iiwib2Zmc2V0VG9wIiwiYm90dG9tIiwib2Zmc2V0SGVpZ2h0IiwiZGlydHkiLCJvblNjcm9sbCIsImV2IiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsInNob3VsZFN0YXJ0Iiwib25TY3JvbGxTdGFydCIsInRzIiwidXBkYXRlU2Nyb2xsRGV0YWlsIiwic2Nyb2xsRWwiLCJlbWl0IiwiX3RoaXMzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJnZXRCYWNrZ3JvdW5kRWxlbWVudCIsIl90aGlzNCIsImJhY2tncm91bmRDb250ZW50RWwiLCJzY3JvbGxUb1RvcCIsImR1cmF0aW9uIiwic2Nyb2xsVG9Qb2ludCIsInNjcm9sbFRvQm90dG9tIiwiX3RoaXM1IiwieSIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbEJ5UG9pbnQiLCJ4IiwiX3RoaXM2IiwiX3RoaXM3IiwicHJvbWlzZSIsImZyb21ZIiwiZnJvbVgiLCJzdGVwIiwibGluZWFyVGltZSIsIm1pbiIsImVhc2VkVCIsInBvdyIsImZsb29yIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwicnRsIiwidHJhbnNpdGlvblNoYWRvdyIsIlRhZ1R5cGUiLCJvdmVyc2Nyb2xsIiwicmVmIiwiaWQiLCJwYXJ0IiwibmFtZSIsImdldFBhcmVudEVsZW1lbnQiLCJfYSIsInBhcmVudEVsZW1lbnQiLCJwYXJlbnROb2RlIiwiaG9zdCIsInRhYnMiLCJ0aW1lc3RhbXAiLCJwcmV2WCIsInByZXZZIiwicHJldlQiLCJ0aW1lRGVsdGEiLCJoYW5kbGVGb290ZXJGYWRlIiwiYmFzZUVsIiwibWF4U2Nyb2xsIiwiZmFkZUR1cmF0aW9uIiwiZmFkZVN0YXJ0IiwiZGlzdGFuY2VUb1N0YXJ0Iiwic2NhbGUiLCJzZXRQcm9wZXJ0eSIsInRvU3RyaW5nIiwiZm9vdGVySW9zQ3NzIiwiZm9vdGVyTWRDc3MiLCJGb290ZXIiLCJfdGhpczgiLCJrZXlib2FyZEN0cmwiLCJjaGVja0NvbGxhcHNpYmxlRm9vdGVyIiwiaGFzRmFkZSIsImRlc3Ryb3lDb2xsYXBzaWJsZUZvb3RlciIsInBhZ2VFbCIsImNvbnRlbnRFbCIsInNldHVwRmFkZUZvb3RlciIsIl9yZWYyIiwiY29udGVudFNjcm9sbENhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsIl94IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXlib2FyZFZpc2libGUiLCJ0cmFuc2x1Y2VudCIsImNvbXBvbmVudERpZFVwZGF0ZSIsIl90aGlzOSIsIl9yZWYzIiwia2V5Ym9hcmRPcGVuIiwid2FpdEZvclJlc2l6ZSIsIl94MiIsIl94MyIsImRlc3Ryb3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidGFiQmFyIiwicXVlcnlTZWxlY3RvciIsInJvbGUiLCJzbG90IiwiVFJBTlNJVElPTiIsImNsb25lRWxlbWVudCIsInRhZ05hbWUiLCJnZXRDYWNoZWRFbCIsImRvY3VtZW50IiwiY2xvbmVkRWwiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiY3JlYXRlSGVhZGVySW5kZXgiLCJoZWFkZXJFbCIsInRvb2xiYXJzIiwicXVlcnlTZWxlY3RvckFsbCIsIkFycmF5IiwiZnJvbSIsIm1hcCIsInRvb2xiYXIiLCJpb25UaXRsZUVsIiwiYmFja2dyb3VuZCIsInNoYWRvd1Jvb3QiLCJpbm5lclRpdGxlRWwiLCJpb25CdXR0b25zRWwiLCJoYW5kbGVDb250ZW50U2Nyb2xsIiwic2Nyb2xsSGVhZGVySW5kZXgiLCJuYXRpdmVSZWZyZXNoZXIiLCJzY2FsZUxhcmdlVGl0bGVzIiwic2V0VG9vbGJhckJhY2tncm91bmRPcGFjaXR5Iiwib3BhY2l0eSIsInJlbW92ZVByb3BlcnR5IiwiaGFuZGxlVG9vbGJhckJvcmRlckludGVyc2VjdGlvbiIsIm1haW5IZWFkZXJJbmRleCIsImlzSW50ZXJzZWN0aW5nIiwiaW50ZXJzZWN0aW9uUmF0aW8iLCJoYW5kbGVUb29sYmFySW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0aW9uUmVjdCIsImludGVyc2VjdGlvbkFyZWEiLCJ3aWR0aCIsImhlaWdodCIsInJvb3RBcmVhIiwicm9vdEJvdW5kcyIsImlzUGFnZUhpZGRlbiIsImxlZnREaWZmIiwiYWJzIiwibGVmdCIsImJvdW5kaW5nQ2xpZW50UmVjdCIsInJpZ2h0RGlmZiIsInJpZ2h0IiwiaXNQYWdlVHJhbnNpdGlvbmluZyIsInNldEhlYWRlckFjdGl2ZSIsImhhc1ZhbGlkSW50ZXJzZWN0aW9uIiwiaGVhZGVySW5kZXgiLCJhY3RpdmUiLCJyZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJmb3JFYWNoIiwiaW9uVGl0bGUiLCJ0aXRsZURpdiIsInNpemUiLCJ0cmFuc2Zvcm0iLCJoYW5kbGVIZWFkZXJGYWRlIiwiY29uZGVuc2VIZWFkZXIiLCJiYXNlRWxIZWlnaHQiLCJoZWFkZXJJb3NDc3MiLCJoZWFkZXJNZENzcyIsIkhlYWRlciIsIl90aGlzMTAiLCJpbmhlcml0ZWRBdHRyaWJ1dGVzIiwic2V0dXBGYWRlSGVhZGVyIiwiX3JlZjQiLCJfeDQiLCJfeDUiLCJjb21wb25lbnRXaWxsTG9hZCIsImNoZWNrQ29sbGFwc2libGVIZWFkZXIiLCJkZXN0cm95Q29sbGFwc2libGVIZWFkZXIiLCJfdGhpczExIiwiaGFzQ29uZGVuc2UiLCJ0aXRsZSIsInNldHVwQ29uZGVuc2VIZWFkZXIiLCJpbnRlcnNlY3Rpb25PYnNlcnZlciIsImRpc2Nvbm5lY3QiLCJjb2xsYXBzaWJsZU1haW5IZWFkZXIiLCJfdGhpczEyIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJoZWFkZXJzIiwiZmluZCIsImhlYWRlciIsInRvb2xiYXJJbnRlcnNlY3Rpb24iLCJyb290IiwidGhyZXNob2xkIiwib2JzZXJ2ZSIsImxlbmd0aCIsInJvbGVUeXBlIiwiT2JqZWN0IiwiYXNzaWduIiwicm91dGVPdXRsZXRDc3MiLCJSb3V0ZXJPdXRsZXQiLCJpb25OYXZXaWxsTG9hZCIsImlvbk5hdldpbGxDaGFuZ2UiLCJpb25OYXZEaWRDaGFuZ2UiLCJnZXN0dXJlT3JBbmltYXRpb25JblByb2dyZXNzIiwiZGVsZWdhdGUiLCJhbmltYXRlZCIsImFuaW1hdGlvbiIsInN3aXBlSGFuZGxlciIsInN3aXBlSGFuZGxlckNoYW5nZWQiLCJnZXN0dXJlIiwiZW5hYmxlIiwiX3RoaXMxMyIsIm9uU3RhcnQiLCJjcmVhdGVTd2lwZUJhY2tHZXN0dXJlIiwiY2FuU3RhcnQiLCJhbmkiLCJwcm9ncmVzc1N0ZXAiLCJzaG91bGRDb21wbGV0ZSIsImR1ciIsIm9uRmluaXNoIiwib25FbmQiLCJvbmVUaW1lQ2FsbGJhY2siLCJuZXdTdGVwVmFsdWUiLCJlYXNpbmciLCJwcm9ncmVzc0VuZCIsImNvbW1pdCIsImVudGVyaW5nRWwiLCJsZWF2aW5nRWwiLCJvcHRzIiwiX3RoaXMxNCIsInVubG9jayIsImxvY2siLCJjaGFuZ2VkIiwiY29uc29sZSIsImVycm9yIiwic2V0Um91dGVJZCIsInBhcmFtcyIsImRpcmVjdGlvbiIsIl90aGlzMTUiLCJzZXRSb290IiwiYW5pbWF0aW9uQnVpbGRlciIsImVsZW1lbnQiLCJhY3RpdmVFbCIsImdldFJvdXRlSWQiLCJfdGhpczE2IiwiYWN0aXZlUGFyYW1zIiwiY29tcG9uZW50IiwiX3RoaXMxNyIsImFjdGl2ZUNvbXBvbmVudCIsIl90aGlzMTgiLCJnZXQiLCJkZWVwV2FpdCIsInByb2dyZXNzQ2FsbGJhY2siLCJwcm9ncmVzc0FuaW1hdGlvbiIsIl90aGlzMTkiLCJ3YWl0UHJvbWlzZSIsIndhdGNoZXJzIiwidGl0bGVJb3NDc3MiLCJ0aXRsZU1kQ3NzIiwiVG9vbGJhclRpdGxlIiwiaW9uU3R5bGUiLCJzaXplQ2hhbmdlZCIsImVtaXRTdHlsZSIsImdldFNpemUiLCJkaXIiLCJ0b29sYmFySW9zQ3NzIiwidG9vbGJhck1kQ3NzIiwiVG9vbGJhciIsImNoaWxkcmVuU3R5bGVzIiwiTWFwIiwiYnV0dG9ucyIsImZpcnN0QnV0dG9ucyIsImJ1dHRvbiIsImJ1dHRvbnNSZXZlcnNlZCIsInJldmVyc2UiLCJsYXN0QnV0dG9ucyIsImNoaWxkcmVuU3R5bGUiLCJzdG9wUHJvcGFnYXRpb24iLCJ0YXJnZXQiLCJ1cGRhdGVkU3R5bGVzIiwibmV3U3R5bGVzIiwiY2hpbGRTdHlsZXMiLCJoYXNTdHlsZUNoYW5nZSIsImtleXMiLCJrZXkiLCJjaGlsZEtleSIsIm5ld1ZhbHVlIiwic2V0IiwidmFsdWUiLCJpb25fYXBwIiwiaW9uX2J1dHRvbnMiLCJpb25fY29udGVudCIsImlvbl9mb290ZXIiLCJpb25faGVhZGVyIiwiaW9uX3JvdXRlcl9vdXRsZXQiLCJpb25fdGl0bGUiLCJpb25fdG9vbGJhciIsInNlbGVjdG9yIiwiY3NzQ2xhc3NNYXAiLCJnZXRDbGFzc0xpc3QiLCJjbGFzc2VzIiwiYXJyYXkiLCJpc0FycmF5Iiwic3BsaXQiLCJmaWx0ZXIiLCJ0cmltIiwiZ2V0Q2xhc3NNYXAiLCJTQ0hFTUUiLCJvcGVuVVJMIiwiX3JlZiIsInVybCIsInRlc3QiLCJyb3V0ZXIiLCJwcmV2ZW50RGVmYXVsdCIsInB1c2giLCJvIl0sInNvdXJjZVJvb3QiOiJ3ZWJwYWNrOi8vLyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDFdfQ==