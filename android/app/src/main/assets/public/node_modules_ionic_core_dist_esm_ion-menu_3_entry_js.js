"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-menu_3_entry_js"],{

/***/ 495:
/*!***************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-menu_3.entry.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_menu": () => (/* binding */ Menu),
/* harmony export */   "ion_menu_button": () => (/* binding */ MenuButton),
/* harmony export */   "ion_menu_toggle": () => (/* binding */ MenuToggle)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-be218d70.js */ 9866);
/* harmony import */ var _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-3b28a225.js */ 3053);
/* harmony import */ var _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cubic-bezier-e78d1307.js */ 1463);
/* harmony import */ var _gesture_controller_17060b7c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./gesture-controller-17060b7c.js */ 6379);
/* harmony import */ var _helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers-5eb6364d.js */ 9364);
/* harmony import */ var _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./index-34890215.js */ 5072);
/* harmony import */ var _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./overlays-166b34ae.js */ 4477);
/* harmony import */ var _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-393bc14a.js */ 8697);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./theme-7670341c.js */ 320);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 159);
/* harmony import */ var _animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./animation-9a890cad.js */ 9989);
/* harmony import */ var _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index-33ffec25.js */ 2286);
/* harmony import */ var _framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./framework-delegate-28f7ea29.js */ 6425);
/* harmony import */ var _index_e86f0117_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index-e86f0117.js */ 7584);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */














const menuIosCss = ":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color, #fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{top:0;bottom:0;-webkit-transform:translateX(-9999px);transform:translateX(-9999px);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}@supports (inset-inline-start: 0){.menu-inner{inset-inline-start:0;inset-inline-end:auto}}@supports not (inset-inline-start: 0){.menu-inner{left:0;right:auto}[dir=rtl] .menu-inner,:host-context([dir=rtl]) .menu-inner{left:unset;right:unset;left:auto;right:0}}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto;}ion-backdrop{display:none;opacity:0.01;z-index:-1}@media (max-width: 340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible){width:var(--width);min-width:var(--min-width);max-width:var(--max-width)}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none !important;transform:none !important;-webkit-box-shadow:none !important;box-shadow:none !important}:host(.menu-pane-visible) ion-backdrop{display:hidden !important;}:host(.menu-type-push){z-index:1000}:host(.menu-type-push) .show-backdrop{display:block}";
const menuMdCss = ":host{--width:304px;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--background:var(--ion-background-color, #fff);left:0;right:0;top:0;bottom:0;display:none;position:absolute;contain:strict}:host(.show-menu){display:block}.menu-inner{top:0;bottom:0;-webkit-transform:translateX(-9999px);transform:translateX(-9999px);display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:justify;justify-content:space-between;width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);background:var(--background);contain:strict}@supports (inset-inline-start: 0){.menu-inner{inset-inline-start:0;inset-inline-end:auto}}@supports not (inset-inline-start: 0){.menu-inner{left:0;right:auto}[dir=rtl] .menu-inner,:host-context([dir=rtl]) .menu-inner{left:unset;right:unset;left:auto;right:0}}:host(.menu-side-start) .menu-inner{--ion-safe-area-right:0px;right:auto;left:0}:host(.menu-side-end) .menu-inner{--ion-safe-area-left:0px;right:0;left:auto;}ion-backdrop{display:none;opacity:0.01;z-index:-1}@media (max-width: 340px){.menu-inner{--width:264px}}:host(.menu-type-reveal){z-index:0}:host(.menu-type-reveal.show-menu) .menu-inner{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}:host(.menu-type-overlay){z-index:1000}:host(.menu-type-overlay) .show-backdrop{display:block;cursor:pointer}:host(.menu-pane-visible){width:var(--width);min-width:var(--min-width);max-width:var(--max-width)}:host(.menu-pane-visible) .menu-inner{left:0;right:0;width:auto;-webkit-transform:none !important;transform:none !important;-webkit-box-shadow:none !important;box-shadow:none !important}:host(.menu-pane-visible) ion-backdrop{display:hidden !important;}:host(.menu-type-overlay) .menu-inner{-webkit-box-shadow:4px 0px 16px rgba(0, 0, 0, 0.18);box-shadow:4px 0px 16px rgba(0, 0, 0, 0.18)}";
const iosEasing = 'cubic-bezier(0.32,0.72,0,1)';
const mdEasing = 'cubic-bezier(0.0,0.0,0.2,1)';
const iosEasingReverse = 'cubic-bezier(1, 0, 0.68, 0.28)';
const mdEasingReverse = 'cubic-bezier(0.4, 0, 0.6, 1)';
const focusableQueryString = '[tabindex]:not([tabindex^="-"]), input:not([type=hidden]):not([tabindex^="-"]), textarea:not([tabindex^="-"]), button:not([tabindex^="-"]), select:not([tabindex^="-"]), .ion-focusable:not([tabindex^="-"])';
const Menu = class {
  constructor(hostRef) {
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionWillOpen = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionWillOpen", 7);
    this.ionWillClose = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionWillClose", 7);
    this.ionDidOpen = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionDidOpen", 7);
    this.ionDidClose = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionDidClose", 7);
    this.ionMenuChange = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionMenuChange", 7);
    this.lastOnEnd = 0;
    this.blocker = _gesture_controller_17060b7c_js__WEBPACK_IMPORTED_MODULE_4__.G.createBlocker({
      disableScroll: true
    });
    this.isAnimating = false;
    this._isOpen = false;
    this.inheritedAttributes = {};
    this.handleFocus = ev => {
      /**
       * Overlays have their own focus trapping listener
       * so we do not want the two listeners to conflict
       * with each other. If the top-most overlay that is
       * open does not contain this ion-menu, then ion-menu's
       * focus trapping should not run.
       */
      const lastOverlay = (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_7__.o)(document);
      if (lastOverlay && !lastOverlay.contains(this.el)) {
        return;
      }
      this.trapKeyboardFocus(ev, document);
    };
    this.isPaneVisible = false;
    this.isEndSide = false;
    this.contentId = undefined;
    this.menuId = undefined;
    this.type = undefined;
    this.disabled = false;
    this.side = 'start';
    this.swipeGesture = true;
    this.maxEdgeStart = 50;
  }
  typeChanged(type, oldType) {
    const contentEl = this.contentEl;
    if (contentEl) {
      if (oldType !== undefined) {
        contentEl.classList.remove(`menu-content-${oldType}`);
      }
      contentEl.classList.add(`menu-content-${type}`);
      contentEl.removeAttribute('style');
    }
    if (this.menuInnerEl) {
      // Remove effects of previous animations
      this.menuInnerEl.removeAttribute('style');
    }
    this.animation = undefined;
  }
  disabledChanged() {
    this.updateState();
    this.ionMenuChange.emit({
      disabled: this.disabled,
      open: this._isOpen
    });
  }
  sideChanged() {
    this.isEndSide = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.q)(this.side);
  }
  swipeGestureChanged() {
    this.updateState();
  }
  connectedCallback() {
    var _this = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // TODO: connectedCallback is fired in CE build
      // before WC is defined. This needs to be fixed in Stencil.
      if (typeof customElements !== 'undefined' && customElements != null) {
        yield customElements.whenDefined('ion-menu');
      }
      if (_this.type === undefined) {
        _this.type = _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.c.get('menuType', 'overlay');
      }
      const content = _this.contentId !== undefined ? document.getElementById(_this.contentId) : null;
      if (content === null) {
        console.error('Menu: must have a "content" element to listen for drag events on.');
        return;
      }
      if (_this.el.contains(content)) {
        console.error(`Menu: "contentId" should refer to the main view's ion-content, not the ion-content inside of the ion-menu.`);
      }
      _this.contentEl = content;
      // add menu's content classes
      content.classList.add('menu-content');
      _this.typeChanged(_this.type, undefined);
      _this.sideChanged();
      // register this menu with the app's menu controller
      _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m._register(_this);
      _this.gesture = (yield Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./index-422b6e83.js */ 8759))).createGesture({
        el: document,
        gestureName: 'menu-swipe',
        gesturePriority: 30,
        threshold: 10,
        blurOnStart: true,
        canStart: ev => _this.canStart(ev),
        onWillStart: () => _this.onWillStart(),
        onStart: () => _this.onStart(),
        onMove: ev => _this.onMove(ev),
        onEnd: ev => _this.onEnd(ev)
      });
      _this.updateState();
    })();
  }
  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.el);
  }
  componentDidLoad() {
    var _this2 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this2.ionMenuChange.emit({
        disabled: _this2.disabled,
        open: _this2._isOpen
      });
      _this2.updateState();
    })();
  }
  disconnectedCallback() {
    this.blocker.destroy();
    _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m._unregister(this);
    if (this.animation) {
      this.animation.destroy();
    }
    if (this.gesture) {
      this.gesture.destroy();
      this.gesture = undefined;
    }
    this.animation = undefined;
    this.contentEl = this.backdropEl = this.menuInnerEl = undefined;
  }
  onSplitPaneChanged(ev) {
    this.isPaneVisible = ev.detail.isPane(this.el);
    this.updateState();
  }
  onBackdropClick(ev) {
    // TODO(FW-2832): type (CustomEvent triggers errors which should be sorted)
    if (this._isOpen && this.lastOnEnd < ev.timeStamp - 100) {
      const shouldClose = ev.composedPath ? !ev.composedPath().includes(this.menuInnerEl) : false;
      if (shouldClose) {
        ev.preventDefault();
        ev.stopPropagation();
        this.close();
      }
    }
  }
  onKeydown(ev) {
    if (ev.key === 'Escape') {
      this.close();
    }
  }
  /**
   * Returns `true` is the menu is open.
   */
  isOpen() {
    return Promise.resolve(this._isOpen);
  }
  /**
   * Returns `true` is the menu is active.
   *
   * A menu is active when it can be opened or closed, meaning it's enabled
   * and it's not part of a `ion-split-pane`.
   */
  isActive() {
    return Promise.resolve(this._isActive());
  }
  /**
   * Opens the menu. If the menu is already open or it can't be opened,
   * it returns `false`.
   */
  open(animated = true) {
    return this.setOpen(true, animated);
  }
  /**
   * Closes the menu. If the menu is already closed or it can't be closed,
   * it returns `false`.
   */
  close(animated = true) {
    return this.setOpen(false, animated);
  }
  /**
   * Toggles the menu. If the menu is already open, it will try to close, otherwise it will try to open it.
   * If the operation can't be completed successfully, it returns `false`.
   */
  toggle(animated = true) {
    return this.setOpen(!this._isOpen, animated);
  }
  /**
   * Opens or closes the button.
   * If the operation can't be completed successfully, it returns `false`.
   */
  setOpen(shouldOpen, animated = true) {
    return _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m._setOpen(this, shouldOpen, animated);
  }
  focusFirstDescendant() {
    const {
      el
    } = this;
    const firstInput = el.querySelector(focusableQueryString);
    if (firstInput) {
      firstInput.focus();
    } else {
      el.focus();
    }
  }
  focusLastDescendant() {
    const {
      el
    } = this;
    const inputs = Array.from(el.querySelectorAll(focusableQueryString));
    const lastInput = inputs.length > 0 ? inputs[inputs.length - 1] : null;
    if (lastInput) {
      lastInput.focus();
    } else {
      el.focus();
    }
  }
  trapKeyboardFocus(ev, doc) {
    const target = ev.target;
    if (!target) {
      return;
    }
    /**
     * If the target is inside the menu contents, let the browser
     * focus as normal and keep a log of the last focused element.
     */
    if (this.el.contains(target)) {
      this.lastFocus = target;
    } else {
      /**
       * Otherwise, we are about to have focus go out of the menu.
       * Wrap the focus to either the first or last element.
       */
      /**
       * Once we call `focusFirstDescendant`, another focus event
       * will fire, which will cause `lastFocus` to be updated
       * before we can run the code after that. We cache the value
       * here to avoid that.
       */
      this.focusFirstDescendant();
      /**
       * If the cached last focused element is the same as the now-
       * active element, that means the user was on the first element
       * already and pressed Shift + Tab, so we need to wrap to the
       * last descendant.
       */
      if (this.lastFocus === doc.activeElement) {
        this.focusLastDescendant();
      }
    }
  }
  _setOpen(shouldOpen, animated = true) {
    var _this3 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // If the menu is disabled or it is currently being animated, let's do nothing
      if (!_this3._isActive() || _this3.isAnimating || shouldOpen === _this3._isOpen) {
        return false;
      }
      _this3.beforeAnimation(shouldOpen);
      yield _this3.loadAnimation();
      yield _this3.startAnimation(shouldOpen, animated);
      _this3.afterAnimation(shouldOpen);
      return true;
    })();
  }
  loadAnimation() {
    var _this4 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      // Menu swipe animation takes the menu's inner width as parameter,
      // If `offsetWidth` changes, we need to create a new animation.
      const width = _this4.menuInnerEl.offsetWidth;
      if (width === _this4.width && _this4.animation !== undefined) {
        return;
      }
      _this4.width = width;
      // Destroy existing animation
      if (_this4.animation) {
        _this4.animation.destroy();
        _this4.animation = undefined;
      }
      // Create new animation
      _this4.animation = yield _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m._createAnimation(_this4.type, _this4);
      if (!_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.c.getBoolean('animated', true)) {
        _this4.animation.duration(0);
      }
      _this4.animation.fill('both');
    })();
  }
  startAnimation(shouldOpen, animated) {
    var _this5 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const isReversed = !shouldOpen;
      const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this5);
      const easing = mode === 'ios' ? iosEasing : mdEasing;
      const easingReverse = mode === 'ios' ? iosEasingReverse : mdEasingReverse;
      const ani = _this5.animation.direction(isReversed ? 'reverse' : 'normal').easing(isReversed ? easingReverse : easing).onFinish(() => {
        if (ani.getDirection() === 'reverse') {
          ani.direction('normal');
        }
      });
      if (animated) {
        yield ani.play();
      } else {
        ani.play({
          sync: true
        });
      }
    })();
  }
  _isActive() {
    return !this.disabled && !this.isPaneVisible;
  }
  canSwipe() {
    return this.swipeGesture && !this.isAnimating && this._isActive();
  }
  canStart(detail) {
    // Do not allow swipe gesture if a modal is open
    const isModalPresented = !!document.querySelector('ion-modal.show-modal');
    if (isModalPresented || !this.canSwipe()) {
      return false;
    }
    if (this._isOpen) {
      return true;
    } else if (_index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m._getOpenSync()) {
      return false;
    }
    return checkEdgeSide(window, detail.currentX, this.isEndSide, this.maxEdgeStart);
  }
  onWillStart() {
    this.beforeAnimation(!this._isOpen);
    return this.loadAnimation();
  }
  onStart() {
    if (!this.isAnimating || !this.animation) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(false, 'isAnimating has to be true');
      return;
    }
    // the cloned animation should not use an easing curve during seek
    this.animation.progressStart(true, this._isOpen ? 1 : 0);
  }
  onMove(detail) {
    if (!this.isAnimating || !this.animation) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(false, 'isAnimating has to be true');
      return;
    }
    const delta = computeDelta(detail.deltaX, this._isOpen, this.isEndSide);
    const stepValue = delta / this.width;
    this.animation.progressStep(this._isOpen ? 1 - stepValue : stepValue);
  }
  onEnd(detail) {
    if (!this.isAnimating || !this.animation) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(false, 'isAnimating has to be true');
      return;
    }
    const isOpen = this._isOpen;
    const isEndSide = this.isEndSide;
    const delta = computeDelta(detail.deltaX, isOpen, isEndSide);
    const width = this.width;
    const stepValue = delta / width;
    const velocity = detail.velocityX;
    const z = width / 2.0;
    const shouldCompleteRight = velocity >= 0 && (velocity > 0.2 || detail.deltaX > z);
    const shouldCompleteLeft = velocity <= 0 && (velocity < -0.2 || detail.deltaX < -z);
    const shouldComplete = isOpen ? isEndSide ? shouldCompleteRight : shouldCompleteLeft : isEndSide ? shouldCompleteLeft : shouldCompleteRight;
    let shouldOpen = !isOpen && shouldComplete;
    if (isOpen && !shouldComplete) {
      shouldOpen = true;
    }
    this.lastOnEnd = detail.currentTime;
    // Account for rounding errors in JS
    let newStepValue = shouldComplete ? 0.001 : -0.001;
    /**
     * stepValue can sometimes return a negative
     * value, but you can't have a negative time value
     * for the cubic bezier curve (at least with web animations)
     */
    const adjustedStepValue = stepValue < 0 ? 0.01 : stepValue;
    /**
     * Animation will be reversed here, so need to
     * reverse the easing curve as well
     *
     * Additionally, we need to account for the time relative
     * to the new easing curve, as `stepValue` is going to be given
     * in terms of a linear curve.
     */
    newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_3__.g)([0, 0], [0.4, 0], [0.6, 1], [1, 1], (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.l)(0, adjustedStepValue, 0.9999))[0] || 0;
    const playTo = this._isOpen ? !shouldComplete : shouldComplete;
    this.animation.easing('cubic-bezier(0.4, 0.0, 0.6, 1)').onFinish(() => this.afterAnimation(shouldOpen), {
      oneTimeCallback: true
    }).progressEnd(playTo ? 1 : 0, this._isOpen ? 1 - newStepValue : newStepValue, 300);
  }
  beforeAnimation(shouldOpen) {
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(!this.isAnimating, '_before() should not be called while animating');
    // this places the menu into the correct location before it animates in
    // this css class doesn't actually kick off any animations
    this.el.classList.add(SHOW_MENU);
    /**
     * We add a tabindex here so that focus trapping
     * still works even if the menu does not have
     * any focusable elements slotted inside. The
     * focus trapping utility will fallback to focusing
     * the menu so focus does not leave when the menu
     * is open.
     */
    this.el.setAttribute('tabindex', '0');
    if (this.backdropEl) {
      this.backdropEl.classList.add(SHOW_BACKDROP);
    }
    // add css class and hide content behind menu from screen readers
    if (this.contentEl) {
      this.contentEl.classList.add(MENU_CONTENT_OPEN);
      /**
       * When the menu is open and overlaying the main
       * content, the main content should not be announced
       * by the screenreader as the menu is the main
       * focus. This is useful with screenreaders that have
       * "read from top" gestures that read the entire
       * page from top to bottom when activated.
       * This should be done before the animation starts
       * so that users cannot accidentally scroll
       * the content while dragging a menu open.
       */
      this.contentEl.setAttribute('aria-hidden', 'true');
    }
    this.blocker.block();
    this.isAnimating = true;
    if (shouldOpen) {
      this.ionWillOpen.emit();
    } else {
      this.ionWillClose.emit();
    }
  }
  afterAnimation(isOpen) {
    var _a;
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(this.isAnimating, '_before() should be called while animating');
    // keep opening/closing the menu disabled for a touch more yet
    // only add listeners/css if it's enabled and isOpen
    // and only remove listeners/css if it's not open
    // emit opened/closed events
    this._isOpen = isOpen;
    this.isAnimating = false;
    if (!this._isOpen) {
      this.blocker.unblock();
    }
    if (isOpen) {
      // emit open event
      this.ionDidOpen.emit();
      /**
       * Move focus to the menu to prepare focus trapping, as long as
       * it isn't already focused. Use the host element instead of the
       * first descendant to avoid the scroll position jumping around.
       */
      const focusedMenu = (_a = document.activeElement) === null || _a === void 0 ? void 0 : _a.closest('ion-menu');
      if (focusedMenu !== this.el) {
        this.el.focus();
      }
      // start focus trapping
      document.addEventListener('focus', this.handleFocus, true);
    } else {
      // remove css classes and unhide content from screen readers
      this.el.classList.remove(SHOW_MENU);
      /**
       * Remove tabindex from the menu component
       * so that is cannot be tabbed to.
       */
      this.el.removeAttribute('tabindex');
      if (this.contentEl) {
        this.contentEl.classList.remove(MENU_CONTENT_OPEN);
        /**
         * Remove aria-hidden so screen readers
         * can announce the main content again
         * now that the menu is not the main focus.
         */
        this.contentEl.removeAttribute('aria-hidden');
      }
      if (this.backdropEl) {
        this.backdropEl.classList.remove(SHOW_BACKDROP);
      }
      if (this.animation) {
        this.animation.stop();
      }
      // emit close event
      this.ionDidClose.emit();
      // undo focus trapping so multiple menus don't collide
      document.removeEventListener('focus', this.handleFocus, true);
    }
  }
  updateState() {
    const isActive = this._isActive();
    if (this.gesture) {
      this.gesture.enable(isActive && this.swipeGesture);
    }
    // Close menu immediately
    if (!isActive && this._isOpen) {
      // close if this menu is open, and should not be enabled
      this.forceClosing();
    }
    if (!this.disabled) {
      _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m._setActiveMenu(this);
    }
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(!this.isAnimating, 'can not be animating');
  }
  forceClosing() {
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.o)(this._isOpen, 'menu cannot be closed');
    this.isAnimating = true;
    const ani = this.animation.direction('reverse');
    ani.play({
      sync: true
    });
    this.afterAnimation(false);
  }
  render() {
    const {
      isEndSide,
      type,
      disabled,
      isPaneVisible,
      inheritedAttributes
    } = this;
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "navigation",
      "aria-label": inheritedAttributes['aria-label'] || 'menu',
      class: {
        [mode]: true,
        [`menu-type-${type}`]: true,
        'menu-enabled': !disabled,
        'menu-side-end': isEndSide,
        'menu-side-start': !isEndSide,
        'menu-pane-visible': isPaneVisible
      }
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "menu-inner",
      part: "container",
      ref: el => this.menuInnerEl = el
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-backdrop", {
      ref: el => this.backdropEl = el,
      class: "menu-backdrop",
      tappable: false,
      stopPropagation: false,
      part: "backdrop"
    }));
  }
  get el() {
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "type": ["typeChanged"],
      "disabled": ["disabledChanged"],
      "side": ["sideChanged"],
      "swipeGesture": ["swipeGestureChanged"]
    };
  }
};
const computeDelta = (deltaX, isOpen, isEndSide) => {
  return Math.max(0, isOpen !== isEndSide ? -deltaX : deltaX);
};
const checkEdgeSide = (win, posX, isEndSide, maxEdgeStart) => {
  if (isEndSide) {
    return posX >= win.innerWidth - maxEdgeStart;
  } else {
    return posX <= maxEdgeStart;
  }
};
const SHOW_MENU = 'show-menu';
const SHOW_BACKDROP = 'show-backdrop';
const MENU_CONTENT_OPEN = 'menu-content-open';
Menu.style = {
  ios: menuIosCss,
  md: menuMdCss
};

// Given a menu, return whether or not the menu toggle should be visible
const updateVisibility = /*#__PURE__*/function () {
  var _ref = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (menu) {
    const menuEl = yield _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m.get(menu);
    return !!(menuEl && (yield menuEl.isActive()));
  });
  return function updateVisibility(_x) {
    return _ref.apply(this, arguments);
  };
}();
const menuButtonIosCss = ":host{--background:transparent;--color-focused:currentColor;--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:0.5;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity, 0)}}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host(.in-toolbar:not(.in-toolbar-color)){color:var(--ion-toolbar-color, var(--color))}:host{--background-focused:currentColor;--background-focused-opacity:.1;--border-radius:4px;--color:var(--ion-color-primary, #3880ff);--padding-start:5px;--padding-end:5px;height:32px;font-size:31px}:host(.ion-activated){opacity:0.4}@media (any-hover: hover){:host(:hover){opacity:0.6}}";
const menuButtonMdCss = ":host{--background:transparent;--color-focused:currentColor;--border-radius:initial;--padding-top:0;--padding-bottom:0;color:var(--color);text-align:center;text-decoration:none;text-overflow:ellipsis;text-transform:none;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none}.button-native{border-radius:var(--border-radius);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;border:0;outline:none;background:var(--background);line-height:1;cursor:pointer;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:0;-webkit-appearance:none;-moz-appearance:none;appearance:none}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:row nowrap;flex-flow:row nowrap;-ms-flex-negative:0;flex-shrink:0;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}ion-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;pointer-events:none}:host(.menu-button-hidden){display:none}:host(.menu-button-disabled){cursor:default;opacity:0.5;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity, 0)}}:host(.ion-color) .button-native{color:var(--ion-color-base)}:host(.in-toolbar:not(.in-toolbar-color)){color:var(--ion-toolbar-color, var(--color))}:host{--background-focused:currentColor;--background-focused-opacity:.12;--background-hover:currentColor;--background-hover-opacity:.04;--border-radius:50%;--color:initial;--padding-start:8px;--padding-end:8px;width:48px;height:48px;font-size:24px}:host(.ion-color.ion-focused)::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.ion-color:hover) .button-native::after{background:var(--ion-color-base)}}";
const MenuButton = class {
  constructor(hostRef) {
    var _this6 = this;
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.inheritedAttributes = {};
    this.onClick = /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m.toggle(_this6.menu);
    });
    this.visible = false;
    this.color = undefined;
    this.disabled = false;
    this.menu = undefined;
    this.autoHide = true;
    this.type = 'button';
  }
  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.i)(this.el);
  }
  componentDidLoad() {
    this.visibilityChanged();
  }
  visibilityChanged() {
    var _this7 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this7.visible = yield updateVisibility(_this7.menu);
    })();
  }
  render() {
    const {
      color,
      disabled,
      inheritedAttributes
    } = this;
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const menuIcon = _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.c.get('menuIcon', mode === 'ios' ? _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_8__.u : _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_8__.v);
    const hidden = this.autoHide && !this.visible;
    const attrs = {
      type: this.type
    };
    const ariaLabel = inheritedAttributes['aria-label'] || 'menu';
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      "aria-disabled": disabled ? 'true' : null,
      "aria-hidden": hidden ? 'true' : null,
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__.c)(color, {
        [mode]: true,
        button: true,
        'menu-button-hidden': hidden,
        'menu-button-disabled': disabled,
        'in-toolbar': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_9__.h)('ion-toolbar[color]', this.el),
        'ion-activatable': true,
        'ion-focusable': true
      })
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", Object.assign({}, attrs, {
      disabled: disabled,
      class: "button-native",
      part: "native",
      "aria-label": ariaLabel
    }), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
      class: "button-inner"
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-icon", {
      part: "icon",
      icon: menuIcon,
      mode: mode,
      lazy: false,
      "aria-hidden": "true"
    }))), mode === 'md' && (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-ripple-effect", {
      type: "unbounded"
    })));
  }
  get el() {
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
MenuButton.style = {
  ios: menuButtonIosCss,
  md: menuButtonMdCss
};
const menuToggleCss = ":host(.menu-toggle-hidden){display:none}";
const MenuToggle = class {
  constructor(hostRef) {
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.onClick = () => {
      return _index_34890215_js__WEBPACK_IMPORTED_MODULE_6__.m.toggle(this.menu);
    };
    this.visible = false;
    this.menu = undefined;
    this.autoHide = true;
  }
  connectedCallback() {
    this.visibilityChanged();
  }
  visibilityChanged() {
    var _this8 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this8.visible = yield updateVisibility(_this8.menu);
    })();
  }
  render() {
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const hidden = this.autoHide && !this.visible;
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      "aria-hidden": hidden ? 'true' : null,
      class: {
        [mode]: true,
        'menu-toggle-hidden': hidden
      }
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }
};
MenuToggle.style = menuToggleCss;


/***/ }),

/***/ 320:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */
const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};
const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }
  return [];
};
const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};
const SCHEME = /^[a-z][a-z0-9+\-.]*:/;
const openURL = /*#__PURE__*/function () {
  var _ref = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');
      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }
        return router.push(url, direction, animation);
      }
    }
    return false;
  });
  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLW1lbnVfM19lbnRyeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzZHO0FBQ25DO0FBQ0E7QUFDQztBQUNpQztBQUNsRDtBQUNEO0FBQ2M7QUFDUztBQUNwQztBQUNYO0FBQ0o7QUFDYTtBQUNiO0FBRTdCLE1BQU1rQyxVQUFVLEdBQUcsdTREQUF1NEQ7QUFFMTVELE1BQU1DLFNBQVMsR0FBRyxxN0RBQXE3RDtBQUV2OEQsTUFBTUMsU0FBUyxHQUFHLDZCQUE2QjtBQUMvQyxNQUFNQyxRQUFRLEdBQUcsNkJBQTZCO0FBQzlDLE1BQU1DLGdCQUFnQixHQUFHLGdDQUFnQztBQUN6RCxNQUFNQyxlQUFlLEdBQUcsOEJBQThCO0FBQ3RELE1BQU1DLG9CQUFvQixHQUFHLDhNQUE4TTtBQUMzTyxNQUFNQyxJQUFJLEdBQUcsTUFBTTtFQUNqQkMsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ25CMUMscURBQWdCLENBQUMsSUFBSSxFQUFFMEMsT0FBTyxDQUFDO0lBQy9CLElBQUksQ0FBQ0MsV0FBVyxHQUFHekMscURBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUMwQyxZQUFZLEdBQUcxQyxxREFBVyxDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELElBQUksQ0FBQzJDLFVBQVUsR0FBRzNDLHFEQUFXLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7SUFDcEQsSUFBSSxDQUFDNEMsV0FBVyxHQUFHNUMscURBQVcsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztJQUN0RCxJQUFJLENBQUM2QyxhQUFhLEdBQUc3QyxxREFBVyxDQUFDLElBQUksRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQzFELElBQUksQ0FBQzhDLFNBQVMs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LEVBQUUsRUFBRW1ILFNBQVMsRUFBRTVGLFNBQVMsRUFBSztJQUN2RCxJQUFJcU0sR0FBRyxJQUFJLElBQUksSUFBSUEsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDRixNQUFNLENBQUNHLElBQUksQ0FBQ0QsR0FBRyxDQUFDLEVBQUU7TUFDdEQsTUFBTUUsTUFBTSxHQUFHNU4sUUFBUSxDQUFDa0YsYUFBYSxDQUFDLFlBQVksQ0FBQztNQUNuRCxJQUFJMEksTUFBTSxFQUFFO1FBQ1YsSUFBSTlOLEVBQUUsSUFBSSxJQUFJLEVBQUU7VUFDZEEsRUFBRSxDQUFDbUUsY0FBYyxFQUFFO1FBQ3JCO1FBQ0EsT0FBTzJKLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxHQUFHLEVBQUV6RyxTQUFTLEVBQUU1RixTQUFTLENBQUM7TUFDL0M7SUFDRjtJQUNBLE9BQU8sS0FBSztFQUNkLENBQUM7RUFBQSxnQkFYS29NLE9BQU9BLENBQUF6QyxFQUFBLEVBQUE4QyxHQUFBLEVBQUFDLEdBQUEsRUFBQUMsR0FBQTtJQUFBLE9BQUFuRCxJQUFBLENBQUFJLEtBQUEsT0FBQUMsU0FBQTtFQUFBO0FBQUEsR0FXWiIsInNvdXJjZXMiOlsiLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vaW9uLW1lbnVfMy5lbnRyeS5qcyIsIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL3RoZW1lLTc2NzAzNDFjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGQgYXMgY3JlYXRlRXZlbnQsIGgsIEggYXMgSG9zdCwgZiBhcyBnZXRFbGVtZW50IH0gZnJvbSAnLi9pbmRleC1iZTIxOGQ3MC5qcyc7XG5pbXBvcnQgeyBjIGFzIGNvbmZpZywgYiBhcyBnZXRJb25Nb2RlIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtM2IyOGEyMjUuanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRUaW1lR2l2ZW5Qcm9ncmVzc2lvbiB9IGZyb20gJy4vY3ViaWMtYmV6aWVyLWU3OGQxMzA3LmpzJztcbmltcG9ydCB7IEcgYXMgR0VTVFVSRV9DT05UUk9MTEVSIH0gZnJvbSAnLi9nZXN0dXJlLWNvbnRyb2xsZXItMTcwNjBiN2MuanMnO1xuaW1wb3J0IHsgcSBhcyBpc0VuZFNpZGUsIGkgYXMgaW5oZXJpdEFyaWFBdHRyaWJ1dGVzLCBvIGFzIGFzc2VydCwgbCBhcyBjbGFtcCB9IGZyb20gJy4vaGVscGVycy01ZWI2MzY0ZC5qcyc7XG5pbXBvcnQgeyBtIGFzIG1lbnVDb250cm9sbGVyIH0gZnJvbSAnLi9pbmRleC0zNDg5MDIxNS5qcyc7XG5pbXBvcnQgeyBvIGFzIGdldE92ZXJsYXkgfSBmcm9tICcuL292ZXJsYXlzLTE2NmIzNGFlLmpzJztcbmltcG9ydCB7IHUgYXMgbWVudU91dGxpbmUsIHYgYXMgbWVudVNoYXJwIH0gZnJvbSAnLi9pbmRleC0zOTNiYzE0YS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUNvbG9yQ2xhc3NlcywgaCBhcyBob3N0Q29udGV4dCB9IGZyb20gJy4vdGhlbWUtNzY3MDM0MWMuanMnO1xuaW1wb3J0ICcuL2hhcmR3YXJlLWJhY2stYnV0dG9uLTQ5MGRmMTE1LmpzJztcbmltcG9ydCAnLi9hbmltYXRpb24tOWE4OTBjYWQuanMnO1xuaW1wb3J0ICcuL2luZGV4LTMzZmZlYzI1LmpzJztcbmltcG9ydCAnLi9mcmFtZXdvcmstZGVsZWdhdGUtMjhmN2VhMjkuanMnO1xuaW1wb3J0ICcuL2luZGV4LWU4NmYwMTE3LmpzJztcblxuY29uc3QgbWVudUlvc0NzcyA9IFwiOmhvc3R7LS13aWR0aDozMDRweDstLW1pbi13aWR0aDphdXRvOy0tbWF4LXdpZHRoOmF1dG87LS1oZWlnaHQ6MTAwJTstLW1pbi1oZWlnaHQ6YXV0bzstLW1heC1oZWlnaHQ6YXV0bzstLWJhY2tncm91bmQ6dmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpO2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO2Rpc3BsYXk6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTtjb250YWluOnN0cmljdH06aG9zdCguc2hvdy1tZW51KXtkaXNwbGF5OmJsb2NrfS5tZW51LWlubmVye3RvcDowO2JvdHRvbTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTk5OTlweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTk5OTlweCk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtjb250YWluOnN0cmljdH1Ac3VwcG9ydHMgKGluc2V0LWlubGluZS1zdGFydDogMCl7Lm1lbnUtaW5uZXJ7aW5zZXQtaW5saW5lLXN0YXJ0OjA7aW5zZXQtaW5saW5lLWVuZDphdXRvfX1Ac3VwcG9ydHMgbm90IChpbnNldC1pbmxpbmUtc3RhcnQ6IDApey5tZW51LWlubmVye2xlZnQ6MDtyaWdodDphdXRvfVtkaXI9cnRsXSAubWVudS1pbm5lciw6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLm1lbnUtaW5uZXJ7bGVmdDp1bnNldDtyaWdodDp1bnNldDtsZWZ0OmF1dG87cmlnaHQ6MH19Omhvc3QoLm1lbnUtc2lkZS1zdGFydCkgLm1lbnUtaW5uZXJ7LS1pb24tc2FmZS1hcmVhLXJpZ2h0OjBweDtyaWdodDphdXRvO2xlZnQ6MH06aG9zdCgubWVudS1zaWRlLWVuZCkgLm1lbnUtaW5uZXJ7LS1pb24tc2FmZS1hcmVhLWxlZnQ6MHB4O3JpZ2h0OjA7bGVmdDphdXRvO31pb24tYmFja2Ryb3B7ZGlzcGxheTpub25lO29wYWNpdHk6MC4wMTt6LWluZGV4Oi0xfUBtZWRpYSAobWF4LXdpZHRoOiAzNDBweCl7Lm1lbnUtaW5uZXJ7LS13aWR0aDoyNjRweH19Omhvc3QoLm1lbnUtdHlwZS1yZXZlYWwpe3otaW5kZXg6MH06aG9zdCgubWVudS10eXBlLXJldmVhbC5zaG93LW1lbnUpIC5tZW51LWlubmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgMCl9Omhvc3QoLm1lbnUtdHlwZS1vdmVybGF5KXt6LWluZGV4OjEwMDB9Omhvc3QoLm1lbnUtdHlwZS1vdmVybGF5KSAuc2hvdy1iYWNrZHJvcHtkaXNwbGF5OmJsb2NrO2N1cnNvcjpwb2ludGVyfTpob3N0KC5tZW51LXBhbmUtdmlzaWJsZSl7d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpO21heC13aWR0aDp2YXIoLS1tYXgtd2lkdGgpfTpob3N0KC5tZW51LXBhbmUtdmlzaWJsZSkgLm1lbnUtaW5uZXJ7bGVmdDowO3JpZ2h0OjA7d2lkdGg6YXV0bzstd2Via2l0LXRyYW5zZm9ybTpub25lICFpbXBvcnRhbnQ7dHJhbnNmb3JtOm5vbmUgIWltcG9ydGFudDstd2Via2l0LWJveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50O2JveC1zaGFkb3c6bm9uZSAhaW1wb3J0YW50fTpob3N0KC5tZW51LXBhbmUtdmlzaWJsZSkgaW9uLWJhY2tkcm9we2Rpc3BsYXk6aGlkZGVuICFpbXBvcnRhbnQ7fTpob3N0KC5tZW51LXR5cGUtcHVzaCl7ei1pbmRleDoxMDAwfTpob3N0KC5tZW51LXR5cGUtcHVzaCkgLnNob3ctYmFja2Ryb3B7ZGlzcGxheTpibG9ja31cIjtcblxuY29uc3QgbWVudU1kQ3NzID0gXCI6aG9zdHstLXdpZHRoOjMwNHB4Oy0tbWluLXdpZHRoOmF1dG87LS1tYXgtd2lkdGg6YXV0bzstLWhlaWdodDoxMDAlOy0tbWluLWhlaWdodDphdXRvOy0tbWF4LWhlaWdodDphdXRvOy0tYmFja2dyb3VuZDp2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZik7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7ZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRhaW46c3RyaWN0fTpob3N0KC5zaG93LW1lbnUpe2Rpc3BsYXk6YmxvY2t9Lm1lbnUtaW5uZXJ7dG9wOjA7Ym90dG9tOjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgtOTk5OXB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtOTk5OXB4KTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjstbXMtZmxleC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47d2lkdGg6dmFyKC0td2lkdGgpO21pbi13aWR0aDp2YXIoLS1taW4td2lkdGgpO21heC13aWR0aDp2YXIoLS1tYXgtd2lkdGgpO2hlaWdodDp2YXIoLS1oZWlnaHQpO21pbi1oZWlnaHQ6dmFyKC0tbWluLWhlaWdodCk7bWF4LWhlaWdodDp2YXIoLS1tYXgtaGVpZ2h0KTtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbnRhaW46c3RyaWN0fUBzdXBwb3J0cyAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKXsubWVudS1pbm5lcntpbnNldC1pbmxpbmUtc3RhcnQ6MDtpbnNldC1pbmxpbmUtZW5kOmF1dG99fUBzdXBwb3J0cyBub3QgKGluc2V0LWlubGluZS1zdGFydDogMCl7Lm1lbnUtaW5uZXJ7bGVmdDowO3JpZ2h0OmF1dG99W2Rpcj1ydGxdIC5tZW51LWlubmVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSAubWVudS1pbm5lcntsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O2xlZnQ6YXV0bztyaWdodDowfX06aG9zdCgubWVudS1zaWRlLXN0YXJ0KSAubWVudS1pbm5lcnstLWlvbi1zYWZlLWFyZWEtcmlnaHQ6MHB4O3JpZ2h0OmF1dG87bGVmdDowfTpob3N0KC5tZW51LXNpZGUtZW5kKSAubWVudS1pbm5lcnstLWlvbi1zYWZlLWFyZWEtbGVmdDowcHg7cmlnaHQ6MDtsZWZ0OmF1dG87fWlvbi1iYWNrZHJvcHtkaXNwbGF5Om5vbmU7b3BhY2l0eTowLjAxO3otaW5kZXg6LTF9QG1lZGlhIChtYXgtd2lkdGg6IDM0MHB4KXsubWVudS1pbm5lcnstLXdpZHRoOjI2NHB4fX06aG9zdCgubWVudS10eXBlLXJldmVhbCl7ei1pbmRleDowfTpob3N0KC5tZW51LXR5cGUtcmV2ZWFsLnNob3ctbWVudSkgLm1lbnUtaW5uZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgIDAsICAwKX06aG9zdCgubWVudS10eXBlLW92ZXJsYXkpe3otaW5kZXg6MTAwMH06aG9zdCgubWVudS10eXBlLW92ZXJsYXkpIC5zaG93LWJhY2tkcm9we2Rpc3BsYXk6YmxvY2s7Y3Vyc29yOnBvaW50ZXJ9Omhvc3QoLm1lbnUtcGFuZS12aXNpYmxlKXt3aWR0aDp2YXIoLS13aWR0aCk7bWluLXdpZHRoOnZhcigtLW1pbi13aWR0aCk7bWF4LXdpZHRoOnZhcigtLW1heC13aWR0aCl9Omhvc3QoLm1lbnUtcGFuZS12aXNpYmxlKSAubWVudS1pbm5lcntsZWZ0OjA7cmlnaHQ6MDt3aWR0aDphdXRvOy13ZWJraXQtdHJhbnNmb3JtOm5vbmUgIWltcG9ydGFudDt0cmFuc2Zvcm06bm9uZSAhaW1wb3J0YW50Oy13ZWJraXQtYm94LXNoYWRvdzpub25lICFpbXBvcnRhbnQ7Ym94LXNoYWRvdzpub25lICFpbXBvcnRhbnR9Omhvc3QoLm1lbnUtcGFuZS12aXNpYmxlKSBpb24tYmFja2Ryb3B7ZGlzcGxheTpoaWRkZW4gIWltcG9ydGFudDt9Omhvc3QoLm1lbnUtdHlwZS1vdmVybGF5KSAubWVudS1pbm5lcnstd2Via2l0LWJveC1zaGFkb3c6NHB4IDBweCAxNnB4IHJnYmEoMCwgMCwgMCwgMC4xOCk7Ym94LXNoYWRvdzo0cHggMHB4IDE2cHggcmdiYSgwLCAwLCAwLCAwLjE4KX1cIjtcblxuY29uc3QgaW9zRWFzaW5nID0gJ2N1YmljLWJlemllcigwLjMyLDAuNzIsMCwxKSc7XG5jb25zdCBtZEVhc2luZyA9ICdjdWJpYy1iZXppZXIoMC4wLDAuMCwwLjIsMSknO1xuY29uc3QgaW9zRWFzaW5nUmV2ZXJzZSA9ICdjdWJpYy1iZXppZXIoMSwgMCwgMC42OCwgMC4yOCknO1xuY29uc3QgbWRFYXNpbmdSZXZlcnNlID0gJ2N1YmljLWJlemllcigwLjQsIDAsIDAuNiwgMSknO1xuY29uc3QgZm9jdXNhYmxlUXVlcnlTdHJpbmcgPSAnW3RhYmluZGV4XTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pLCBpbnB1dDpub3QoW3R5cGU9aGlkZGVuXSk6bm90KFt0YWJpbmRleF49XCItXCJdKSwgdGV4dGFyZWE6bm90KFt0YWJpbmRleF49XCItXCJdKSwgYnV0dG9uOm5vdChbdGFiaW5kZXhePVwiLVwiXSksIHNlbGVjdDpub3QoW3RhYmluZGV4Xj1cIi1cIl0pLCAuaW9uLWZvY3VzYWJsZTpub3QoW3RhYmluZGV4Xj1cIi1cIl0pJztcbmNvbnN0IE1lbnUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uV2lsbE9wZW4gPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbldpbGxPcGVuXCIsIDcpO1xuICAgIHRoaXMuaW9uV2lsbENsb3NlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25XaWxsQ2xvc2VcIiwgNyk7XG4gICAgdGhpcy5pb25EaWRPcGVuID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25EaWRPcGVuXCIsIDcpO1xuICAgIHRoaXMuaW9uRGlkQ2xvc2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkRpZENsb3NlXCIsIDcpO1xuICAgIHRoaXMuaW9uTWVudUNoYW5nZSA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTWVudUNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmxhc3RPbkVuZCA9IDA7XG4gICAgdGhpcy5ibG9ja2VyID0gR0VTVFVSRV9DT05UUk9MTEVSLmNyZWF0ZUJsb2NrZXIoeyBkaXNhYmxlU2Nyb2xsOiB0cnVlIH0pO1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSB7fTtcbiAgICB0aGlzLmhhbmRsZUZvY3VzID0gKGV2KSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIE92ZXJsYXlzIGhhdmUgdGhlaXIgb3duIGZvY3VzIHRyYXBwaW5nIGxpc3RlbmVyXG4gICAgICAgKiBzbyB3ZSBkbyBub3Qgd2FudCB0aGUgdHdvIGxpc3RlbmVycyB0byBjb25mbGljdFxuICAgICAgICogd2l0aCBlYWNoIG90aGVyLiBJZiB0aGUgdG9wLW1vc3Qgb3ZlcmxheSB0aGF0IGlzXG4gICAgICAgKiBvcGVuIGRvZXMgbm90IGNvbnRhaW4gdGhpcyBpb24tbWVudSwgdGhlbiBpb24tbWVudSdzXG4gICAgICAgKiBmb2N1cyB0cmFwcGluZyBzaG91bGQgbm90IHJ1bi5cbiAgICAgICAqL1xuICAgICAgY29uc3QgbGFzdE92ZXJsYXkgPSBnZXRPdmVybGF5KGRvY3VtZW50KTtcbiAgICAgIGlmIChsYXN0T3ZlcmxheSAmJiAhbGFzdE92ZXJsYXkuY29udGFpbnModGhpcy5lbCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy50cmFwS2V5Ym9hcmRGb2N1cyhldiwgZG9jdW1lbnQpO1xuICAgIH07XG4gICAgdGhpcy5pc1BhbmVWaXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5pc0VuZFNpZGUgPSBmYWxzZTtcbiAgICB0aGlzLmNvbnRlbnRJZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1lbnVJZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnR5cGUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2lkZSA9ICdzdGFydCc7XG4gICAgdGhpcy5zd2lwZUdlc3R1cmUgPSB0cnVlO1xuICAgIHRoaXMubWF4RWRnZVN0YXJ0ID0gNTA7XG4gIH1cbiAgdHlwZUNoYW5nZWQodHlwZSwgb2xkVHlwZSkge1xuICAgIGNvbnN0IGNvbnRlbnRFbCA9IHRoaXMuY29udGVudEVsO1xuICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgIGlmIChvbGRUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGVudEVsLmNsYXNzTGlzdC5yZW1vdmUoYG1lbnUtY29udGVudC0ke29sZFR5cGV9YCk7XG4gICAgICB9XG4gICAgICBjb250ZW50RWwuY2xhc3NMaXN0LmFkZChgbWVudS1jb250ZW50LSR7dHlwZX1gKTtcbiAgICAgIGNvbnRlbnRFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLm1lbnVJbm5lckVsKSB7XG4gICAgICAvLyBSZW1vdmUgZWZmZWN0cyBvZiBwcmV2aW91cyBhbmltYXRpb25zXG4gICAgICB0aGlzLm1lbnVJbm5lckVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICB9XG4gICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgZGlzYWJsZWRDaGFuZ2VkKCkge1xuICAgIHRoaXMudXBkYXRlU3RhdGUoKTtcbiAgICB0aGlzLmlvbk1lbnVDaGFuZ2UuZW1pdCh7XG4gICAgICBkaXNhYmxlZDogdGhpcy5kaXNhYmxlZCxcbiAgICAgIG9wZW46IHRoaXMuX2lzT3BlbixcbiAgICB9KTtcbiAgfVxuICBzaWRlQ2hhbmdlZCgpIHtcbiAgICB0aGlzLmlzRW5kU2lkZSA9IGlzRW5kU2lkZSh0aGlzLnNpZGUpO1xuICB9XG4gIHN3aXBlR2VzdHVyZUNoYW5nZWQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICB9XG4gIGFzeW5jIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIC8vIFRPRE86IGNvbm5lY3RlZENhbGxiYWNrIGlzIGZpcmVkIGluIENFIGJ1aWxkXG4gICAgLy8gYmVmb3JlIFdDIGlzIGRlZmluZWQuIFRoaXMgbmVlZHMgdG8gYmUgZml4ZWQgaW4gU3RlbmNpbC5cbiAgICBpZiAodHlwZW9mIGN1c3RvbUVsZW1lbnRzICE9PSAndW5kZWZpbmVkJyAmJiBjdXN0b21FbGVtZW50cyAhPSBudWxsKSB7XG4gICAgICBhd2FpdCBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZCgnaW9uLW1lbnUnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnR5cGUgPSBjb25maWcuZ2V0KCdtZW51VHlwZScsICdvdmVybGF5Jyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmNvbnRlbnRJZCAhPT0gdW5kZWZpbmVkID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jb250ZW50SWQpIDogbnVsbDtcbiAgICBpZiAoY29udGVudCA9PT0gbnVsbCkge1xuICAgICAgY29uc29sZS5lcnJvcignTWVudTogbXVzdCBoYXZlIGEgXCJjb250ZW50XCIgZWxlbWVudCB0byBsaXN0ZW4gZm9yIGRyYWcgZXZlbnRzIG9uLicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5lbC5jb250YWlucyhjb250ZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihgTWVudTogXCJjb250ZW50SWRcIiBzaG91bGQgcmVmZXIgdG8gdGhlIG1haW4gdmlldydzIGlvbi1jb250ZW50LCBub3QgdGhlIGlvbi1jb250ZW50IGluc2lkZSBvZiB0aGUgaW9uLW1lbnUuYCk7XG4gICAgfVxuICAgIHRoaXMuY29udGVudEVsID0gY29udGVudDtcbiAgICAvLyBhZGQgbWVudSdzIGNvbnRlbnQgY2xhc3Nlc1xuICAgIGNvbnRlbnQuY2xhc3NMaXN0LmFkZCgnbWVudS1jb250ZW50Jyk7XG4gICAgdGhpcy50eXBlQ2hhbmdlZCh0aGlzLnR5cGUsIHVuZGVmaW5lZCk7XG4gICAgdGhpcy5zaWRlQ2hhbmdlZCgpO1xuICAgIC8vIHJlZ2lzdGVyIHRoaXMgbWVudSB3aXRoIHRoZSBhcHAncyBtZW51IGNvbnRyb2xsZXJcbiAgICBtZW51Q29udHJvbGxlci5fcmVnaXN0ZXIodGhpcyk7XG4gICAgdGhpcy5nZXN0dXJlID0gKGF3YWl0IGltcG9ydCgnLi9pbmRleC00MjJiNmU4My5qcycpKS5jcmVhdGVHZXN0dXJlKHtcbiAgICAgIGVsOiBkb2N1bWVudCxcbiAgICAgIGdlc3R1cmVOYW1lOiAnbWVudS1zd2lwZScsXG4gICAgICBnZXN0dXJlUHJpb3JpdHk6IDMwLFxuICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgIGJsdXJPblN0YXJ0OiB0cnVlLFxuICAgICAgY2FuU3RhcnQ6IChldikgPT4gdGhpcy5jYW5TdGFydChldiksXG4gICAgICBvbldpbGxTdGFydDogKCkgPT4gdGhpcy5vbldpbGxTdGFydCgpLFxuICAgICAgb25TdGFydDogKCkgPT4gdGhpcy5vblN0YXJ0KCksXG4gICAgICBvbk1vdmU6IChldikgPT4gdGhpcy5vbk1vdmUoZXYpLFxuICAgICAgb25FbmQ6IChldikgPT4gdGhpcy5vbkVuZChldiksXG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IGluaGVyaXRBcmlhQXR0cmlidXRlcyh0aGlzLmVsKTtcbiAgfVxuICBhc3luYyBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHRoaXMuaW9uTWVudUNoYW5nZS5lbWl0KHsgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWQsIG9wZW46IHRoaXMuX2lzT3BlbiB9KTtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgdGhpcy5ibG9ja2VyLmRlc3Ryb3koKTtcbiAgICBtZW51Q29udHJvbGxlci5fdW5yZWdpc3Rlcih0aGlzKTtcbiAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuZ2VzdHVyZSkge1xuICAgICAgdGhpcy5nZXN0dXJlLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMuZ2VzdHVyZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb250ZW50RWwgPSB0aGlzLmJhY2tkcm9wRWwgPSB0aGlzLm1lbnVJbm5lckVsID0gdW5kZWZpbmVkO1xuICB9XG4gIG9uU3BsaXRQYW5lQ2hhbmdlZChldikge1xuICAgIHRoaXMuaXNQYW5lVmlzaWJsZSA9IGV2LmRldGFpbC5pc1BhbmUodGhpcy5lbCk7XG4gICAgdGhpcy51cGRhdGVTdGF0ZSgpO1xuICB9XG4gIG9uQmFja2Ryb3BDbGljayhldikge1xuICAgIC8vIFRPRE8oRlctMjgzMik6IHR5cGUgKEN1c3RvbUV2ZW50IHRyaWdnZXJzIGVycm9ycyB3aGljaCBzaG91bGQgYmUgc29ydGVkKVxuICAgIGlmICh0aGlzLl9pc09wZW4gJiYgdGhpcy5sYXN0T25FbmQgPCBldi50aW1lU3RhbXAgLSAxMDApIHtcbiAgICAgIGNvbnN0IHNob3VsZENsb3NlID0gZXYuY29tcG9zZWRQYXRoID8gIWV2LmNvbXBvc2VkUGF0aCgpLmluY2x1ZGVzKHRoaXMubWVudUlubmVyRWwpIDogZmFsc2U7XG4gICAgICBpZiAoc2hvdWxkQ2xvc2UpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb25LZXlkb3duKGV2KSB7XG4gICAgaWYgKGV2LmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYHRydWVgIGlzIHRoZSBtZW51IGlzIG9wZW4uXG4gICAqL1xuICBpc09wZW4oKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9pc09wZW4pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpcyB0aGUgbWVudSBpcyBhY3RpdmUuXG4gICAqXG4gICAqIEEgbWVudSBpcyBhY3RpdmUgd2hlbiBpdCBjYW4gYmUgb3BlbmVkIG9yIGNsb3NlZCwgbWVhbmluZyBpdCdzIGVuYWJsZWRcbiAgICogYW5kIGl0J3Mgbm90IHBhcnQgb2YgYSBgaW9uLXNwbGl0LXBhbmVgLlxuICAgKi9cbiAgaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9pc0FjdGl2ZSgpKTtcbiAgfVxuICAvKipcbiAgICogT3BlbnMgdGhlIG1lbnUuIElmIHRoZSBtZW51IGlzIGFscmVhZHkgb3BlbiBvciBpdCBjYW4ndCBiZSBvcGVuZWQsXG4gICAqIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICovXG4gIG9wZW4oYW5pbWF0ZWQgPSB0cnVlKSB7XG4gICAgcmV0dXJuIHRoaXMuc2V0T3Blbih0cnVlLCBhbmltYXRlZCk7XG4gIH1cbiAgLyoqXG4gICAqIENsb3NlcyB0aGUgbWVudS4gSWYgdGhlIG1lbnUgaXMgYWxyZWFkeSBjbG9zZWQgb3IgaXQgY2FuJ3QgYmUgY2xvc2VkLFxuICAgKiBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAqL1xuICBjbG9zZShhbmltYXRlZCA9IHRydWUpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRPcGVuKGZhbHNlLCBhbmltYXRlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIG1lbnUuIElmIHRoZSBtZW51IGlzIGFscmVhZHkgb3BlbiwgaXQgd2lsbCB0cnkgdG8gY2xvc2UsIG90aGVyd2lzZSBpdCB3aWxsIHRyeSB0byBvcGVuIGl0LlxuICAgKiBJZiB0aGUgb3BlcmF0aW9uIGNhbid0IGJlIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHksIGl0IHJldHVybnMgYGZhbHNlYC5cbiAgICovXG4gIHRvZ2dsZShhbmltYXRlZCA9IHRydWUpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRPcGVuKCF0aGlzLl9pc09wZW4sIGFuaW1hdGVkKTtcbiAgfVxuICAvKipcbiAgICogT3BlbnMgb3IgY2xvc2VzIHRoZSBidXR0b24uXG4gICAqIElmIHRoZSBvcGVyYXRpb24gY2FuJ3QgYmUgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSwgaXQgcmV0dXJucyBgZmFsc2VgLlxuICAgKi9cbiAgc2V0T3BlbihzaG91bGRPcGVuLCBhbmltYXRlZCA9IHRydWUpIHtcbiAgICByZXR1cm4gbWVudUNvbnRyb2xsZXIuX3NldE9wZW4odGhpcywgc2hvdWxkT3BlbiwgYW5pbWF0ZWQpO1xuICB9XG4gIGZvY3VzRmlyc3REZXNjZW5kYW50KCkge1xuICAgIGNvbnN0IHsgZWwgfSA9IHRoaXM7XG4gICAgY29uc3QgZmlyc3RJbnB1dCA9IGVsLnF1ZXJ5U2VsZWN0b3IoZm9jdXNhYmxlUXVlcnlTdHJpbmcpO1xuICAgIGlmIChmaXJzdElucHV0KSB7XG4gICAgICBmaXJzdElucHV0LmZvY3VzKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZWwuZm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgZm9jdXNMYXN0RGVzY2VuZGFudCgpIHtcbiAgICBjb25zdCB7IGVsIH0gPSB0aGlzO1xuICAgIGNvbnN0IGlucHV0cyA9IEFycmF5LmZyb20oZWwucXVlcnlTZWxlY3RvckFsbChmb2N1c2FibGVRdWVyeVN0cmluZykpO1xuICAgIGNvbnN0IGxhc3RJbnB1dCA9IGlucHV0cy5sZW5ndGggPiAwID8gaW5wdXRzW2lucHV0cy5sZW5ndGggLSAxXSA6IG51bGw7XG4gICAgaWYgKGxhc3RJbnB1dCkge1xuICAgICAgbGFzdElucHV0LmZvY3VzKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZWwuZm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgdHJhcEtleWJvYXJkRm9jdXMoZXYsIGRvYykge1xuICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzIGluc2lkZSB0aGUgbWVudSBjb250ZW50cywgbGV0IHRoZSBicm93c2VyXG4gICAgICogZm9jdXMgYXMgbm9ybWFsIGFuZCBrZWVwIGEgbG9nIG9mIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudC5cbiAgICAgKi9cbiAgICBpZiAodGhpcy5lbC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICB0aGlzLmxhc3RGb2N1cyA9IHRhcmdldDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvKipcbiAgICAgICAqIE90aGVyd2lzZSwgd2UgYXJlIGFib3V0IHRvIGhhdmUgZm9jdXMgZ28gb3V0IG9mIHRoZSBtZW51LlxuICAgICAgICogV3JhcCB0aGUgZm9jdXMgdG8gZWl0aGVyIHRoZSBmaXJzdCBvciBsYXN0IGVsZW1lbnQuXG4gICAgICAgKi9cbiAgICAgIC8qKlxuICAgICAgICogT25jZSB3ZSBjYWxsIGBmb2N1c0ZpcnN0RGVzY2VuZGFudGAsIGFub3RoZXIgZm9jdXMgZXZlbnRcbiAgICAgICAqIHdpbGwgZmlyZSwgd2hpY2ggd2lsbCBjYXVzZSBgbGFzdEZvY3VzYCB0byBiZSB1cGRhdGVkXG4gICAgICAgKiBiZWZvcmUgd2UgY2FuIHJ1biB0aGUgY29kZSBhZnRlciB0aGF0LiBXZSBjYWNoZSB0aGUgdmFsdWVcbiAgICAgICAqIGhlcmUgdG8gYXZvaWQgdGhhdC5cbiAgICAgICAqL1xuICAgICAgdGhpcy5mb2N1c0ZpcnN0RGVzY2VuZGFudCgpO1xuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGUgY2FjaGVkIGxhc3QgZm9jdXNlZCBlbGVtZW50IGlzIHRoZSBzYW1lIGFzIHRoZSBub3ctXG4gICAgICAgKiBhY3RpdmUgZWxlbWVudCwgdGhhdCBtZWFucyB0aGUgdXNlciB3YXMgb24gdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgICAqIGFscmVhZHkgYW5kIHByZXNzZWQgU2hpZnQgKyBUYWIsIHNvIHdlIG5lZWQgdG8gd3JhcCB0byB0aGVcbiAgICAgICAqIGxhc3QgZGVzY2VuZGFudC5cbiAgICAgICAqL1xuICAgICAgaWYgKHRoaXMubGFzdEZvY3VzID09PSBkb2MuYWN0aXZlRWxlbWVudCkge1xuICAgICAgICB0aGlzLmZvY3VzTGFzdERlc2NlbmRhbnQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgYXN5bmMgX3NldE9wZW4oc2hvdWxkT3BlbiwgYW5pbWF0ZWQgPSB0cnVlKSB7XG4gICAgLy8gSWYgdGhlIG1lbnUgaXMgZGlzYWJsZWQgb3IgaXQgaXMgY3VycmVudGx5IGJlaW5nIGFuaW1hdGVkLCBsZXQncyBkbyBub3RoaW5nXG4gICAgaWYgKCF0aGlzLl9pc0FjdGl2ZSgpIHx8IHRoaXMuaXNBbmltYXRpbmcgfHwgc2hvdWxkT3BlbiA9PT0gdGhpcy5faXNPcGVuKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMuYmVmb3JlQW5pbWF0aW9uKHNob3VsZE9wZW4pO1xuICAgIGF3YWl0IHRoaXMubG9hZEFuaW1hdGlvbigpO1xuICAgIGF3YWl0IHRoaXMuc3RhcnRBbmltYXRpb24oc2hvdWxkT3BlbiwgYW5pbWF0ZWQpO1xuICAgIHRoaXMuYWZ0ZXJBbmltYXRpb24oc2hvdWxkT3Blbik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgYXN5bmMgbG9hZEFuaW1hdGlvbigpIHtcbiAgICAvLyBNZW51IHN3aXBlIGFuaW1hdGlvbiB0YWtlcyB0aGUgbWVudSdzIGlubmVyIHdpZHRoIGFzIHBhcmFtZXRlcixcbiAgICAvLyBJZiBgb2Zmc2V0V2lkdGhgIGNoYW5nZXMsIHdlIG5lZWQgdG8gY3JlYXRlIGEgbmV3IGFuaW1hdGlvbi5cbiAgICBjb25zdCB3aWR0aCA9IHRoaXMubWVudUlubmVyRWwub2Zmc2V0V2lkdGg7XG4gICAgaWYgKHdpZHRoID09PSB0aGlzLndpZHRoICYmIHRoaXMuYW5pbWF0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIC8vIERlc3Ryb3kgZXhpc3RpbmcgYW5pbWF0aW9uXG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbi5kZXN0cm95KCk7XG4gICAgICB0aGlzLmFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIG5ldyBhbmltYXRpb25cbiAgICB0aGlzLmFuaW1hdGlvbiA9IGF3YWl0IG1lbnVDb250cm9sbGVyLl9jcmVhdGVBbmltYXRpb24odGhpcy50eXBlLCB0aGlzKTtcbiAgICBpZiAoIWNvbmZpZy5nZXRCb29sZWFuKCdhbmltYXRlZCcsIHRydWUpKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbi5kdXJhdGlvbigwKTtcbiAgICB9XG4gICAgdGhpcy5hbmltYXRpb24uZmlsbCgnYm90aCcpO1xuICB9XG4gIGFzeW5jIHN0YXJ0QW5pbWF0aW9uKHNob3VsZE9wZW4sIGFuaW1hdGVkKSB7XG4gICAgY29uc3QgaXNSZXZlcnNlZCA9ICFzaG91bGRPcGVuO1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IGVhc2luZyA9IG1vZGUgPT09ICdpb3MnID8gaW9zRWFzaW5nIDogbWRFYXNpbmc7XG4gICAgY29uc3QgZWFzaW5nUmV2ZXJzZSA9IG1vZGUgPT09ICdpb3MnID8gaW9zRWFzaW5nUmV2ZXJzZSA6IG1kRWFzaW5nUmV2ZXJzZTtcbiAgICBjb25zdCBhbmkgPSB0aGlzLmFuaW1hdGlvblxuICAgICAgLmRpcmVjdGlvbihpc1JldmVyc2VkID8gJ3JldmVyc2UnIDogJ25vcm1hbCcpXG4gICAgICAuZWFzaW5nKGlzUmV2ZXJzZWQgPyBlYXNpbmdSZXZlcnNlIDogZWFzaW5nKVxuICAgICAgLm9uRmluaXNoKCgpID0+IHtcbiAgICAgIGlmIChhbmkuZ2V0RGlyZWN0aW9uKCkgPT09ICdyZXZlcnNlJykge1xuICAgICAgICBhbmkuZGlyZWN0aW9uKCdub3JtYWwnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoYW5pbWF0ZWQpIHtcbiAgICAgIGF3YWl0IGFuaS5wbGF5KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYW5pLnBsYXkoeyBzeW5jOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxuICBfaXNBY3RpdmUoKSB7XG4gICAgcmV0dXJuICF0aGlzLmRpc2FibGVkICYmICF0aGlzLmlzUGFuZVZpc2libGU7XG4gIH1cbiAgY2FuU3dpcGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3dpcGVHZXN0dXJlICYmICF0aGlzLmlzQW5pbWF0aW5nICYmIHRoaXMuX2lzQWN0aXZlKCk7XG4gIH1cbiAgY2FuU3RhcnQoZGV0YWlsKSB7XG4gICAgLy8gRG8gbm90IGFsbG93IHN3aXBlIGdlc3R1cmUgaWYgYSBtb2RhbCBpcyBvcGVuXG4gICAgY29uc3QgaXNNb2RhbFByZXNlbnRlZCA9ICEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLW1vZGFsLnNob3ctbW9kYWwnKTtcbiAgICBpZiAoaXNNb2RhbFByZXNlbnRlZCB8fCAhdGhpcy5jYW5Td2lwZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pc09wZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBlbHNlIGlmIChtZW51Q29udHJvbGxlci5fZ2V0T3BlblN5bmMoKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gY2hlY2tFZGdlU2lkZSh3aW5kb3csIGRldGFpbC5jdXJyZW50WCwgdGhpcy5pc0VuZFNpZGUsIHRoaXMubWF4RWRnZVN0YXJ0KTtcbiAgfVxuICBvbldpbGxTdGFydCgpIHtcbiAgICB0aGlzLmJlZm9yZUFuaW1hdGlvbighdGhpcy5faXNPcGVuKTtcbiAgICByZXR1cm4gdGhpcy5sb2FkQW5pbWF0aW9uKCk7XG4gIH1cbiAgb25TdGFydCgpIHtcbiAgICBpZiAoIXRoaXMuaXNBbmltYXRpbmcgfHwgIXRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdpc0FuaW1hdGluZyBoYXMgdG8gYmUgdHJ1ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyB0aGUgY2xvbmVkIGFuaW1hdGlvbiBzaG91bGQgbm90IHVzZSBhbiBlYXNpbmcgY3VydmUgZHVyaW5nIHNlZWtcbiAgICB0aGlzLmFuaW1hdGlvbi5wcm9ncmVzc1N0YXJ0KHRydWUsIHRoaXMuX2lzT3BlbiA/IDEgOiAwKTtcbiAgfVxuICBvbk1vdmUoZGV0YWlsKSB7XG4gICAgaWYgKCF0aGlzLmlzQW5pbWF0aW5nIHx8ICF0aGlzLmFuaW1hdGlvbikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnaXNBbmltYXRpbmcgaGFzIHRvIGJlIHRydWUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGVsdGEgPSBjb21wdXRlRGVsdGEoZGV0YWlsLmRlbHRhWCwgdGhpcy5faXNPcGVuLCB0aGlzLmlzRW5kU2lkZSk7XG4gICAgY29uc3Qgc3RlcFZhbHVlID0gZGVsdGEgLyB0aGlzLndpZHRoO1xuICAgIHRoaXMuYW5pbWF0aW9uLnByb2dyZXNzU3RlcCh0aGlzLl9pc09wZW4gPyAxIC0gc3RlcFZhbHVlIDogc3RlcFZhbHVlKTtcbiAgfVxuICBvbkVuZChkZXRhaWwpIHtcbiAgICBpZiAoIXRoaXMuaXNBbmltYXRpbmcgfHwgIXRoaXMuYW5pbWF0aW9uKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdpc0FuaW1hdGluZyBoYXMgdG8gYmUgdHJ1ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpc09wZW4gPSB0aGlzLl9pc09wZW47XG4gICAgY29uc3QgaXNFbmRTaWRlID0gdGhpcy5pc0VuZFNpZGU7XG4gICAgY29uc3QgZGVsdGEgPSBjb21wdXRlRGVsdGEoZGV0YWlsLmRlbHRhWCwgaXNPcGVuLCBpc0VuZFNpZGUpO1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aDtcbiAgICBjb25zdCBzdGVwVmFsdWUgPSBkZWx0YSAvIHdpZHRoO1xuICAgIGNvbnN0IHZlbG9jaXR5ID0gZGV0YWlsLnZlbG9jaXR5WDtcbiAgICBjb25zdCB6ID0gd2lkdGggLyAyLjA7XG4gICAgY29uc3Qgc2hvdWxkQ29tcGxldGVSaWdodCA9IHZlbG9jaXR5ID49IDAgJiYgKHZlbG9jaXR5ID4gMC4yIHx8IGRldGFpbC5kZWx0YVggPiB6KTtcbiAgICBjb25zdCBzaG91bGRDb21wbGV0ZUxlZnQgPSB2ZWxvY2l0eSA8PSAwICYmICh2ZWxvY2l0eSA8IC0wLjIgfHwgZGV0YWlsLmRlbHRhWCA8IC16KTtcbiAgICBjb25zdCBzaG91bGRDb21wbGV0ZSA9IGlzT3BlblxuICAgICAgPyBpc0VuZFNpZGVcbiAgICAgICAgPyBzaG91bGRDb21wbGV0ZVJpZ2h0XG4gICAgICAgIDogc2hvdWxkQ29tcGxldGVMZWZ0XG4gICAgICA6IGlzRW5kU2lkZVxuICAgICAgICA/IHNob3VsZENvbXBsZXRlTGVmdFxuICAgICAgICA6IHNob3VsZENvbXBsZXRlUmlnaHQ7XG4gICAgbGV0IHNob3VsZE9wZW4gPSAhaXNPcGVuICYmIHNob3VsZENvbXBsZXRlO1xuICAgIGlmIChpc09wZW4gJiYgIXNob3VsZENvbXBsZXRlKSB7XG4gICAgICBzaG91bGRPcGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5sYXN0T25FbmQgPSBkZXRhaWwuY3VycmVudFRpbWU7XG4gICAgLy8gQWNjb3VudCBmb3Igcm91bmRpbmcgZXJyb3JzIGluIEpTXG4gICAgbGV0IG5ld1N0ZXBWYWx1ZSA9IHNob3VsZENvbXBsZXRlID8gMC4wMDEgOiAtMC4wMDE7XG4gICAgLyoqXG4gICAgICogc3RlcFZhbHVlIGNhbiBzb21ldGltZXMgcmV0dXJuIGEgbmVnYXRpdmVcbiAgICAgKiB2YWx1ZSwgYnV0IHlvdSBjYW4ndCBoYXZlIGEgbmVnYXRpdmUgdGltZSB2YWx1ZVxuICAgICAqIGZvciB0aGUgY3ViaWMgYmV6aWVyIGN1cnZlIChhdCBsZWFzdCB3aXRoIHdlYiBhbmltYXRpb25zKVxuICAgICAqL1xuICAgIGNvbnN0IGFkanVzdGVkU3RlcFZhbHVlID0gc3RlcFZhbHVlIDwgMCA/IDAuMDEgOiBzdGVwVmFsdWU7XG4gICAgLyoqXG4gICAgICogQW5pbWF0aW9uIHdpbGwgYmUgcmV2ZXJzZWQgaGVyZSwgc28gbmVlZCB0b1xuICAgICAqIHJldmVyc2UgdGhlIGVhc2luZyBjdXJ2ZSBhcyB3ZWxsXG4gICAgICpcbiAgICAgKiBBZGRpdGlvbmFsbHksIHdlIG5lZWQgdG8gYWNjb3VudCBmb3IgdGhlIHRpbWUgcmVsYXRpdmVcbiAgICAgKiB0byB0aGUgbmV3IGVhc2luZyBjdXJ2ZSwgYXMgYHN0ZXBWYWx1ZWAgaXMgZ29pbmcgdG8gYmUgZ2l2ZW5cbiAgICAgKiBpbiB0ZXJtcyBvZiBhIGxpbmVhciBjdXJ2ZS5cbiAgICAgKi9cbiAgICBuZXdTdGVwVmFsdWUgKz1cbiAgICAgIGdldFRpbWVHaXZlblByb2dyZXNzaW9uKFswLCAwXSwgWzAuNCwgMF0sIFswLjYsIDFdLCBbMSwgMV0sIGNsYW1wKDAsIGFkanVzdGVkU3RlcFZhbHVlLCAwLjk5OTkpKVswXSB8fCAwO1xuICAgIGNvbnN0IHBsYXlUbyA9IHRoaXMuX2lzT3BlbiA/ICFzaG91bGRDb21wbGV0ZSA6IHNob3VsZENvbXBsZXRlO1xuICAgIHRoaXMuYW5pbWF0aW9uXG4gICAgICAuZWFzaW5nKCdjdWJpYy1iZXppZXIoMC40LCAwLjAsIDAuNiwgMSknKVxuICAgICAgLm9uRmluaXNoKCgpID0+IHRoaXMuYWZ0ZXJBbmltYXRpb24oc2hvdWxkT3BlbiksIHsgb25lVGltZUNhbGxiYWNrOiB0cnVlIH0pXG4gICAgICAucHJvZ3Jlc3NFbmQocGxheVRvID8gMSA6IDAsIHRoaXMuX2lzT3BlbiA/IDEgLSBuZXdTdGVwVmFsdWUgOiBuZXdTdGVwVmFsdWUsIDMwMCk7XG4gIH1cbiAgYmVmb3JlQW5pbWF0aW9uKHNob3VsZE9wZW4pIHtcbiAgICBhc3NlcnQoIXRoaXMuaXNBbmltYXRpbmcsICdfYmVmb3JlKCkgc2hvdWxkIG5vdCBiZSBjYWxsZWQgd2hpbGUgYW5pbWF0aW5nJyk7XG4gICAgLy8gdGhpcyBwbGFjZXMgdGhlIG1lbnUgaW50byB0aGUgY29ycmVjdCBsb2NhdGlvbiBiZWZvcmUgaXQgYW5pbWF0ZXMgaW5cbiAgICAvLyB0aGlzIGNzcyBjbGFzcyBkb2Vzbid0IGFjdHVhbGx5IGtpY2sgb2ZmIGFueSBhbmltYXRpb25zXG4gICAgdGhpcy5lbC5jbGFzc0xpc3QuYWRkKFNIT1dfTUVOVSk7XG4gICAgLyoqXG4gICAgICogV2UgYWRkIGEgdGFiaW5kZXggaGVyZSBzbyB0aGF0IGZvY3VzIHRyYXBwaW5nXG4gICAgICogc3RpbGwgd29ya3MgZXZlbiBpZiB0aGUgbWVudSBkb2VzIG5vdCBoYXZlXG4gICAgICogYW55IGZvY3VzYWJsZSBlbGVtZW50cyBzbG90dGVkIGluc2lkZS4gVGhlXG4gICAgICogZm9jdXMgdHJhcHBpbmcgdXRpbGl0eSB3aWxsIGZhbGxiYWNrIHRvIGZvY3VzaW5nXG4gICAgICogdGhlIG1lbnUgc28gZm9jdXMgZG9lcyBub3QgbGVhdmUgd2hlbiB0aGUgbWVudVxuICAgICAqIGlzIG9wZW4uXG4gICAgICovXG4gICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICBpZiAodGhpcy5iYWNrZHJvcEVsKSB7XG4gICAgICB0aGlzLmJhY2tkcm9wRWwuY2xhc3NMaXN0LmFkZChTSE9XX0JBQ0tEUk9QKTtcbiAgICB9XG4gICAgLy8gYWRkIGNzcyBjbGFzcyBhbmQgaGlkZSBjb250ZW50IGJlaGluZCBtZW51IGZyb20gc2NyZWVuIHJlYWRlcnNcbiAgICBpZiAodGhpcy5jb250ZW50RWwpIHtcbiAgICAgIHRoaXMuY29udGVudEVsLmNsYXNzTGlzdC5hZGQoTUVOVV9DT05URU5UX09QRU4pO1xuICAgICAgLyoqXG4gICAgICAgKiBXaGVuIHRoZSBtZW51IGlzIG9wZW4gYW5kIG92ZXJsYXlpbmcgdGhlIG1haW5cbiAgICAgICAqIGNvbnRlbnQsIHRoZSBtYWluIGNvbnRlbnQgc2hvdWxkIG5vdCBiZSBhbm5vdW5jZWRcbiAgICAgICAqIGJ5IHRoZSBzY3JlZW5yZWFkZXIgYXMgdGhlIG1lbnUgaXMgdGhlIG1haW5cbiAgICAgICAqIGZvY3VzLiBUaGlzIGlzIHVzZWZ1bCB3aXRoIHNjcmVlbnJlYWRlcnMgdGhhdCBoYXZlXG4gICAgICAgKiBcInJlYWQgZnJvbSB0b3BcIiBnZXN0dXJlcyB0aGF0IHJlYWQgdGhlIGVudGlyZVxuICAgICAgICogcGFnZSBmcm9tIHRvcCB0byBib3R0b20gd2hlbiBhY3RpdmF0ZWQuXG4gICAgICAgKiBUaGlzIHNob3VsZCBiZSBkb25lIGJlZm9yZSB0aGUgYW5pbWF0aW9uIHN0YXJ0c1xuICAgICAgICogc28gdGhhdCB1c2VycyBjYW5ub3QgYWNjaWRlbnRhbGx5IHNjcm9sbFxuICAgICAgICogdGhlIGNvbnRlbnQgd2hpbGUgZHJhZ2dpbmcgYSBtZW51IG9wZW4uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuY29udGVudEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgIH1cbiAgICB0aGlzLmJsb2NrZXIuYmxvY2soKTtcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoc2hvdWxkT3Blbikge1xuICAgICAgdGhpcy5pb25XaWxsT3Blbi5lbWl0KCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5pb25XaWxsQ2xvc2UuZW1pdCgpO1xuICAgIH1cbiAgfVxuICBhZnRlckFuaW1hdGlvbihpc09wZW4pIHtcbiAgICB2YXIgX2E7XG4gICAgYXNzZXJ0KHRoaXMuaXNBbmltYXRpbmcsICdfYmVmb3JlKCkgc2hvdWxkIGJlIGNhbGxlZCB3aGlsZSBhbmltYXRpbmcnKTtcbiAgICAvLyBrZWVwIG9wZW5pbmcvY2xvc2luZyB0aGUgbWVudSBkaXNhYmxlZCBmb3IgYSB0b3VjaCBtb3JlIHlldFxuICAgIC8vIG9ubHkgYWRkIGxpc3RlbmVycy9jc3MgaWYgaXQncyBlbmFibGVkIGFuZCBpc09wZW5cbiAgICAvLyBhbmQgb25seSByZW1vdmUgbGlzdGVuZXJzL2NzcyBpZiBpdCdzIG5vdCBvcGVuXG4gICAgLy8gZW1pdCBvcGVuZWQvY2xvc2VkIGV2ZW50c1xuICAgIHRoaXMuX2lzT3BlbiA9IGlzT3BlbjtcbiAgICB0aGlzLmlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgaWYgKCF0aGlzLl9pc09wZW4pIHtcbiAgICAgIHRoaXMuYmxvY2tlci51bmJsb2NrKCk7XG4gICAgfVxuICAgIGlmIChpc09wZW4pIHtcbiAgICAgIC8vIGVtaXQgb3BlbiBldmVudFxuICAgICAgdGhpcy5pb25EaWRPcGVuLmVtaXQoKTtcbiAgICAgIC8qKlxuICAgICAgICogTW92ZSBmb2N1cyB0byB0aGUgbWVudSB0byBwcmVwYXJlIGZvY3VzIHRyYXBwaW5nLCBhcyBsb25nIGFzXG4gICAgICAgKiBpdCBpc24ndCBhbHJlYWR5IGZvY3VzZWQuIFVzZSB0aGUgaG9zdCBlbGVtZW50IGluc3RlYWQgb2YgdGhlXG4gICAgICAgKiBmaXJzdCBkZXNjZW5kYW50IHRvIGF2b2lkIHRoZSBzY3JvbGwgcG9zaXRpb24ganVtcGluZyBhcm91bmQuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGZvY3VzZWRNZW51ID0gKF9hID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsb3Nlc3QoJ2lvbi1tZW51Jyk7XG4gICAgICBpZiAoZm9jdXNlZE1lbnUgIT09IHRoaXMuZWwpIHtcbiAgICAgICAgdGhpcy5lbC5mb2N1cygpO1xuICAgICAgfVxuICAgICAgLy8gc3RhcnQgZm9jdXMgdHJhcHBpbmdcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLy8gcmVtb3ZlIGNzcyBjbGFzc2VzIGFuZCB1bmhpZGUgY29udGVudCBmcm9tIHNjcmVlbiByZWFkZXJzXG4gICAgICB0aGlzLmVsLmNsYXNzTGlzdC5yZW1vdmUoU0hPV19NRU5VKTtcbiAgICAgIC8qKlxuICAgICAgICogUmVtb3ZlIHRhYmluZGV4IGZyb20gdGhlIG1lbnUgY29tcG9uZW50XG4gICAgICAgKiBzbyB0aGF0IGlzIGNhbm5vdCBiZSB0YWJiZWQgdG8uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZWwucmVtb3ZlQXR0cmlidXRlKCd0YWJpbmRleCcpO1xuICAgICAgaWYgKHRoaXMuY29udGVudEVsKSB7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNsYXNzTGlzdC5yZW1vdmUoTUVOVV9DT05URU5UX09QRU4pO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVtb3ZlIGFyaWEtaGlkZGVuIHNvIHNjcmVlbiByZWFkZXJzXG4gICAgICAgICAqIGNhbiBhbm5vdW5jZSB0aGUgbWFpbiBjb250ZW50IGFnYWluXG4gICAgICAgICAqIG5vdyB0aGF0IHRoZSBtZW51IGlzIG5vdCB0aGUgbWFpbiBmb2N1cy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29udGVudEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmJhY2tkcm9wRWwpIHtcbiAgICAgICAgdGhpcy5iYWNrZHJvcEVsLmNsYXNzTGlzdC5yZW1vdmUoU0hPV19CQUNLRFJPUCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb24uc3RvcCgpO1xuICAgICAgfVxuICAgICAgLy8gZW1pdCBjbG9zZSBldmVudFxuICAgICAgdGhpcy5pb25EaWRDbG9zZS5lbWl0KCk7XG4gICAgICAvLyB1bmRvIGZvY3VzIHRyYXBwaW5nIHNvIG11bHRpcGxlIG1lbnVzIGRvbid0IGNvbGxpZGVcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIHVwZGF0ZVN0YXRlKCkge1xuICAgIGNvbnN0IGlzQWN0aXZlID0gdGhpcy5faXNBY3RpdmUoKTtcbiAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICB0aGlzLmdlc3R1cmUuZW5hYmxlKGlzQWN0aXZlICYmIHRoaXMuc3dpcGVHZXN0dXJlKTtcbiAgICB9XG4gICAgLy8gQ2xvc2UgbWVudSBpbW1lZGlhdGVseVxuICAgIGlmICghaXNBY3RpdmUgJiYgdGhpcy5faXNPcGVuKSB7XG4gICAgICAvLyBjbG9zZSBpZiB0aGlzIG1lbnUgaXMgb3BlbiwgYW5kIHNob3VsZCBub3QgYmUgZW5hYmxlZFxuICAgICAgdGhpcy5mb3JjZUNsb3NpbmcoKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkKSB7XG4gICAgICBtZW51Q29udHJvbGxlci5fc2V0QWN0aXZlTWVudSh0aGlzKTtcbiAgICB9XG4gICAgYXNzZXJ0KCF0aGlzLmlzQW5pbWF0aW5nLCAnY2FuIG5vdCBiZSBhbmltYXRpbmcnKTtcbiAgfVxuICBmb3JjZUNsb3NpbmcoKSB7XG4gICAgYXNzZXJ0KHRoaXMuX2lzT3BlbiwgJ21lbnUgY2Fubm90IGJlIGNsb3NlZCcpO1xuICAgIHRoaXMuaXNBbmltYXRpbmcgPSB0cnVlO1xuICAgIGNvbnN0IGFuaSA9IHRoaXMuYW5pbWF0aW9uLmRpcmVjdGlvbigncmV2ZXJzZScpO1xuICAgIGFuaS5wbGF5KHsgc3luYzogdHJ1ZSB9KTtcbiAgICB0aGlzLmFmdGVyQW5pbWF0aW9uKGZhbHNlKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBpc0VuZFNpZGUsIHR5cGUsIGRpc2FibGVkLCBpc1BhbmVWaXNpYmxlLCBpbmhlcml0ZWRBdHRyaWJ1dGVzIH0gPSB0aGlzO1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IHJvbGU6IFwibmF2aWdhdGlvblwiLCBcImFyaWEtbGFiZWxcIjogaW5oZXJpdGVkQXR0cmlidXRlc1snYXJpYS1sYWJlbCddIHx8ICdtZW51JywgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICBbYG1lbnUtdHlwZS0ke3R5cGV9YF06IHRydWUsXG4gICAgICAgICdtZW51LWVuYWJsZWQnOiAhZGlzYWJsZWQsXG4gICAgICAgICdtZW51LXNpZGUtZW5kJzogaXNFbmRTaWRlLFxuICAgICAgICAnbWVudS1zaWRlLXN0YXJ0JzogIWlzRW5kU2lkZSxcbiAgICAgICAgJ21lbnUtcGFuZS12aXNpYmxlJzogaXNQYW5lVmlzaWJsZSxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IGNsYXNzOiBcIm1lbnUtaW5uZXJcIiwgcGFydDogXCJjb250YWluZXJcIiwgcmVmOiAoZWwpID0+ICh0aGlzLm1lbnVJbm5lckVsID0gZWwpIH0sIGgoXCJzbG90XCIsIG51bGwpKSwgaChcImlvbi1iYWNrZHJvcFwiLCB7IHJlZjogKGVsKSA9PiAodGhpcy5iYWNrZHJvcEVsID0gZWwpLCBjbGFzczogXCJtZW51LWJhY2tkcm9wXCIsIHRhcHBhYmxlOiBmYWxzZSwgc3RvcFByb3BhZ2F0aW9uOiBmYWxzZSwgcGFydDogXCJiYWNrZHJvcFwiIH0pKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwidHlwZVwiOiBbXCJ0eXBlQ2hhbmdlZFwiXSxcbiAgICBcImRpc2FibGVkXCI6IFtcImRpc2FibGVkQ2hhbmdlZFwiXSxcbiAgICBcInNpZGVcIjogW1wic2lkZUNoYW5nZWRcIl0sXG4gICAgXCJzd2lwZUdlc3R1cmVcIjogW1wic3dpcGVHZXN0dXJlQ2hhbmdlZFwiXVxuICB9OyB9XG59O1xuY29uc3QgY29tcHV0ZURlbHRhID0gKGRlbHRhWCwgaXNPcGVuLCBpc0VuZFNpZGUpID0+IHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIGlzT3BlbiAhPT0gaXNFbmRTaWRlID8gLWRlbHRhWCA6IGRlbHRhWCk7XG59O1xuY29uc3QgY2hlY2tFZGdlU2lkZSA9ICh3aW4sIHBvc1gsIGlzRW5kU2lkZSwgbWF4RWRnZVN0YXJ0KSA9PiB7XG4gIGlmIChpc0VuZFNpZGUpIHtcbiAgICByZXR1cm4gcG9zWCA+PSB3aW4uaW5uZXJXaWR0aCAtIG1heEVkZ2VTdGFydDtcbiAgfVxuICBlbHNlIHtcbiAgICByZXR1cm4gcG9zWCA8PSBtYXhFZGdlU3RhcnQ7XG4gIH1cbn07XG5jb25zdCBTSE9XX01FTlUgPSAnc2hvdy1tZW51JztcbmNvbnN0IFNIT1dfQkFDS0RST1AgPSAnc2hvdy1iYWNrZHJvcCc7XG5jb25zdCBNRU5VX0NPTlRFTlRfT1BFTiA9ICdtZW51LWNvbnRlbnQtb3Blbic7XG5NZW51LnN0eWxlID0ge1xuICBpb3M6IG1lbnVJb3NDc3MsXG4gIG1kOiBtZW51TWRDc3Ncbn07XG5cbi8vIEdpdmVuIGEgbWVudSwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IHRoZSBtZW51IHRvZ2dsZSBzaG91bGQgYmUgdmlzaWJsZVxuY29uc3QgdXBkYXRlVmlzaWJpbGl0eSA9IGFzeW5jIChtZW51KSA9PiB7XG4gIGNvbnN0IG1lbnVFbCA9IGF3YWl0IG1lbnVDb250cm9sbGVyLmdldChtZW51KTtcbiAgcmV0dXJuICEhKG1lbnVFbCAmJiAoYXdhaXQgbWVudUVsLmlzQWN0aXZlKCkpKTtcbn07XG5cbmNvbnN0IG1lbnVCdXR0b25Jb3NDc3MgPSBcIjpob3N0ey0tYmFja2dyb3VuZDp0cmFuc3BhcmVudDstLWNvbG9yLWZvY3VzZWQ6Y3VycmVudENvbG9yOy0tYm9yZGVyLXJhZGl1czppbml0aWFsOy0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctYm90dG9tOjA7Y29sb3I6dmFyKC0tY29sb3IpO3RleHQtYWxpZ246Y2VudGVyO3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7dGV4dC10cmFuc2Zvcm06bm9uZTt3aGl0ZS1zcGFjZTpub3dyYXA7LXdlYmtpdC1mb250LWtlcm5pbmc6bm9uZTtmb250LWtlcm5pbmc6bm9uZX0uYnV0dG9uLW5hdGl2ZXtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOmluaGVyaXQ7Zm9udC1zdHlsZTppbmhlcml0O2ZvbnQtd2VpZ2h0OmluaGVyaXQ7bGV0dGVyLXNwYWNpbmc6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWluZGVudDppbmhlcml0O3RleHQtb3ZlcmZsb3c6aW5oZXJpdDt0ZXh0LXRyYW5zZm9ybTppbmhlcml0O3RleHQtYWxpZ246aW5oZXJpdDt3aGl0ZS1zcGFjZTppbmhlcml0O2NvbG9yOmluaGVyaXQ7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3BhZGRpbmctbGVmdDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLXJpZ2h0OnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLXRvcDp2YXIoLS1wYWRkaW5nLXRvcCk7cGFkZGluZy1ib3R0b206dmFyKC0tcGFkZGluZy1ib3R0b20pOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjA7b3V0bGluZTpub25lO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7bGluZS1oZWlnaHQ6MTtjdXJzb3I6cG9pbnRlcjtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO3otaW5kZXg6MDstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmV9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXsuYnV0dG9uLW5hdGl2ZXtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7LXdlYmtpdC1wYWRkaW5nLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy1pbmxpbmUtZW5kOnZhcigtLXBhZGRpbmctZW5kKX19LmJ1dHRvbi1pbm5lcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1mbG93OnJvdyBub3dyYXA7ZmxleC1mbG93OnJvdyBub3dyYXA7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3otaW5kZXg6MX1pb24taWNvbnttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowO3BhZGRpbmctdG9wOjA7cGFkZGluZy1ib3R0b206MDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5tZW51LWJ1dHRvbi1oaWRkZW4pe2Rpc3BsYXk6bm9uZX06aG9zdCgubWVudS1idXR0b24tZGlzYWJsZWQpe2N1cnNvcjpkZWZhdWx0O29wYWNpdHk6MC41O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1mb2N1c2VkKX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtZm9jdXNlZCk7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eSl9LmJ1dHRvbi1uYXRpdmU6OmFmdGVye2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XFxcIlxcXCI7b3BhY2l0eTowfUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1ob3Zlcil9Omhvc3QoOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eSwgMCl9fTpob3N0KC5pb24tY29sb3IpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCguaW4tdG9vbGJhcjpub3QoLmluLXRvb2xiYXItY29sb3IpKXtjb2xvcjp2YXIoLS1pb24tdG9vbGJhci1jb2xvciwgdmFyKC0tY29sb3IpKX06aG9zdHstLWJhY2tncm91bmQtZm9jdXNlZDpjdXJyZW50Q29sb3I7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTouMTstLWJvcmRlci1yYWRpdXM6NHB4Oy0tY29sb3I6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMzODgwZmYpOy0tcGFkZGluZy1zdGFydDo1cHg7LS1wYWRkaW5nLWVuZDo1cHg7aGVpZ2h0OjMycHg7Zm9udC1zaXplOjMxcHh9Omhvc3QoLmlvbi1hY3RpdmF0ZWQpe29wYWNpdHk6MC40fUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoOmhvdmVyKXtvcGFjaXR5OjAuNn19XCI7XG5cbmNvbnN0IG1lbnVCdXR0b25NZENzcyA9IFwiOmhvc3R7LS1iYWNrZ3JvdW5kOnRyYW5zcGFyZW50Oy0tY29sb3ItZm9jdXNlZDpjdXJyZW50Q29sb3I7LS1ib3JkZXItcmFkaXVzOmluaXRpYWw7LS1wYWRkaW5nLXRvcDowOy0tcGFkZGluZy1ib3R0b206MDtjb2xvcjp2YXIoLS1jb2xvcik7dGV4dC1hbGlnbjpjZW50ZXI7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt0ZXh0LXRyYW5zZm9ybTpub25lO3doaXRlLXNwYWNlOm5vd3JhcDstd2Via2l0LWZvbnQta2VybmluZzpub25lO2ZvbnQta2VybmluZzpub25lfS5idXR0b24tbmF0aXZle2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Zm9udC1mYW1pbHk6aW5oZXJpdDtmb250LXNpemU6aW5oZXJpdDtmb250LXN0eWxlOmluaGVyaXQ7Zm9udC13ZWlnaHQ6aW5oZXJpdDtsZXR0ZXItc3BhY2luZzppbmhlcml0O3RleHQtZGVjb3JhdGlvbjppbmhlcml0O3RleHQtaW5kZW50OmluaGVyaXQ7dGV4dC1vdmVyZmxvdzppbmhlcml0O3RleHQtdHJhbnNmb3JtOmluaGVyaXQ7dGV4dC1hbGlnbjppbmhlcml0O3doaXRlLXNwYWNlOmluaGVyaXQ7Y29sb3I6aW5oZXJpdDttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7cGFkZGluZy1sZWZ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctcmlnaHQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctdG9wOnZhcigtLXBhZGRpbmctdG9wKTtwYWRkaW5nLWJvdHRvbTp2YXIoLS1wYWRkaW5nLWJvdHRvbSk7LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6Z3JheXNjYWxlOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZmxvdzpyb3cgbm93cmFwO2ZsZXgtZmxvdzpyb3cgbm93cmFwOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6MDtvdXRsaW5lOm5vbmU7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtsaW5lLWhlaWdodDoxO2N1cnNvcjpwb2ludGVyO292ZXJmbG93OmhpZGRlbjstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lOy1tcy11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmU7ei1pbmRleDowOy13ZWJraXQtYXBwZWFyYW5jZTpub25lOy1tb3otYXBwZWFyYW5jZTpub25lO2FwcGVhcmFuY2U6bm9uZX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5idXR0b24tbmF0aXZle3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLWlubGluZS1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpfX0uYnV0dG9uLWlubmVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWZsb3c6cm93IG5vd3JhcDtmbGV4LWZsb3c6cm93IG5vd3JhcDstbXMtZmxleC1uZWdhdGl2ZTowO2ZsZXgtc2hyaW5rOjA7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoxfWlvbi1pY29ue21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXJpZ2h0OjA7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTowO3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLm1lbnUtYnV0dG9uLWhpZGRlbil7ZGlzcGxheTpub25lfTpob3N0KC5tZW51LWJ1dHRvbi1kaXNhYmxlZCl7Y3Vyc29yOmRlZmF1bHQ7b3BhY2l0eTowLjU7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWZvY3VzZWQpfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1mb2N1c2VkKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtZm9jdXNlZC1vcGFjaXR5KX0uYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXFwiXFxcIjtvcGFjaXR5OjB9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWhvdmVyKX06aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtaG92ZXIpO29wYWNpdHk6dmFyKC0tYmFja2dyb3VuZC1ob3Zlci1vcGFjaXR5LCAwKX19Omhvc3QoLmlvbi1jb2xvcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tdG9vbGJhci1jb2xvcikpe2NvbG9yOnZhcigtLWlvbi10b29sYmFyLWNvbG9yLCB2YXIoLS1jb2xvcikpfTpob3N0ey0tYmFja2dyb3VuZC1mb2N1c2VkOmN1cnJlbnRDb2xvcjstLWJhY2tncm91bmQtZm9jdXNlZC1vcGFjaXR5Oi4xMjstLWJhY2tncm91bmQtaG92ZXI6Y3VycmVudENvbG9yOy0tYmFja2dyb3VuZC1ob3Zlci1vcGFjaXR5Oi4wNDstLWJvcmRlci1yYWRpdXM6NTAlOy0tY29sb3I6aW5pdGlhbDstLXBhZGRpbmctc3RhcnQ6OHB4Oy0tcGFkZGluZy1lbmQ6OHB4O3dpZHRoOjQ4cHg7aGVpZ2h0OjQ4cHg7Zm9udC1zaXplOjI0cHh9Omhvc3QoLmlvbi1jb2xvci5pb24tZm9jdXNlZCk6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoLmlvbi1jb2xvcjpob3ZlcikgLmJ1dHRvbi1uYXRpdmU6OmFmdGVye2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfX1cIjtcblxuY29uc3QgTWVudUJ1dHRvbiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzID0ge307XG4gICAgdGhpcy5vbkNsaWNrID0gYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLnRvZ2dsZSh0aGlzLm1lbnUpO1xuICAgIH07XG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5jb2xvciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgdGhpcy5tZW51ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYXV0b0hpZGUgPSB0cnVlO1xuICAgIHRoaXMudHlwZSA9ICdidXR0b24nO1xuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuaW5oZXJpdGVkQXR0cmlidXRlcyA9IGluaGVyaXRBcmlhQXR0cmlidXRlcyh0aGlzLmVsKTtcbiAgfVxuICBjb21wb25lbnREaWRMb2FkKCkge1xuICAgIHRoaXMudmlzaWJpbGl0eUNoYW5nZWQoKTtcbiAgfVxuICBhc3luYyB2aXNpYmlsaXR5Q2hhbmdlZCgpIHtcbiAgICB0aGlzLnZpc2libGUgPSBhd2FpdCB1cGRhdGVWaXNpYmlsaXR5KHRoaXMubWVudSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29sb3IsIGRpc2FibGVkLCBpbmhlcml0ZWRBdHRyaWJ1dGVzIH0gPSB0aGlzO1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IG1lbnVJY29uID0gY29uZmlnLmdldCgnbWVudUljb24nLCBtb2RlID09PSAnaW9zJyA/IG1lbnVPdXRsaW5lIDogbWVudVNoYXJwKTtcbiAgICBjb25zdCBoaWRkZW4gPSB0aGlzLmF1dG9IaWRlICYmICF0aGlzLnZpc2libGU7XG4gICAgY29uc3QgYXR0cnMgPSB7XG4gICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgfTtcbiAgICBjb25zdCBhcmlhTGFiZWwgPSBpbmhlcml0ZWRBdHRyaWJ1dGVzWydhcmlhLWxhYmVsJ10gfHwgJ21lbnUnO1xuICAgIHJldHVybiAoaChIb3N0LCB7IG9uQ2xpY2s6IHRoaXMub25DbGljaywgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVkID8gJ3RydWUnIDogbnVsbCwgXCJhcmlhLWhpZGRlblwiOiBoaWRkZW4gPyAndHJ1ZScgOiBudWxsLCBjbGFzczogY3JlYXRlQ29sb3JDbGFzc2VzKGNvbG9yLCB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgYnV0dG9uOiB0cnVlLFxuICAgICAgICAnbWVudS1idXR0b24taGlkZGVuJzogaGlkZGVuLFxuICAgICAgICAnbWVudS1idXR0b24tZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgJ2luLXRvb2xiYXInOiBob3N0Q29udGV4dCgnaW9uLXRvb2xiYXInLCB0aGlzLmVsKSxcbiAgICAgICAgJ2luLXRvb2xiYXItY29sb3InOiBob3N0Q29udGV4dCgnaW9uLXRvb2xiYXJbY29sb3JdJywgdGhpcy5lbCksXG4gICAgICAgICdpb24tYWN0aXZhdGFibGUnOiB0cnVlLFxuICAgICAgICAnaW9uLWZvY3VzYWJsZSc6IHRydWUsXG4gICAgICB9KSB9LCBoKFwiYnV0dG9uXCIsIE9iamVjdC5hc3NpZ24oe30sIGF0dHJzLCB7IGRpc2FibGVkOiBkaXNhYmxlZCwgY2xhc3M6IFwiYnV0dG9uLW5hdGl2ZVwiLCBwYXJ0OiBcIm5hdGl2ZVwiLCBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsIH0pLCBoKFwic3BhblwiLCB7IGNsYXNzOiBcImJ1dHRvbi1pbm5lclwiIH0sIGgoXCJzbG90XCIsIG51bGwsIGgoXCJpb24taWNvblwiLCB7IHBhcnQ6IFwiaWNvblwiLCBpY29uOiBtZW51SWNvbiwgbW9kZTogbW9kZSwgbGF6eTogZmFsc2UsIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfSkpKSwgbW9kZSA9PT0gJ21kJyAmJiBoKFwiaW9uLXJpcHBsZS1lZmZlY3RcIiwgeyB0eXBlOiBcInVuYm91bmRlZFwiIH0pKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5NZW51QnV0dG9uLnN0eWxlID0ge1xuICBpb3M6IG1lbnVCdXR0b25Jb3NDc3MsXG4gIG1kOiBtZW51QnV0dG9uTWRDc3Ncbn07XG5cbmNvbnN0IG1lbnVUb2dnbGVDc3MgPSBcIjpob3N0KC5tZW51LXRvZ2dsZS1oaWRkZW4pe2Rpc3BsYXk6bm9uZX1cIjtcblxuY29uc3QgTWVudVRvZ2dsZSA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5vbkNsaWNrID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIG1lbnVDb250cm9sbGVyLnRvZ2dsZSh0aGlzLm1lbnUpO1xuICAgIH07XG4gICAgdGhpcy52aXNpYmxlID0gZmFsc2U7XG4gICAgdGhpcy5tZW51ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYXV0b0hpZGUgPSB0cnVlO1xuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMudmlzaWJpbGl0eUNoYW5nZWQoKTtcbiAgfVxuICBhc3luYyB2aXNpYmlsaXR5Q2hhbmdlZCgpIHtcbiAgICB0aGlzLnZpc2libGUgPSBhd2FpdCB1cGRhdGVWaXNpYmlsaXR5KHRoaXMubWVudSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IGhpZGRlbiA9IHRoaXMuYXV0b0hpZGUgJiYgIXRoaXMudmlzaWJsZTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBvbkNsaWNrOiB0aGlzLm9uQ2xpY2ssIFwiYXJpYS1oaWRkZW5cIjogaGlkZGVuID8gJ3RydWUnIDogbnVsbCwgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAnbWVudS10b2dnbGUtaGlkZGVuJzogaGlkZGVuLFxuICAgICAgfSB9LCBoKFwic2xvdFwiLCBudWxsKSkpO1xuICB9XG59O1xuTWVudVRvZ2dsZS5zdHlsZSA9IG1lbnVUb2dnbGVDc3M7XG5cbmV4cG9ydCB7IE1lbnUgYXMgaW9uX21lbnUsIE1lbnVCdXR0b24gYXMgaW9uX21lbnVfYnV0dG9uLCBNZW51VG9nZ2xlIGFzIGlvbl9tZW51X3RvZ2dsZSB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmNvbnN0IGhvc3RDb250ZXh0ID0gKHNlbGVjdG9yLCBlbCkgPT4ge1xuICByZXR1cm4gZWwuY2xvc2VzdChzZWxlY3RvcikgIT09IG51bGw7XG59O1xuLyoqXG4gKiBDcmVhdGUgdGhlIG1vZGUgYW5kIGNvbG9yIGNsYXNzZXMgZm9yIHRoZSBjb21wb25lbnQgYmFzZWQgb24gdGhlIGNsYXNzZXMgcGFzc2VkIGluXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbG9yQ2xhc3NlcyA9IChjb2xvciwgY3NzQ2xhc3NNYXApID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgY29sb3IubGVuZ3RoID4gMFxuICAgID8gT2JqZWN0LmFzc2lnbih7ICdpb24tY29sb3InOiB0cnVlLCBbYGlvbi1jb2xvci0ke2NvbG9yfWBdOiB0cnVlIH0sIGNzc0NsYXNzTWFwKSA6IGNzc0NsYXNzTWFwO1xufTtcbmNvbnN0IGdldENsYXNzTGlzdCA9IChjbGFzc2VzKSA9PiB7XG4gIGlmIChjbGFzc2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIHJldHVybiBhcnJheVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPSBudWxsKVxuICAgICAgLm1hcCgoYykgPT4gYy50cmltKCkpXG4gICAgICAuZmlsdGVyKChjKSA9PiBjICE9PSAnJyk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcbmNvbnN0IGdldENsYXNzTWFwID0gKGNsYXNzZXMpID0+IHtcbiAgY29uc3QgbWFwID0ge307XG4gIGdldENsYXNzTGlzdChjbGFzc2VzKS5mb3JFYWNoKChjKSA9PiAobWFwW2NdID0gdHJ1ZSkpO1xuICByZXR1cm4gbWFwO1xufTtcbmNvbnN0IFNDSEVNRSA9IC9eW2Etel1bYS16MC05K1xcLS5dKjovO1xuY29uc3Qgb3BlblVSTCA9IGFzeW5jICh1cmwsIGV2LCBkaXJlY3Rpb24sIGFuaW1hdGlvbikgPT4ge1xuICBpZiAodXJsICE9IG51bGwgJiYgdXJsWzBdICE9PSAnIycgJiYgIVNDSEVNRS50ZXN0KHVybCkpIHtcbiAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgaWYgKHJvdXRlcikge1xuICAgICAgaWYgKGV2ICE9IG51bGwpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3V0ZXIucHVzaCh1cmwsIGRpcmVjdGlvbiwgYW5pbWF0aW9uKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ29sb3JDbGFzc2VzIGFzIGMsIGdldENsYXNzTWFwIGFzIGcsIGhvc3RDb250ZXh0IGFzIGgsIG9wZW5VUkwgYXMgbyB9O1xuIl0sIm5hbWVzIjpbInIiLCJyZWdpc3Rlckluc3RhbmNlIiwiZCIsImNyZWF0ZUV2ZW50IiwiaCIsIkgiLCJIb3N0IiwiZiIsImdldEVsZW1lbnQiLCJjIiwiY29uZmlnIiwiYiIsImdldElvbk1vZGUiLCJnIiwiZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24iLCJHIiwiR0VTVFVSRV9DT05UUk9MTEVSIiwicSIsImlzRW5kU2lkZSIsImkiLCJpbmhlcml0QXJpYUF0dHJpYnV0ZXMiLCJvIiwiYXNzZXJ0IiwibCIsImNsYW1wIiwibSIsIm1lbnVDb250cm9sbGVyIiwiZ2V0T3ZlcmxheSIsInUiLCJtZW51T3V0bGluZSIsInYiLCJtZW51U2hhcnAiLCJjcmVhdGVDb2xvckNsYXNzZXMiLCJob3N0Q29udGV4dCIsIm1lbnVJb3NDc3MiLCJtZW51TWRDc3MiLCJpb3NFYXNpbmciLCJtZEVhc2luZyIsImlvc0Vhc2luZ1JldmVyc2UiLCJtZEVhc2luZ1JldmVyc2UiLCJmb2N1c2FibGVRdWVyeVN0cmluZyIsIk1lbnUiLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJpb25XaWxsT3BlbiIsImlvbldpbGxDbG9zZSIsImlvbkRpZE9wZW4iLCJpb25EaWRDbG9zZSIsImlvbk1lbnVDaGFuZ2UiLCJsYXN0T25FbmQiLCJibG9ja2VyIiwiY3JlYXRlQmxvY2tlciIsImRpc2FibGVTY3JvbGwiLCJpc0FuaW1hdGluZyIsIl9pc09wZW4iLCJpbmhlcml0ZWRBdHRyaWJ1dGVzIiwiaGFuZGxlRm9jdXMiLCJldiIsImxhc3RPdmVybGF5IiwiZG9jdW1lbnQiLCJjb250YWlucyIsImVsIiwidHJhcEtleWJvYXJkRm9jdXMiLCJpc1BhbmVWaXNpYmxlIiwiY29udGVudElkIiwidW5kZWZpbmVkIiwibWVudUlkIiwidHlwZSIsImRpc2FibGVkIiwic2lkZSIsInN3aXBlR2VzdHVyZSIsIm1heEVkZ2VTdGFydCIsInR5cGVDaGFuZ2VkIiwib2xkVHlwZSIsImNvbnRlbnRFbCIsImNsYXNzTGlzdCIsInJlbW92ZSIsImFkZCIsInJlbW92ZUF0dHJpYnV0ZSIsIm1lbnVJbm5lckVsIiwiYW5pbWF0aW9uIiwiZGlzYWJsZWRDaGFuZ2VkIiwidXBkYXRlU3RhdGUiLCJlbWl0Iiwib3BlbiIsInNpZGVDaGFuZ2VkIiwic3dpcGVHZXN0dXJlQ2hhbmdlZCIsImNvbm5lY3RlZENhbGxiYWNrIiwiX3RoaXMiLCJfYXN5bmNUb0dlbmVyYXRvciIsImN1c3RvbUVsZW1lbnRzIiwid2hlbkRlZmluZWQiLCJnZXQiLCJjb250ZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb25zb2xlIiwiZXJyb3IiLCJfcmVnaXN0ZXIiLCJnZXN0dXJlIiwiY3JlYXRlR2VzdHVyZSIsImdlc3R1cmVOYW1lIiwiZ2VzdHVyZVByaW9yaXR5IiwidGhyZXNob2xkIiwiYmx1ck9uU3RhcnQiLCJjYW5TdGFydCIsIm9uV2lsbFN0YXJ0Iiwib25TdGFydCIsIm9uTW92ZSIsIm9uRW5kIiwiY29tcG9uZW50V2lsbExvYWQiLCJjb21wb25lbnREaWRMb2FkIiwiX3RoaXMyIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJkZXN0cm95IiwiX3VucmVnaXN0ZXIiLCJiYWNrZHJvcEVsIiwib25TcGxpdFBhbmVDaGFuZ2VkIiwiZGV0YWlsIiwiaXNQYW5lIiwib25CYWNrZHJvcENsaWNrIiwidGltZVN0YW1wIiwic2hvdWxkQ2xvc2UiLCJjb21wb3NlZFBhdGgiLCJpbmNsdWRlcyIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2xvc2UiLCJvbktleWRvd24iLCJrZXkiLCJpc09wZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsImlzQWN0aXZlIiwiX2lzQWN0aXZlIiwiYW5pbWF0ZWQiLCJzZXRPcGVuIiwidG9nZ2xlIiwic2hvdWxkT3BlbiIsIl9zZXRPcGVuIiwiZm9jdXNGaXJzdERlc2NlbmRhbnQiLCJmaXJzdElucHV0IiwicXVlcnlTZWxlY3RvciIsImZvY3VzIiwiZm9jdXNMYXN0RGVzY2VuZGFudCIsImlucHV0cyIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsYXN0SW5wdXQiLCJsZW5ndGgiLCJkb2MiLCJ0YXJnZXQiLCJsYXN0Rm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiX3RoaXMzIiwiYmVmb3JlQW5pbWF0aW9uIiwibG9hZEFuaW1hdGlvbiIsInN0YXJ0QW5pbWF0aW9uIiwiYWZ0ZXJBbmltYXRpb24iLCJfdGhpczQiLCJ3aWR0aCIsIm9mZnNldFdpZHRoIiwiX2NyZWF0ZUFuaW1hdGlvbiIsImdldEJvb2xlYW4iLCJkdXJhdGlvbiIsImZpbGwiLCJfdGhpczUiLCJpc1JldmVyc2VkIiwibW9kZSIsImVhc2luZyIsImVhc2luZ1JldmVyc2UiLCJhbmkiLCJkaXJlY3Rpb24iLCJvbkZpbmlzaCIsImdldERpcmVjdGlvbiIsInBsYXkiLCJzeW5jIiwiY2FuU3dpcGUiLCJpc01vZGFsUHJlc2VudGVkIiwiX2dldE9wZW5TeW5jIiwiY2hlY2tFZGdlU2lkZSIsIndpbmRvdyIsImN1cnJlbnRYIiwicHJvZ3Jlc3NTdGFydCIsImRlbHRhIiwiY29tcHV0ZURlbHRhIiwiZGVsdGFYIiwic3RlcFZhbHVlIiwicHJvZ3Jlc3NTdGVwIiwidmVsb2NpdHkiLCJ2ZWxvY2l0eVgiLCJ6Iiwic2hvdWxkQ29tcGxldGVSaWdodCIsInNob3VsZENvbXBsZXRlTGVmdCIsInNob3VsZENvbXBsZXRlIiwiY3VycmVudFRpbWUiLCJuZXdTdGVwVmFsdWUiLCJhZGp1c3RlZFN0ZXBWYWx1ZSIsInBsYXlUbyIsIm9uZVRpbWVDYWxsYmFjayIsInByb2dyZXNzRW5kIiwiU0hPV19NRU5VIiwic2V0QXR0cmlidXRlIiwiU0hPV19CQUNLRFJPUCIsIk1FTlVfQ09OVEVOVF9PUEVOIiwiYmxvY2siLCJfYSIsInVuYmxvY2siLCJmb2N1c2VkTWVudSIsImNsb3Nlc3QiLCJhZGRFdmVudExpc3RlbmVyIiwic3RvcCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbmFibGUiLCJmb3JjZUNsb3NpbmciLCJfc2V0QWN0aXZlTWVudSIsInJlbmRlciIsInJvbGUiLCJjbGFzcyIsInBhcnQiLCJyZWYiLCJ0YXBwYWJsZSIsIndhdGNoZXJzIiwiTWF0aCIsIm1heCIsIndpbiIsInBvc1giLCJpbm5lcldpZHRoIiwic3R5bGUiLCJpb3MiLCJtZCIsInVwZGF0ZVZpc2liaWxpdHkiLCJfcmVmIiwibWVudSIsIm1lbnVFbCIsIl94IiwiYXBwbHkiLCJhcmd1bWVudHMiLCJtZW51QnV0dG9uSW9zQ3NzIiwibWVudUJ1dHRvbk1kQ3NzIiwiTWVudUJ1dHRvbiIsIl90aGlzNiIsIm9uQ2xpY2siLCJ2aXNpYmxlIiwiY29sb3IiLCJhdXRvSGlkZSIsInZpc2liaWxpdHlDaGFuZ2VkIiwiX3RoaXM3IiwibWVudUljb24iLCJoaWRkZW4iLCJhdHRycyIsImFyaWFMYWJlbCIsImJ1dHRvbiIsIk9iamVjdCIsImFzc2lnbiIsImljb24iLCJsYXp5IiwibWVudVRvZ2dsZUNzcyIsIk1lbnVUb2dnbGUiLCJfdGhpczgiLCJpb25fbWVudSIsImlvbl9tZW51X2J1dHRvbiIsImlvbl9tZW51X3RvZ2dsZSIsInNlbGVjdG9yIiwiY3NzQ2xhc3NNYXAiLCJnZXRDbGFzc0xpc3QiLCJjbGFzc2VzIiwiYXJyYXkiLCJpc0FycmF5Iiwic3BsaXQiLCJmaWx0ZXIiLCJtYXAiLCJ0cmltIiwiZ2V0Q2xhc3NNYXAiLCJmb3JFYWNoIiwiU0NIRU1FIiwib3BlblVSTCIsInVybCIsInRlc3QiLCJyb3V0ZXIiLCJwdXNoIiwiX3gyIiwiX3gzIiwiX3g0Il0sInNvdXJjZVJvb3QiOiJ3ZWJwYWNrOi8vLyIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDFdfQ==