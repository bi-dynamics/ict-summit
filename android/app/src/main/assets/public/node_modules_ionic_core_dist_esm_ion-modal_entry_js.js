"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-modal_entry_js"],{

/***/ 8737:
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-modal.entry.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_modal": () => (/* binding */ Modal)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-be218d70.js */ 9866);
/* harmony import */ var _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ionic-global-3b28a225.js */ 3053);
/* harmony import */ var _index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index-455f6202.js */ 5707);
/* harmony import */ var _framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./framework-delegate-28f7ea29.js */ 6425);
/* harmony import */ var _helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers-5eb6364d.js */ 9364);
/* harmony import */ var _keyboard_282b81b8_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keyboard-282b81b8.js */ 512);
/* harmony import */ var _index_e86f0117_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index-e86f0117.js */ 7584);
/* harmony import */ var _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index-33ffec25.js */ 2286);
/* harmony import */ var _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./overlays-166b34ae.js */ 4477);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./theme-7670341c.js */ 320);
/* harmony import */ var _index_93867f4c_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index-93867f4c.js */ 656);
/* harmony import */ var _animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./animation-9a890cad.js */ 9989);
/* harmony import */ var _cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cubic-bezier-e78d1307.js */ 1463);
/* harmony import */ var _index_422b6e83_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./index-422b6e83.js */ 8759);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 159);
/* harmony import */ var _gesture_controller_17060b7c_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./gesture-controller-17060b7c.js */ 6379);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
















var Style;
(function (Style) {
  Style["Dark"] = "DARK";
  Style["Light"] = "LIGHT";
  Style["Default"] = "DEFAULT";
})(Style || (Style = {}));
const StatusBar = {
  getEngine() {
    var _a;
    return ((_a = _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w === null || _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w === void 0 ? void 0 : _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w.Capacitor) === null || _a === void 0 ? void 0 : _a.isPluginAvailable('StatusBar')) && (_index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w === null || _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w === void 0 ? void 0 : _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w.Capacitor.Plugins.StatusBar);
  },
  supportsDefaultStatusBarStyle() {
    var _a;
    /**
     * The 'DEFAULT' status bar style was added
     * to the @capacitor/status-bar plugin in Capacitor 3.
     * PluginHeaders is only supported in Capacitor 3+,
     * so we can use this to detect Capacitor 3.
     */
    return !!((_a = _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w === null || _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w === void 0 ? void 0 : _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w.Capacitor) === null || _a === void 0 ? void 0 : _a.PluginHeaders);
  },
  setStyle(options) {
    const engine = this.getEngine();
    if (!engine) {
      return;
    }
    engine.setStyle(options);
  },
  getStyle: function () {
    var _ref = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const engine = this.getEngine();
      if (!engine) {
        return Style.Default;
      }
      const {
        style
      } = yield engine.getInfo();
      return style;
    });
    return function getStyle() {
      return _ref.apply(this, arguments);
    };
  }()
};

/**
 * Use y = mx + b to
 * figure out the backdrop value
 * at a particular x coordinate. This
 * is useful when the backdrop does
 * not begin to fade in until after
 * the 0 breakpoint.
 */
const getBackdropValueForSheet = (x, backdropBreakpoint) => {
  /**
   * We will use these points:
   * (backdropBreakpoint, 0)
   * (maxBreakpoint, 1)
   * We know that at the beginning breakpoint,
   * the backdrop will be hidden. We also
   * know that at the maxBreakpoint, the backdrop
   * must be fully visible. maxBreakpoint should
   * always be 1 even if the maximum value
   * of the breakpoints array is not 1 since
   * the animation runs from a progress of 0
   * to a progress of 1.
   * m = (y2 - y1) / (x2 - x1)
   *
   * This is simplified from:
   * m = (1 - 0) / (maxBreakpoint - backdropBreakpoint)
   *
   * If the backdropBreakpoint is 1, we return 0 as the
   * backdrop is completely hidden.
   *
   */
  if (backdropBreakpoint === 1) {
    return 0;
  }
  const slope = 1 / (1 - backdropBreakpoint);
  /**
   * From here, compute b which is
   * the backdrop opacity if the offset
   * is 0. If the backdrop does not
   * begin to fade in until after the
   * 0 breakpoint, this b value will be
   * negative. This is fine as we never pass
   * b directly into the animation keyframes.
   * b = y - mx
   * Use a known point: (backdropBreakpoint, 0)
   * This is simplified from:
   * b = 0 - (backdropBreakpoint * slope)
   */
  const b = -(backdropBreakpoint * slope);
  /**
   * Finally, we can now determine the
   * backdrop offset given an arbitrary
   * gesture offset.
   */
  return x * slope + b;
};
/**
 * The tablet/desktop card modal activates
 * when the window width is >= 768.
 * At that point, the presenting element
 * is not transformed, so we do not need to
 * adjust the status bar color.
 *
 * Note: We check supportsDefaultStatusBarStyle so that
 * Capacitor <= 2 users do not get their status bar
 * stuck in an inconsistent state due to a lack of
 * support for Style.Default.
 */
const setCardStatusBarDark = () => {
  if (!_index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w || _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w.innerWidth >= 768 || !StatusBar.supportsDefaultStatusBarStyle()) {
    return;
  }
  StatusBar.setStyle({
    style: Style.Dark
  });
};
const setCardStatusBarDefault = (defaultStyle = Style.Default) => {
  if (!_index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w || _index_33ffec25_js__WEBPACK_IMPORTED_MODULE_8__.w.innerWidth >= 768 || !StatusBar.supportsDefaultStatusBarStyle()) {
    return;
  }
  StatusBar.setStyle({
    style: defaultStyle
  });
};
const handleCanDismiss = /*#__PURE__*/function () {
  var _ref2 = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (el, animation) {
    /**
     * If canDismiss is not a function
     * then we can return early. If canDismiss is `true`,
     * then canDismissBlocksGesture is `false` as canDismiss
     * will never interrupt the gesture. As a result,
     * this code block is never reached. If canDismiss is `false`,
     * then we never dismiss.
     */
    if (typeof el.canDismiss !== 'function') {
      return;
    }
    /**
     * Run the canDismiss callback.
     * If the function returns `true`,
     * then we can proceed with dismiss.
     */
    const shouldDismiss = yield el.canDismiss(undefined, _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.G);
    if (!shouldDismiss) {
      return;
    }
    /**
     * If canDismiss resolved after the snap
     * back animation finished, we can
     * dismiss immediately.
     *
     * If canDismiss resolved before the snap
     * back animation finished, we need to
     * wait until the snap back animation is
     * done before dismissing.
     */
    if (animation.isRunning()) {
      animation.onFinish(() => {
        el.dismiss(undefined, 'handler');
      }, {
        oneTimeCallback: true
      });
    } else {
      el.dismiss(undefined, 'handler');
    }
  });
  return function handleCanDismiss(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();
/**
 * This function lets us simulate a realistic spring-like animation
 * when swiping down on the modal.
 * There are two forces that we need to use to compute the spring physics:
 *
 * 1. Stiffness, k: This is a measure of resistance applied a spring.
 * 2. Dampening, c: This value has the effect of reducing or preventing oscillation.
 *
 * Using these two values, we can calculate the Spring Force and the Dampening Force
 * to compute the total force applied to a spring.
 *
 * Spring Force: This force pulls a spring back into its equilibrium position.
 * Hooke's Law tells us that that spring force (FS) = kX.
 * k is the stiffness of a spring, and X is the displacement of the spring from its
 * equilibrium position. In this case, it is the amount by which the free end
 * of a spring was displaced (stretched/pushed) from its "relaxed" position.
 *
 * Dampening Force: This force slows down motion. Without it, a spring would oscillate forever.
 * The dampening force, FD, can be found via this formula: FD = -cv
 * where c the dampening value and v is velocity.
 *
 * Therefore, the resulting force that is exerted on the block is:
 * F = FS + FD = -kX - cv
 *
 * Newton's 2nd Law tells us that F = ma:
 * ma = -kX - cv.
 *
 * For Ionic's purposes, we can assume that m = 1:
 * a = -kX - cv
 *
 * Imagine a block attached to the end of a spring. At equilibrium
 * the block is at position x = 1.
 * Pressing on the block moves it to position x = 0;
 * So, to calculate the displacement, we need to take the
 * current position and subtract the previous position from it.
 * X = x - x0 = 0 - 1 = -1.
 *
 * For Ionic's purposes, we are only pushing on the spring modal
 * so we have a max position of 1.
 * As a result, we can expand displacement to this formula:
 * X = x - 1
 *
 * a = -k(x - 1) - cv
 *
 * We can represent the motion of something as a function of time: f(t) = x.
 * The derivative of position gives us the velocity: f'(t)
 * The derivative of the velocity gives us the acceleration: f''(t)
 *
 * We can substitute the formula above with these values:
 *
 * f"(t) = -k * (f(t) - 1) - c * f'(t)
 *
 * This is called a differential equation.
 *
 * We know that at t = 0, we are at x = 0 because the modal does not move: f(0) = 0
 * This means our velocity is also zero: f'(0) = 0.
 *
 * We can cheat a bit and plug the formula into Wolfram Alpha.
 * However, we need to pick stiffness and dampening values:
 * k = 0.57
 * c = 15
 *
 * I picked these as they are fairly close to native iOS's spring effect
 * with the modal.
 *
 * What we plug in is this: f(0) = 0; f'(0) = 0; f''(t) = -0.57(f(t) - 1) - 15f'(t)
 *
 * The result is a formula that lets us calculate the acceleration
 * for a given time t.
 * Note: This is the approximate form of the solution. Wolfram Alpha will
 * give you a complex differential equation too.
 */
const calculateSpringStep = t => {
  return 0.00255275 * 2.71828 ** (-14.9619 * t) - 1.00255 * 2.71828 ** (-0.0380968 * t) + 1;
};

// Defaults for the card swipe animation
const SwipeToCloseDefaults = {
  MIN_PRESENTING_SCALE: 0.93
};
const createSwipeToCloseGesture = (el, animation, statusBarStyle, onDismiss) => {
  /**
   * The step value at which a card modal
   * is eligible for dismissing via gesture.
   */
  const DISMISS_THRESHOLD = 0.5;
  const height = el.offsetHeight;
  let isOpen = false;
  let canDismissBlocksGesture = false;
  let contentEl = null;
  let scrollEl = null;
  const canDismissMaxStep = 0.2;
  let initialScrollY = true;
  let lastStep = 0;
  const getScrollY = () => {
    if (contentEl && (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.i)(contentEl)) {
      return contentEl.scrollY;
      /**
       * Custom scroll containers are intended to be
       * used with virtual scrolling, so we assume
       * there is scrolling in this case.
       */
    } else {
      return true;
    }
  };
  const canStart = detail => {
    const target = detail.event.target;
    if (target === null || !target.closest) {
      return true;
    }
    /**
     * If we are swiping on the content,
     * swiping should only be possible if
     * the content is scrolled all the way
     * to the top so that we do not interfere
     * with scrolling.
     *
     * We cannot assume that the `ion-content`
     * target will remain consistent between
     * swipes. For example, when using
     * ion-nav within a card modal it is
     * possible to swipe, push a view, and then
     * swipe again. The target content will not
     * be the same between swipes.
     */
    contentEl = (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.f)(target);
    if (contentEl) {
      /**
       * The card should never swipe to close
       * on the content with a refresher.
       * Note: We cannot solve this by making the
       * swipeToClose gesture have a higher priority
       * than the refresher gesture as the iOS native
       * refresh gesture uses a scroll listener in
       * addition to a gesture.
       *
       * Note: Do not use getScrollElement here
       * because we need this to be a synchronous
       * operation, and getScrollElement is
       * asynchronous.
       */
      if ((0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.i)(contentEl)) {
        const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(contentEl);
        scrollEl = root.querySelector('.inner-scroll');
      } else {
        scrollEl = contentEl;
      }
      const hasRefresherInContent = !!contentEl.querySelector('ion-refresher');
      return !hasRefresherInContent && scrollEl.scrollTop === 0;
    }
    /**
     * Card should be swipeable on all
     * parts of the modal except for the footer.
     */
    const footer = target.closest('ion-footer');
    if (footer === null) {
      return true;
    }
    return false;
  };
  const onStart = detail => {
    const {
      deltaY
    } = detail;
    /**
     * Get the initial scrollY value so
     * that we can correctly reset the scrollY
     * prop when the gesture ends.
     */
    initialScrollY = getScrollY();
    /**
     * If canDismiss is anything other than `true`
     * then users should be able to swipe down
     * until a threshold is hit. At that point,
     * the card modal should not proceed any further.
     * TODO (FW-937)
     * Remove undefined check
     */
    canDismissBlocksGesture = el.canDismiss !== undefined && el.canDismiss !== true;
    /**
     * If we are pulling down, then
     * it is possible we are pulling on the
     * content. We do not want scrolling to
     * happen at the same time as the gesture.
     */
    if (deltaY > 0 && contentEl) {
      (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.d)(contentEl);
    }
    animation.progressStart(true, isOpen ? 1 : 0);
  };
  const onMove = detail => {
    const {
      deltaY
    } = detail;
    /**
     * If we are pulling down, then
     * it is possible we are pulling on the
     * content. We do not want scrolling to
     * happen at the same time as the gesture.
     */
    if (deltaY > 0 && contentEl) {
      (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.d)(contentEl);
    }
    /**
     * If we are swiping on the content
     * then the swipe gesture should only
     * happen if we are pulling down.
     *
     * However, if we pull up and
     * then down such that the scroll position
     * returns to 0, we should be able to swipe
     * the card.
     */
    const step = detail.deltaY / height;
    /**
     * Check if user is swiping down and
     * if we have a canDismiss value that
     * should block the gesture from
     * proceeding,
     */
    const isAttemptingDismissWithCanDismiss = step >= 0 && canDismissBlocksGesture;
    /**
     * If we are blocking the gesture from dismissing,
     * set the max step value so that the sheet cannot be
     * completely hidden.
     */
    const maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;
    /**
     * If we are blocking the gesture from
     * dismissing, calculate the spring modifier value
     * this will be added to the starting breakpoint
     * value to give the gesture a spring-like feeling.
     * Note that the starting breakpoint is always 0,
     * so we omit adding 0 to the result.
     */
    const processedStep = isAttemptingDismissWithCanDismiss ? calculateSpringStep(step / maxStep) : step;
    const clampedStep = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.l)(0.0001, processedStep, maxStep);
    animation.progressStep(clampedStep);
    /**
     * When swiping down half way, the status bar style
     * should be reset to its default value.
     *
     * We track lastStep so that we do not fire these
     * functions on every onMove, only when the user has
     * crossed a certain threshold.
     */
    if (clampedStep >= DISMISS_THRESHOLD && lastStep < DISMISS_THRESHOLD) {
      setCardStatusBarDefault(statusBarStyle);
      /**
       * However, if we swipe back up, then the
       * status bar style should be set to have light
       * text on a dark background.
       */
    } else if (clampedStep < DISMISS_THRESHOLD && lastStep >= DISMISS_THRESHOLD) {
      setCardStatusBarDark();
    }
    lastStep = clampedStep;
  };
  const onEnd = detail => {
    const velocity = detail.velocityY;
    const step = detail.deltaY / height;
    const isAttemptingDismissWithCanDismiss = step >= 0 && canDismissBlocksGesture;
    const maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;
    const processedStep = isAttemptingDismissWithCanDismiss ? calculateSpringStep(step / maxStep) : step;
    const clampedStep = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.l)(0.0001, processedStep, maxStep);
    const threshold = (detail.deltaY + velocity * 1000) / height;
    /**
     * If canDismiss blocks
     * the swipe gesture, then the
     * animation can never complete until
     * canDismiss is checked.
     */
    const shouldComplete = !isAttemptingDismissWithCanDismiss && threshold >= DISMISS_THRESHOLD;
    let newStepValue = shouldComplete ? -0.001 : 0.001;
    if (!shouldComplete) {
      animation.easing('cubic-bezier(1, 0, 0.68, 0.28)');
      newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_13__.g)([0, 0], [1, 0], [0.68, 0.28], [1, 1], clampedStep)[0];
    } else {
      animation.easing('cubic-bezier(0.32, 0.72, 0, 1)');
      newStepValue += (0,_cubic_bezier_e78d1307_js__WEBPACK_IMPORTED_MODULE_13__.g)([0, 0], [0.32, 0.72], [0, 1], [1, 1], clampedStep)[0];
    }
    const duration = shouldComplete ? computeDuration(step * height, velocity) : computeDuration((1 - clampedStep) * height, velocity);
    isOpen = shouldComplete;
    gesture.enable(false);
    if (contentEl) {
      (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.r)(contentEl, initialScrollY);
    }
    animation.onFinish(() => {
      if (!shouldComplete) {
        gesture.enable(true);
      }
    }).progressEnd(shouldComplete ? 1 : 0, newStepValue, duration);
    /**
     * If the canDismiss value blocked the gesture
     * from proceeding, then we should ignore whatever
     * shouldComplete is. Whether or not the modal
     * animation should complete is now determined by
     * canDismiss.
     *
     * If the user swiped >25% of the way
     * to the max step, then we should
     * check canDismiss. 25% was chosen
     * to avoid accidental swipes.
     */
    if (isAttemptingDismissWithCanDismiss && clampedStep > maxStep / 4) {
      handleCanDismiss(el, animation);
    } else if (shouldComplete) {
      onDismiss();
    }
  };
  const gesture = (0,_index_422b6e83_js__WEBPACK_IMPORTED_MODULE_14__.createGesture)({
    el,
    gestureName: 'modalSwipeToClose',
    gesturePriority: 39,
    direction: 'y',
    threshold: 10,
    canStart,
    onStart,
    onMove,
    onEnd
  });
  return gesture;
};
const computeDuration = (remaining, velocity) => {
  return (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.l)(400, remaining / Math.abs(velocity * 1.1), 500);
};
const createSheetEnterAnimation = opts => {
  const {
    currentBreakpoint,
    backdropBreakpoint
  } = opts;
  /**
   * If the backdropBreakpoint is undefined, then the backdrop
   * should always fade in. If the backdropBreakpoint came before the
   * current breakpoint, then the backdrop should be fading in.
   */
  const shouldShowBackdrop = backdropBreakpoint === undefined || backdropBreakpoint < currentBreakpoint;
  const initialBackdrop = shouldShowBackdrop ? `calc(var(--backdrop-opacity) * ${currentBreakpoint})` : '0';
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)('backdropAnimation').fromTo('opacity', 0, initialBackdrop);
  if (shouldShowBackdrop) {
    backdropAnimation.beforeStyles({
      'pointer-events': 'none'
    }).afterClearStyles(['pointer-events']);
  }
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)('wrapperAnimation').keyframes([{
    offset: 0,
    opacity: 1,
    transform: 'translateY(100%)'
  }, {
    offset: 1,
    opacity: 1,
    transform: `translateY(${100 - currentBreakpoint * 100}%)`
  }]);
  return {
    wrapperAnimation,
    backdropAnimation
  };
};
const createSheetLeaveAnimation = opts => {
  const {
    currentBreakpoint,
    backdropBreakpoint
  } = opts;
  /**
   * Backdrop does not always fade in from 0 to 1 if backdropBreakpoint
   * is defined, so we need to account for that offset by figuring out
   * what the current backdrop value should be.
   */
  const backdropValue = `calc(var(--backdrop-opacity) * ${getBackdropValueForSheet(currentBreakpoint, backdropBreakpoint)})`;
  const defaultBackdrop = [{
    offset: 0,
    opacity: backdropValue
  }, {
    offset: 1,
    opacity: 0
  }];
  const customBackdrop = [{
    offset: 0,
    opacity: backdropValue
  }, {
    offset: backdropBreakpoint,
    opacity: 0
  }, {
    offset: 1,
    opacity: 0
  }];
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)('backdropAnimation').keyframes(backdropBreakpoint !== 0 ? customBackdrop : defaultBackdrop);
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)('wrapperAnimation').keyframes([{
    offset: 0,
    opacity: 1,
    transform: `translateY(${100 - currentBreakpoint * 100}%)`
  }, {
    offset: 1,
    opacity: 1,
    transform: `translateY(100%)`
  }]);
  return {
    wrapperAnimation,
    backdropAnimation
  };
};
const createEnterAnimation$1 = () => {
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
    'pointer-events': 'none'
  }).afterClearStyles(['pointer-events']);
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().fromTo('transform', 'translateY(100vh)', 'translateY(0vh)');
  return {
    backdropAnimation,
    wrapperAnimation
  };
};
/**
 * iOS Modal Enter Animation for the Card presentation style
 */
const iosEnterAnimation = (baseEl, opts) => {
  const {
    presentingEl,
    currentBreakpoint
  } = opts;
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(baseEl);
  const {
    wrapperAnimation,
    backdropAnimation
  } = currentBreakpoint !== undefined ? createSheetEnterAnimation(opts) : createEnterAnimation$1();
  backdropAnimation.addElement(root.querySelector('ion-backdrop'));
  wrapperAnimation.addElement(root.querySelectorAll('.modal-wrapper, .modal-shadow')).beforeStyles({
    opacity: 1
  });
  const baseAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)('entering-base').addElement(baseEl).easing('cubic-bezier(0.32,0.72,0,1)').duration(500).addAnimation(wrapperAnimation);
  if (presentingEl) {
    const isMobile = window.innerWidth < 768;
    const hasCardModal = presentingEl.tagName === 'ION-MODAL' && presentingEl.presentingElement !== undefined;
    const presentingElRoot = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(presentingEl);
    const presentingAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().beforeStyles({
      transform: 'translateY(0)',
      'transform-origin': 'top center',
      overflow: 'hidden'
    });
    const bodyEl = document.body;
    if (isMobile) {
      /**
       * Fallback for browsers that does not support `max()` (ex: Firefox)
       * No need to worry about statusbar padding since engines like Gecko
       * are not used as the engine for standalone Cordova/Capacitor apps
       */
      const transformOffset = !CSS.supports('width', 'max(0px, 1px)') ? '30px' : 'max(30px, var(--ion-safe-area-top))';
      const modalTransform = hasCardModal ? '-10px' : transformOffset;
      const toPresentingScale = SwipeToCloseDefaults.MIN_PRESENTING_SCALE;
      const finalTransform = `translateY(${modalTransform}) scale(${toPresentingScale})`;
      presentingAnimation.afterStyles({
        transform: finalTransform
      }).beforeAddWrite(() => bodyEl.style.setProperty('background-color', 'black')).addElement(presentingEl).keyframes([{
        offset: 0,
        filter: 'contrast(1)',
        transform: 'translateY(0px) scale(1)',
        borderRadius: '0px'
      }, {
        offset: 1,
        filter: 'contrast(0.85)',
        transform: finalTransform,
        borderRadius: '10px 10px 0 0'
      }]);
      baseAnimation.addAnimation(presentingAnimation);
    } else {
      baseAnimation.addAnimation(backdropAnimation);
      if (!hasCardModal) {
        wrapperAnimation.fromTo('opacity', '0', '1');
      } else {
        const toPresentingScale = hasCardModal ? SwipeToCloseDefaults.MIN_PRESENTING_SCALE : 1;
        const finalTransform = `translateY(-10px) scale(${toPresentingScale})`;
        presentingAnimation.afterStyles({
          transform: finalTransform
        }).addElement(presentingElRoot.querySelector('.modal-wrapper')).keyframes([{
          offset: 0,
          filter: 'contrast(1)',
          transform: 'translateY(0) scale(1)'
        }, {
          offset: 1,
          filter: 'contrast(0.85)',
          transform: finalTransform
        }]);
        const shadowAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().afterStyles({
          transform: finalTransform
        }).addElement(presentingElRoot.querySelector('.modal-shadow')).keyframes([{
          offset: 0,
          opacity: '1',
          transform: 'translateY(0) scale(1)'
        }, {
          offset: 1,
          opacity: '0',
          transform: finalTransform
        }]);
        baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);
      }
    }
  } else {
    baseAnimation.addAnimation(backdropAnimation);
  }
  return baseAnimation;
};
const createLeaveAnimation$1 = () => {
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().fromTo('opacity', 'var(--backdrop-opacity)', 0);
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().fromTo('transform', 'translateY(0vh)', 'translateY(100vh)');
  return {
    backdropAnimation,
    wrapperAnimation
  };
};
/**
 * iOS Modal Leave Animation
 */
const iosLeaveAnimation = (baseEl, opts, duration = 500) => {
  const {
    presentingEl,
    currentBreakpoint
  } = opts;
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(baseEl);
  const {
    wrapperAnimation,
    backdropAnimation
  } = currentBreakpoint !== undefined ? createSheetLeaveAnimation(opts) : createLeaveAnimation$1();
  backdropAnimation.addElement(root.querySelector('ion-backdrop'));
  wrapperAnimation.addElement(root.querySelectorAll('.modal-wrapper, .modal-shadow')).beforeStyles({
    opacity: 1
  });
  const baseAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)('leaving-base').addElement(baseEl).easing('cubic-bezier(0.32,0.72,0,1)').duration(duration).addAnimation(wrapperAnimation);
  if (presentingEl) {
    const isMobile = window.innerWidth < 768;
    const hasCardModal = presentingEl.tagName === 'ION-MODAL' && presentingEl.presentingElement !== undefined;
    const presentingElRoot = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(presentingEl);
    const presentingAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().beforeClearStyles(['transform']).afterClearStyles(['transform']).onFinish(currentStep => {
      // only reset background color if this is the last card-style modal
      if (currentStep !== 1) {
        return;
      }
      presentingEl.style.setProperty('overflow', '');
      const numModals = Array.from(bodyEl.querySelectorAll('ion-modal')).filter(m => m.presentingElement !== undefined).length;
      if (numModals <= 1) {
        bodyEl.style.setProperty('background-color', '');
      }
    });
    const bodyEl = document.body;
    if (isMobile) {
      const transformOffset = !CSS.supports('width', 'max(0px, 1px)') ? '30px' : 'max(30px, var(--ion-safe-area-top))';
      const modalTransform = hasCardModal ? '-10px' : transformOffset;
      const toPresentingScale = SwipeToCloseDefaults.MIN_PRESENTING_SCALE;
      const finalTransform = `translateY(${modalTransform}) scale(${toPresentingScale})`;
      presentingAnimation.addElement(presentingEl).keyframes([{
        offset: 0,
        filter: 'contrast(0.85)',
        transform: finalTransform,
        borderRadius: '10px 10px 0 0'
      }, {
        offset: 1,
        filter: 'contrast(1)',
        transform: 'translateY(0px) scale(1)',
        borderRadius: '0px'
      }]);
      baseAnimation.addAnimation(presentingAnimation);
    } else {
      baseAnimation.addAnimation(backdropAnimation);
      if (!hasCardModal) {
        wrapperAnimation.fromTo('opacity', '1', '0');
      } else {
        const toPresentingScale = hasCardModal ? SwipeToCloseDefaults.MIN_PRESENTING_SCALE : 1;
        const finalTransform = `translateY(-10px) scale(${toPresentingScale})`;
        presentingAnimation.addElement(presentingElRoot.querySelector('.modal-wrapper')).afterStyles({
          transform: 'translate3d(0, 0, 0)'
        }).keyframes([{
          offset: 0,
          filter: 'contrast(0.85)',
          transform: finalTransform
        }, {
          offset: 1,
          filter: 'contrast(1)',
          transform: 'translateY(0) scale(1)'
        }]);
        const shadowAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().addElement(presentingElRoot.querySelector('.modal-shadow')).afterStyles({
          transform: 'translateY(0) scale(1)'
        }).keyframes([{
          offset: 0,
          opacity: '0',
          transform: finalTransform
        }, {
          offset: 1,
          opacity: '1',
          transform: 'translateY(0) scale(1)'
        }]);
        baseAnimation.addAnimation([presentingAnimation, shadowAnimation]);
      }
    }
  } else {
    baseAnimation.addAnimation(backdropAnimation);
  }
  return baseAnimation;
};
const createEnterAnimation = () => {
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().fromTo('opacity', 0.01, 'var(--backdrop-opacity)').beforeStyles({
    'pointer-events': 'none'
  }).afterClearStyles(['pointer-events']);
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().keyframes([{
    offset: 0,
    opacity: 0.01,
    transform: 'translateY(40px)'
  }, {
    offset: 1,
    opacity: 1,
    transform: `translateY(0px)`
  }]);
  return {
    backdropAnimation,
    wrapperAnimation
  };
};
/**
 * Md Modal Enter Animation
 */
const mdEnterAnimation = (baseEl, opts) => {
  const {
    currentBreakpoint
  } = opts;
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(baseEl);
  const {
    wrapperAnimation,
    backdropAnimation
  } = currentBreakpoint !== undefined ? createSheetEnterAnimation(opts) : createEnterAnimation();
  backdropAnimation.addElement(root.querySelector('ion-backdrop'));
  wrapperAnimation.addElement(root.querySelector('.modal-wrapper'));
  return (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().addElement(baseEl).easing('cubic-bezier(0.36,0.66,0.04,1)').duration(280).addAnimation([backdropAnimation, wrapperAnimation]);
};
const createLeaveAnimation = () => {
  const backdropAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().fromTo('opacity', 'var(--backdrop-opacity)', 0);
  const wrapperAnimation = (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().keyframes([{
    offset: 0,
    opacity: 0.99,
    transform: `translateY(0px)`
  }, {
    offset: 1,
    opacity: 0,
    transform: 'translateY(40px)'
  }]);
  return {
    backdropAnimation,
    wrapperAnimation
  };
};
/**
 * Md Modal Leave Animation
 */
const mdLeaveAnimation = (baseEl, opts) => {
  const {
    currentBreakpoint
  } = opts;
  const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.g)(baseEl);
  const {
    wrapperAnimation,
    backdropAnimation
  } = currentBreakpoint !== undefined ? createSheetLeaveAnimation(opts) : createLeaveAnimation();
  backdropAnimation.addElement(root.querySelector('ion-backdrop'));
  wrapperAnimation.addElement(root.querySelector('.modal-wrapper'));
  return (0,_animation_9a890cad_js__WEBPACK_IMPORTED_MODULE_12__.c)().easing('cubic-bezier(0.47,0,0.745,0.715)').duration(200).addAnimation([backdropAnimation, wrapperAnimation]);
};
const createSheetGesture = (baseEl, backdropEl, wrapperEl, initialBreakpoint, backdropBreakpoint, animation, breakpoints = [], getCurrentBreakpoint, onDismiss, onBreakpointChange) => {
  // Defaults for the sheet swipe animation
  const defaultBackdrop = [{
    offset: 0,
    opacity: 'var(--backdrop-opacity)'
  }, {
    offset: 1,
    opacity: 0.01
  }];
  const customBackdrop = [{
    offset: 0,
    opacity: 'var(--backdrop-opacity)'
  }, {
    offset: 1 - backdropBreakpoint,
    opacity: 0
  }, {
    offset: 1,
    opacity: 0
  }];
  const SheetDefaults = {
    WRAPPER_KEYFRAMES: [{
      offset: 0,
      transform: 'translateY(0%)'
    }, {
      offset: 1,
      transform: 'translateY(100%)'
    }],
    BACKDROP_KEYFRAMES: backdropBreakpoint !== 0 ? customBackdrop : defaultBackdrop
  };
  const contentEl = baseEl.querySelector('ion-content');
  const height = wrapperEl.clientHeight;
  let currentBreakpoint = initialBreakpoint;
  let offset = 0;
  let canDismissBlocksGesture = false;
  const canDismissMaxStep = 0.95;
  const wrapperAnimation = animation.childAnimations.find(ani => ani.id === 'wrapperAnimation');
  const backdropAnimation = animation.childAnimations.find(ani => ani.id === 'backdropAnimation');
  const maxBreakpoint = breakpoints[breakpoints.length - 1];
  const minBreakpoint = breakpoints[0];
  const enableBackdrop = () => {
    baseEl.style.setProperty('pointer-events', 'auto');
    backdropEl.style.setProperty('pointer-events', 'auto');
    /**
     * When the backdrop is enabled, elements such
     * as inputs should not be focusable outside
     * the sheet.
     */
    baseEl.classList.remove('ion-disable-focus-trap');
  };
  const disableBackdrop = () => {
    baseEl.style.setProperty('pointer-events', 'none');
    backdropEl.style.setProperty('pointer-events', 'none');
    /**
     * When the backdrop is enabled, elements such
     * as inputs should not be focusable outside
     * the sheet.
     * Adding this class disables focus trapping
     * for the sheet temporarily.
     */
    baseEl.classList.add('ion-disable-focus-trap');
  };
  /**
   * After the entering animation completes,
   * we need to set the animation to go from
   * offset 0 to offset 1 so that users can
   * swipe in any direction. We then set the
   * animation offset to the current breakpoint
   * so there is no flickering.
   */
  if (wrapperAnimation && backdropAnimation) {
    wrapperAnimation.keyframes([...SheetDefaults.WRAPPER_KEYFRAMES]);
    backdropAnimation.keyframes([...SheetDefaults.BACKDROP_KEYFRAMES]);
    animation.progressStart(true, 1 - currentBreakpoint);
    /**
     * If backdrop is not enabled, then content
     * behind modal should be clickable. To do this, we need
     * to remove pointer-events from ion-modal as a whole.
     * ion-backdrop and .modal-wrapper always have pointer-events: auto
     * applied, so the modal content can still be interacted with.
     */
    const shouldEnableBackdrop = currentBreakpoint > backdropBreakpoint;
    if (shouldEnableBackdrop) {
      enableBackdrop();
    } else {
      disableBackdrop();
    }
  }
  if (contentEl && currentBreakpoint !== maxBreakpoint) {
    contentEl.scrollY = false;
  }
  const canStart = detail => {
    /**
     * If the sheet is fully expanded and
     * the user is swiping on the content,
     * the gesture should not start to
     * allow for scrolling on the content.
     */
    const content = detail.event.target.closest('ion-content');
    currentBreakpoint = getCurrentBreakpoint();
    if (currentBreakpoint === 1 && content) {
      return false;
    }
    return true;
  };
  const onStart = () => {
    /**
     * If canDismiss is anything other than `true`
     * then users should be able to swipe down
     * until a threshold is hit. At that point,
     * the card modal should not proceed any further.
     *
     * canDismiss is never fired via gesture if there is
     * no 0 breakpoint. However, it can be fired if the user
     * presses Esc or the hardware back button.
     * TODO (FW-937)
     * Remove undefined check
     */
    canDismissBlocksGesture = baseEl.canDismiss !== undefined && baseEl.canDismiss !== true && minBreakpoint === 0;
    /**
     * If swiping on the content
     * we should disable scrolling otherwise
     * the sheet will expand and the content will scroll.
     */
    if (contentEl) {
      contentEl.scrollY = false;
    }
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => {
      /**
       * Dismisses the open keyboard when the sheet drag gesture is started.
       * Sets the focus onto the modal element.
       */
      baseEl.focus();
    });
    animation.progressStart(true, 1 - currentBreakpoint);
  };
  const onMove = detail => {
    /**
     * Given the change in gesture position on the Y axis,
     * compute where the offset of the animation should be
     * relative to where the user dragged.
     */
    const initialStep = 1 - currentBreakpoint;
    const secondToLastBreakpoint = breakpoints.length > 1 ? 1 - breakpoints[1] : undefined;
    const step = initialStep + detail.deltaY / height;
    const isAttemptingDismissWithCanDismiss = secondToLastBreakpoint !== undefined && step >= secondToLastBreakpoint && canDismissBlocksGesture;
    /**
     * If we are blocking the gesture from dismissing,
     * set the max step value so that the sheet cannot be
     * completely hidden.
     */
    const maxStep = isAttemptingDismissWithCanDismiss ? canDismissMaxStep : 0.9999;
    /**
     * If we are blocking the gesture from
     * dismissing, calculate the spring modifier value
     * this will be added to the starting breakpoint
     * value to give the gesture a spring-like feeling.
     * Note that when isAttemptingDismissWithCanDismiss is true,
     * the modifier is always added to the breakpoint that
     * appears right after the 0 breakpoint.
     *
     * Note that this modifier is essentially the progression
     * between secondToLastBreakpoint and maxStep which is
     * why we subtract secondToLastBreakpoint. This lets us get
     * the result as a value from 0 to 1.
     */
    const processedStep = isAttemptingDismissWithCanDismiss && secondToLastBreakpoint !== undefined ? secondToLastBreakpoint + calculateSpringStep((step - secondToLastBreakpoint) / (maxStep - secondToLastBreakpoint)) : step;
    offset = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.l)(0.0001, processedStep, maxStep);
    animation.progressStep(offset);
  };
  const onEnd = detail => {
    /**
     * When the gesture releases, we need to determine
     * the closest breakpoint to snap to.
     */
    const velocity = detail.velocityY;
    const threshold = (detail.deltaY + velocity * 350) / height;
    const diff = currentBreakpoint - threshold;
    const closest = breakpoints.reduce((a, b) => {
      return Math.abs(b - diff) < Math.abs(a - diff) ? b : a;
    });
    moveSheetToBreakpoint({
      breakpoint: closest,
      breakpointOffset: offset,
      canDismiss: canDismissBlocksGesture
    });
  };
  const moveSheetToBreakpoint = options => {
    const {
      breakpoint,
      canDismiss,
      breakpointOffset
    } = options;
    /**
     * canDismiss should only prevent snapping
     * when users are trying to dismiss. If canDismiss
     * is present but the user is trying to swipe upwards,
     * we should allow that to happen,
     */
    const shouldPreventDismiss = canDismiss && breakpoint === 0;
    const snapToBreakpoint = shouldPreventDismiss ? currentBreakpoint : breakpoint;
    const shouldRemainOpen = snapToBreakpoint !== 0;
    currentBreakpoint = 0;
    /**
     * Update the animation so that it plays from
     * the last offset to the closest snap point.
     */
    if (wrapperAnimation && backdropAnimation) {
      wrapperAnimation.keyframes([{
        offset: 0,
        transform: `translateY(${breakpointOffset * 100}%)`
      }, {
        offset: 1,
        transform: `translateY(${(1 - snapToBreakpoint) * 100}%)`
      }]);
      backdropAnimation.keyframes([{
        offset: 0,
        opacity: `calc(var(--backdrop-opacity) * ${getBackdropValueForSheet(1 - breakpointOffset, backdropBreakpoint)})`
      }, {
        offset: 1,
        opacity: `calc(var(--backdrop-opacity) * ${getBackdropValueForSheet(snapToBreakpoint, backdropBreakpoint)})`
      }]);
      animation.progressStep(0);
    }
    /**
     * Gesture should remain disabled until the
     * snapping animation completes.
     */
    gesture.enable(false);
    if (shouldPreventDismiss) {
      handleCanDismiss(baseEl, animation);
    } else if (!shouldRemainOpen) {
      onDismiss();
    }
    return new Promise(resolve => {
      animation.onFinish(() => {
        if (shouldRemainOpen) {
          /**
           * Once the snapping animation completes,
           * we need to reset the animation to go
           * from 0 to 1 so users can swipe in any direction.
           * We then set the animation offset to the current
           * breakpoint so that it starts at the snapped position.
           */
          if (wrapperAnimation && backdropAnimation) {
            (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => {
              wrapperAnimation.keyframes([...SheetDefaults.WRAPPER_KEYFRAMES]);
              backdropAnimation.keyframes([...SheetDefaults.BACKDROP_KEYFRAMES]);
              animation.progressStart(true, 1 - snapToBreakpoint);
              currentBreakpoint = snapToBreakpoint;
              onBreakpointChange(currentBreakpoint);
              /**
               * If the sheet is fully expanded, we can safely
               * enable scrolling again.
               */
              if (contentEl && currentBreakpoint === breakpoints[breakpoints.length - 1]) {
                contentEl.scrollY = true;
              }
              /**
               * Backdrop should become enabled
               * after the backdropBreakpoint value
               */
              const shouldEnableBackdrop = currentBreakpoint > backdropBreakpoint;
              if (shouldEnableBackdrop) {
                enableBackdrop();
              } else {
                disableBackdrop();
              }
              gesture.enable(true);
              resolve();
            });
          } else {
            gesture.enable(true);
            resolve();
          }
        } else {
          resolve();
        }
        /**
         * This must be a one time callback
         * otherwise a new callback will
         * be added every time onEnd runs.
         */
      }, {
        oneTimeCallback: true
      }).progressEnd(1, 0, 500);
    });
  };
  const gesture = (0,_index_422b6e83_js__WEBPACK_IMPORTED_MODULE_14__.createGesture)({
    el: wrapperEl,
    gestureName: 'modalSheet',
    gesturePriority: 40,
    direction: 'y',
    threshold: 10,
    canStart,
    onStart,
    onMove,
    onEnd
  });
  return {
    gesture,
    moveSheetToBreakpoint
  };
};
const modalIosCss = ":host{--width:100%;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--overflow:hidden;--border-radius:0;--border-width:0;--border-style:none;--border-color:transparent;--background:var(--ion-background-color, #fff);--box-shadow:none;--backdrop-opacity:0;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;contain:strict}.modal-wrapper,ion-backdrop{pointer-events:auto}:host(.overlay-hidden){display:none}.modal-wrapper,.modal-shadow{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:var(--overflow);z-index:10}.modal-shadow{position:absolute;background:transparent}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--width:600px;--height:500px;--ion-safe-area-top:0px;--ion-safe-area-bottom:0px;--ion-safe-area-right:0px;--ion-safe-area-left:0px}}@media only screen and (min-width: 768px) and (min-height: 768px){:host{--width:600px;--height:600px}}.modal-handle{left:0px;right:0px;top:5px;border-radius:8px;margin-left:auto;margin-right:auto;position:absolute;width:36px;height:5px;-webkit-transform:translateZ(0);transform:translateZ(0);border:0;background:var(--ion-color-step-350, #c0c0be);cursor:pointer;z-index:11}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.modal-handle{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.modal-handle::before{padding-left:4px;padding-right:4px;padding-top:4px;padding-bottom:4px;position:absolute;width:36px;height:5px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\"\"}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.modal-handle::before{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}:host(.modal-sheet){--height:calc(100% - (var(--ion-safe-area-top) + 10px))}:host(.modal-sheet) .modal-wrapper,:host(.modal-sheet) .modal-shadow{position:absolute;bottom:0}:host{--backdrop-opacity:var(--ion-backdrop-opacity, 0.4)}:host(.modal-card),:host(.modal-sheet){--border-radius:10px}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--border-radius:10px}}.modal-wrapper{-webkit-transform:translate3d(0,  100%,  0);transform:translate3d(0,  100%,  0)}@media screen and (max-width: 767px){@supports (width: max(0px, 1px)){:host(.modal-card){--height:calc(100% - max(30px, var(--ion-safe-area-top)) - 10px)}}@supports not (width: max(0px, 1px)){:host(.modal-card){--height:calc(100% - 40px)}}:host(.modal-card) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host-context([dir=rtl]):host(.modal-card) .modal-wrapper,:host-context([dir=rtl]).modal-card .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host(.modal-card){--backdrop-opacity:0;--width:100%;-ms-flex-align:end;align-items:flex-end}:host(.modal-card) .modal-shadow{display:none}:host(.modal-card) ion-backdrop{pointer-events:none}}@media screen and (min-width: 768px){:host(.modal-card){--width:calc(100% - 120px);--height:calc(100% - (120px + var(--ion-safe-area-top) + var(--ion-safe-area-bottom)));--max-width:720px;--max-height:1000px;--backdrop-opacity:0;--box-shadow:0px 0px 30px 10px rgba(0, 0, 0, 0.1);-webkit-transition:all 0.5s ease-in-out;transition:all 0.5s ease-in-out}:host(.modal-card) .modal-wrapper{-webkit-box-shadow:none;box-shadow:none}:host(.modal-card) .modal-shadow{-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow)}}:host(.modal-sheet) .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}:host-context([dir=rtl]):host(.modal-sheet) .modal-wrapper,:host-context([dir=rtl]).modal-sheet .modal-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0;border-bottom-left-radius:0}";
const modalMdCss = ":host{--width:100%;--min-width:auto;--max-width:auto;--height:100%;--min-height:auto;--max-height:auto;--overflow:hidden;--border-radius:0;--border-width:0;--border-style:none;--border-color:transparent;--background:var(--ion-background-color, #fff);--box-shadow:none;--backdrop-opacity:0;left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;outline:none;contain:strict}.modal-wrapper,ion-backdrop{pointer-events:auto}:host(.overlay-hidden){display:none}.modal-wrapper,.modal-shadow{border-radius:var(--border-radius);width:var(--width);min-width:var(--min-width);max-width:var(--max-width);height:var(--height);min-height:var(--min-height);max-height:var(--max-height);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-shadow:var(--box-shadow);box-shadow:var(--box-shadow);overflow:var(--overflow);z-index:10}.modal-shadow{position:absolute;background:transparent}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--width:600px;--height:500px;--ion-safe-area-top:0px;--ion-safe-area-bottom:0px;--ion-safe-area-right:0px;--ion-safe-area-left:0px}}@media only screen and (min-width: 768px) and (min-height: 768px){:host{--width:600px;--height:600px}}.modal-handle{left:0px;right:0px;top:5px;border-radius:8px;margin-left:auto;margin-right:auto;position:absolute;width:36px;height:5px;-webkit-transform:translateZ(0);transform:translateZ(0);border:0;background:var(--ion-color-step-350, #c0c0be);cursor:pointer;z-index:11}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.modal-handle{margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}.modal-handle::before{padding-left:4px;padding-right:4px;padding-top:4px;padding-bottom:4px;position:absolute;width:36px;height:5px;-webkit-transform:translate(-50%, -50%);transform:translate(-50%, -50%);content:\"\"}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.modal-handle::before{padding-left:unset;padding-right:unset;-webkit-padding-start:4px;padding-inline-start:4px;-webkit-padding-end:4px;padding-inline-end:4px}}:host(.modal-sheet){--height:calc(100% - (var(--ion-safe-area-top) + 10px))}:host(.modal-sheet) .modal-wrapper,:host(.modal-sheet) .modal-shadow{position:absolute;bottom:0}:host{--backdrop-opacity:var(--ion-backdrop-opacity, 0.32)}@media only screen and (min-width: 768px) and (min-height: 600px){:host{--border-radius:2px;--box-shadow:0 28px 48px rgba(0, 0, 0, 0.4)}}.modal-wrapper{-webkit-transform:translate3d(0,  40px,  0);transform:translate3d(0,  40px,  0);opacity:0.01}";
const Modal = class {
  constructor(hostRef) {
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.didPresent = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionModalDidPresent", 7);
    this.willPresent = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionModalWillPresent", 7);
    this.willDismiss = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionModalWillDismiss", 7);
    this.didDismiss = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionModalDidDismiss", 7);
    this.ionBreakpointDidChange = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionBreakpointDidChange", 7);
    this.didPresentShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "didPresent", 7);
    this.willPresentShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "willPresent", 7);
    this.willDismissShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "willDismiss", 7);
    this.didDismissShorthand = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "didDismiss", 7);
    this.triggerController = (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.e)();
    this.modalIndex = modalIds++;
    this.coreDelegate = (0,_framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_4__.C)();
    this.isSheetModal = false;
    this.inheritedAttributes = {};
    this.inline = false;
    // Whether or not modal is being dismissed via gesture
    this.gestureAnimationDismissing = false;
    this.onHandleClick = () => {
      const {
        sheetTransition,
        handleBehavior
      } = this;
      if (handleBehavior !== 'cycle' || sheetTransition !== undefined) {
        /**
         * The sheet modal should not advance to the next breakpoint
         * if the handle behavior is not `cycle` or if the handle
         * is clicked while the sheet is moving to a breakpoint.
         */
        return;
      }
      this.moveToNextBreakpoint();
    };
    this.onBackdropTap = () => {
      const {
        sheetTransition
      } = this;
      if (sheetTransition !== undefined) {
        /**
         * When the handle is double clicked at the largest breakpoint,
         * it will start to move to the first breakpoint. While transitioning,
         * the backdrop will often receive the second click. We prevent the
         * backdrop from dismissing the modal while moving between breakpoints.
         */
        return;
      }
      this.dismiss(undefined, _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.B);
    };
    this.onLifecycle = modalEvent => {
      const el = this.usersElement;
      const name = LIFECYCLE_MAP[modalEvent.type];
      if (el && name) {
        const ev = new CustomEvent(name, {
          bubbles: false,
          cancelable: false,
          detail: modalEvent.detail
        });
        el.dispatchEvent(ev);
      }
    };
    this.presented = false;
    this.hasController = false;
    this.overlayIndex = undefined;
    this.delegate = undefined;
    this.keyboardClose = true;
    this.enterAnimation = undefined;
    this.leaveAnimation = undefined;
    this.breakpoints = undefined;
    this.initialBreakpoint = undefined;
    this.backdropBreakpoint = 0;
    this.handle = undefined;
    this.handleBehavior = 'none';
    this.component = undefined;
    this.componentProps = undefined;
    this.cssClass = undefined;
    this.backdropDismiss = true;
    this.showBackdrop = true;
    this.animated = true;
    this.presentingElement = undefined;
    this.htmlAttributes = undefined;
    this.isOpen = false;
    this.trigger = undefined;
    this.keepContentsMounted = false;
    this.canDismiss = true;
  }
  onIsOpenChange(newValue, oldValue) {
    if (newValue === true && oldValue === false) {
      this.present();
    } else if (newValue === false && oldValue === true) {
      this.dismiss();
    }
  }
  triggerChanged() {
    const {
      trigger,
      el,
      triggerController
    } = this;
    if (trigger) {
      triggerController.addClickListener(el, trigger);
    }
  }
  breakpointsChanged(breakpoints) {
    if (breakpoints !== undefined) {
      this.sortedBreakpoints = breakpoints.sort((a, b) => a - b);
    }
  }
  connectedCallback() {
    const {
      el
    } = this;
    (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.j)(el);
    this.triggerChanged();
  }
  disconnectedCallback() {
    this.triggerController.removeClickListener();
  }
  componentWillLoad() {
    const {
      breakpoints,
      initialBreakpoint,
      el
    } = this;
    this.inheritedAttributes = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.j)(el, ['aria-label', 'role']);
    /**
     * If user has custom ID set then we should
     * not assign the default incrementing ID.
     */
    this.modalId = this.el.hasAttribute('id') ? this.el.getAttribute('id') : `ion-modal-${this.modalIndex}`;
    const isSheetModal = this.isSheetModal = breakpoints !== undefined && initialBreakpoint !== undefined;
    if (isSheetModal) {
      this.currentBreakpoint = this.initialBreakpoint;
    }
    if (breakpoints !== undefined && initialBreakpoint !== undefined && !breakpoints.includes(initialBreakpoint)) {
      (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_7__.p)('Your breakpoints array must include the initialBreakpoint value.');
    }
  }
  componentDidLoad() {
    /**
     * If modal was rendered with isOpen="true"
     * then we should open modal immediately.
     */
    if (this.isOpen === true) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => this.present());
    }
    this.breakpointsChanged(this.breakpoints);
  }
  /**
   * Determines whether or not an overlay
   * is being used inline or via a controller/JS
   * and returns the correct delegate.
   * By default, subsequent calls to getDelegate
   * will use a cached version of the delegate.
   * This is useful for calling dismiss after
   * present so that the correct delegate is given.
   */
  getDelegate(force = false) {
    if (this.workingDelegate && !force) {
      return {
        delegate: this.workingDelegate,
        inline: this.inline
      };
    }
    /**
     * If using overlay inline
     * we potentially need to use the coreDelegate
     * so that this works in vanilla JS apps.
     * If a developer has presented this component
     * via a controller, then we can assume
     * the component is already in the
     * correct place.
     */
    const parentEl = this.el.parentNode;
    const inline = this.inline = parentEl !== null && !this.hasController;
    const delegate = this.workingDelegate = inline ? this.delegate || this.coreDelegate : this.delegate;
    return {
      inline,
      delegate
    };
  }
  /**
   * Determines whether or not the
   * modal is allowed to dismiss based
   * on the state of the canDismiss prop.
   */
  checkCanDismiss(data, role) {
    var _this = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        canDismiss
      } = _this;
      if (typeof canDismiss === 'function') {
        return canDismiss(data, role);
      }
      return canDismiss;
    })();
  }
  /**
   * Present the modal overlay after it has been created.
   */
  present() {
    var _this2 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.presented) {
        return;
      }
      const {
        presentingElement,
        el
      } = _this2;
      /**
       * When using an inline modal
       * and dismissing a modal it is possible to
       * quickly present the modal while it is
       * dismissing. We need to await any current
       * transition to allow the dismiss to finish
       * before presenting again.
       */
      if (_this2.currentTransition !== undefined) {
        yield _this2.currentTransition;
      }
      /**
       * If the modal is presented multiple times (inline modals), we
       * need to reset the current breakpoint to the initial breakpoint.
       */
      _this2.currentBreakpoint = _this2.initialBreakpoint;
      const {
        inline,
        delegate
      } = _this2.getDelegate(true);
      _this2.usersElement = yield (0,_framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_4__.a)(delegate, el, _this2.component, ['ion-page'], _this2.componentProps, inline);
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.m)(el) && (yield (0,_index_93867f4c_js__WEBPACK_IMPORTED_MODULE_11__.e)(_this2.usersElement));
      (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => _this2.el.classList.add('show-modal'));
      _this2.currentTransition = (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.f)(_this2, 'modalEnter', iosEnterAnimation, mdEnterAnimation, {
        presentingEl: presentingElement,
        currentBreakpoint: _this2.initialBreakpoint,
        backdropBreakpoint: _this2.backdropBreakpoint
      });
      /* tslint:disable-next-line */
      if (typeof window !== 'undefined') {
        /**
         * This needs to be setup before any
         * non-transition async work so it can be dereferenced
         * in the dismiss method. The dismiss method
         * only waits for the entering transition
         * to finish. It does not wait for all of the `present`
         * method to resolve.
         */
        _this2.keyboardOpenCallback = () => {
          if (_this2.gesture) {
            /**
             * When the native keyboard is opened and the webview
             * is resized, the gesture implementation will become unresponsive
             * and enter a free-scroll mode.
             *
             * When the keyboard is opened, we disable the gesture for
             * a single frame and re-enable once the contents have repositioned
             * from the keyboard placement.
             */
            _this2.gesture.enable(false);
            (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_5__.r)(() => {
              if (_this2.gesture) {
                _this2.gesture.enable(true);
              }
            });
          }
        };
        window.addEventListener(_keyboard_282b81b8_js__WEBPACK_IMPORTED_MODULE_6__.KEYBOARD_DID_OPEN, _this2.keyboardOpenCallback);
      }
      const hasCardModal = presentingElement !== undefined;
      /**
       * We need to change the status bar at the
       * start of the animation so that it completes
       * by the time the card animation is done.
       */
      if (hasCardModal && (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this2) === 'ios') {
        // Cache the original status bar color before the modal is presented
        _this2.statusBarStyle = yield StatusBar.getStyle();
        setCardStatusBarDark();
      }
      yield _this2.currentTransition;
      if (_this2.isSheetModal) {
        _this2.initSheetGesture();
      } else if (hasCardModal) {
        _this2.initSwipeToClose();
      }
      _this2.currentTransition = undefined;
    })();
  }
  initSwipeToClose() {
    var _this3 = this;
    var _a;
    if ((0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this) !== 'ios') {
      return;
    }
    const {
      el
    } = this;
    // All of the elements needed for the swipe gesture
    // should be in the DOM and referenced by now, except
    // for the presenting el
    const animationBuilder = this.leaveAnimation || _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.c.get('modalLeave', iosLeaveAnimation);
    const ani = this.animation = animationBuilder(el, {
      presentingEl: this.presentingElement
    });
    const contentEl = (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.a)(el);
    if (!contentEl) {
      (0,_index_455f6202_js__WEBPACK_IMPORTED_MODULE_3__.p)(el);
      return;
    }
    const statusBarStyle = (_a = this.statusBarStyle) !== null && _a !== void 0 ? _a : Style.Default;
    this.gesture = createSwipeToCloseGesture(el, ani, statusBarStyle, () => {
      /**
       * While the gesture animation is finishing
       * it is possible for a user to tap the backdrop.
       * This would result in the dismiss animation
       * being played again. Typically this is avoided
       * by setting `presented = false` on the overlay
       * component; however, we cannot do that here as
       * that would prevent the element from being
       * removed from the DOM.
       */
      this.gestureAnimationDismissing = true;
      this.animation.onFinish( /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        yield _this3.dismiss(undefined, _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.G);
        _this3.gestureAnimationDismissing = false;
      }));
    });
    this.gesture.enable(true);
  }
  initSheetGesture() {
    const {
      wrapperEl,
      initialBreakpoint,
      backdropBreakpoint
    } = this;
    if (!wrapperEl || initialBreakpoint === undefined) {
      return;
    }
    const animationBuilder = this.enterAnimation || _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.c.get('modalEnter', iosEnterAnimation);
    const ani = this.animation = animationBuilder(this.el, {
      presentingEl: this.presentingElement,
      currentBreakpoint: initialBreakpoint,
      backdropBreakpoint
    });
    ani.progressStart(true, 1);
    const {
      gesture,
      moveSheetToBreakpoint
    } = createSheetGesture(this.el, this.backdropEl, wrapperEl, initialBreakpoint, backdropBreakpoint, ani, this.sortedBreakpoints, () => {
      var _a;
      return (_a = this.currentBreakpoint) !== null && _a !== void 0 ? _a : 0;
    }, () => this.sheetOnDismiss(), breakpoint => {
      if (this.currentBreakpoint !== breakpoint) {
        this.currentBreakpoint = breakpoint;
        this.ionBreakpointDidChange.emit({
          breakpoint
        });
      }
    });
    this.gesture = gesture;
    this.moveSheetToBreakpoint = moveSheetToBreakpoint;
    this.gesture.enable(true);
  }
  sheetOnDismiss() {
    var _this4 = this;
    /**
     * While the gesture animation is finishing
     * it is possible for a user to tap the backdrop.
     * This would result in the dismiss animation
     * being played again. Typically this is avoided
     * by setting `presented = false` on the overlay
     * component; however, we cannot do that here as
     * that would prevent the element from being
     * removed from the DOM.
     */
    this.gestureAnimationDismissing = true;
    this.animation.onFinish( /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      _this4.currentBreakpoint = 0;
      _this4.ionBreakpointDidChange.emit({
        breakpoint: _this4.currentBreakpoint
      });
      yield _this4.dismiss(undefined, _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.G);
      _this4.gestureAnimationDismissing = false;
    }));
  }
  /**
   * Dismiss the modal overlay after it has been presented.
   *
   * @param data Any data to emit in the dismiss events.
   * @param role The role of the element that is dismissing the modal. For example, 'cancel' or 'backdrop'.
   */
  dismiss(data, role) {
    var _this5 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;
      if (_this5.gestureAnimationDismissing && role !== _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.G) {
        return false;
      }
      /**
       * If a canDismiss handler is responsible
       * for calling the dismiss method, we should
       * not run the canDismiss check again.
       */
      if (role !== 'handler' && !(yield _this5.checkCanDismiss(data, role))) {
        return false;
      }
      const {
        presentingElement
      } = _this5;
      /**
       * We need to start the status bar change
       * before the animation so that the change
       * finishes when the dismiss animation does.
       */
      const hasCardModal = presentingElement !== undefined;
      if (hasCardModal && (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(_this5) === 'ios') {
        setCardStatusBarDefault(_this5.statusBarStyle);
      }
      /* tslint:disable-next-line */
      if (typeof window !== 'undefined' && _this5.keyboardOpenCallback) {
        window.removeEventListener(_keyboard_282b81b8_js__WEBPACK_IMPORTED_MODULE_6__.KEYBOARD_DID_OPEN, _this5.keyboardOpenCallback);
        _this5.keyboardOpenCallback = undefined;
      }
      /**
       * When using an inline modal
       * and presenting a modal it is possible to
       * quickly dismiss the modal while it is
       * presenting. We need to await any current
       * transition to allow the present to finish
       * before dismissing again.
       */
      if (_this5.currentTransition !== undefined) {
        yield _this5.currentTransition;
      }
      const enteringAnimation = _overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.k.get(_this5) || [];
      _this5.currentTransition = (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.g)(_this5, data, role, 'modalLeave', iosLeaveAnimation, mdLeaveAnimation, {
        presentingEl: presentingElement,
        currentBreakpoint: (_a = _this5.currentBreakpoint) !== null && _a !== void 0 ? _a : _this5.initialBreakpoint,
        backdropBreakpoint: _this5.backdropBreakpoint
      });
      const dismissed = yield _this5.currentTransition;
      if (dismissed) {
        const {
          delegate
        } = _this5.getDelegate();
        yield (0,_framework_delegate_28f7ea29_js__WEBPACK_IMPORTED_MODULE_4__.d)(delegate, _this5.usersElement);
        (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.w)(() => _this5.el.classList.remove('show-modal'));
        if (_this5.animation) {
          _this5.animation.destroy();
        }
        if (_this5.gesture) {
          _this5.gesture.destroy();
        }
        enteringAnimation.forEach(ani => ani.destroy());
      }
      _this5.currentBreakpoint = undefined;
      _this5.currentTransition = undefined;
      _this5.animation = undefined;
      return dismissed;
    })();
  }
  /**
   * Returns a promise that resolves when the modal did dismiss.
   */
  onDidDismiss() {
    return (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.h)(this.el, 'ionModalDidDismiss');
  }
  /**
   * Returns a promise that resolves when the modal will dismiss.
   */
  onWillDismiss() {
    return (0,_overlays_166b34ae_js__WEBPACK_IMPORTED_MODULE_9__.h)(this.el, 'ionModalWillDismiss');
  }
  /**
   * Move a sheet style modal to a specific breakpoint. The breakpoint value must
   * be a value defined in your `breakpoints` array.
   */
  setCurrentBreakpoint(breakpoint) {
    var _this6 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this6.isSheetModal) {
        (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_7__.p)('setCurrentBreakpoint is only supported on sheet modals.');
        return;
      }
      if (!_this6.breakpoints.includes(breakpoint)) {
        (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_7__.p)(`Attempted to set invalid breakpoint value ${breakpoint}. Please double check that the breakpoint value is part of your defined breakpoints.`);
        return;
      }
      const {
        currentBreakpoint,
        moveSheetToBreakpoint,
        canDismiss,
        breakpoints
      } = _this6;
      if (currentBreakpoint === breakpoint) {
        return;
      }
      if (moveSheetToBreakpoint) {
        _this6.sheetTransition = moveSheetToBreakpoint({
          breakpoint,
          breakpointOffset: 1 - currentBreakpoint,
          canDismiss: canDismiss !== undefined && canDismiss !== true && breakpoints[0] === 0
        });
        yield _this6.sheetTransition;
        _this6.sheetTransition = undefined;
      }
    })();
  }
  /**
   * Returns the current breakpoint of a sheet style modal
   */
  getCurrentBreakpoint() {
    var _this7 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return _this7.currentBreakpoint;
    })();
  }
  moveToNextBreakpoint() {
    var _this8 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        breakpoints,
        currentBreakpoint
      } = _this8;
      if (!breakpoints || currentBreakpoint == null) {
        /**
         * If the modal does not have breakpoints and/or the current
         * breakpoint is not set, we can't move to the next breakpoint.
         */
        return false;
      }
      const allowedBreakpoints = breakpoints.filter(b => b !== 0);
      const currentBreakpointIndex = allowedBreakpoints.indexOf(currentBreakpoint);
      const nextBreakpointIndex = (currentBreakpointIndex + 1) % allowedBreakpoints.length;
      const nextBreakpoint = allowedBreakpoints[nextBreakpointIndex];
      /**
       * Sets the current breakpoint to the next available breakpoint.
       * If the current breakpoint is the last breakpoint, we set the current
       * breakpoint to the first non-zero breakpoint to avoid dismissing the sheet.
       */
      yield _this8.setCurrentBreakpoint(nextBreakpoint);
      return true;
    })();
  }
  render() {
    const {
      handle,
      isSheetModal,
      presentingElement,
      htmlAttributes,
      handleBehavior,
      inheritedAttributes
    } = this;
    const showHandle = handle !== false && isSheetModal;
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_2__.b)(this);
    const {
      modalId
    } = this;
    const isCardModal = presentingElement !== undefined && mode === 'ios';
    const isHandleCycle = handleBehavior === 'cycle';
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, Object.assign({
      "no-router": true,
      tabindex: "-1"
    }, htmlAttributes, {
      style: {
        zIndex: `${20000 + this.overlayIndex}`
      },
      class: Object.assign({
        [mode]: true,
        ['modal-default']: !isCardModal && !isSheetModal,
        [`modal-card`]: isCardModal,
        [`modal-sheet`]: isSheetModal,
        'overlay-hidden': true
      }, (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_10__.g)(this.cssClass)),
      id: modalId,
      onIonBackdropTap: this.onBackdropTap,
      onIonModalDidPresent: this.onLifecycle,
      onIonModalWillPresent: this.onLifecycle,
      onIonModalWillDismiss: this.onLifecycle,
      onIonModalDidDismiss: this.onLifecycle
    }), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-backdrop", {
      ref: el => this.backdropEl = el,
      visible: this.showBackdrop,
      tappable: this.backdropDismiss,
      part: "backdrop"
    }), mode === 'ios' && (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "modal-shadow"
    }), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", Object.assign({
      /*
        role and aria-modal must be used on the
        same element. They must also be set inside the
        shadow DOM otherwise ion-button will not be highlighted
        when using VoiceOver: https://bugs.webkit.org/show_bug.cgi?id=247134
      */
      role: "dialog"
    }, inheritedAttributes, {
      "aria-modal": "true",
      class: "modal-wrapper ion-overlay-wrapper",
      part: "content",
      ref: el => this.wrapperEl = el
    }), showHandle && (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      class: "modal-handle",
      // Prevents the handle from receiving keyboard focus when it does not cycle
      tabIndex: !isHandleCycle ? -1 : 0,
      "aria-label": "Activate to adjust the size of the dialog overlaying the screen",
      onClick: isHandleCycle ? this.onHandleClick : undefined,
      part: "handle"
    }), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)));
  }
  get el() {
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "isOpen": ["onIsOpenChange"],
      "trigger": ["triggerChanged"]
    };
  }
};
const LIFECYCLE_MAP = {
  ionModalDidPresent: 'ionViewDidEnter',
  ionModalWillPresent: 'ionViewWillEnter',
  ionModalWillDismiss: 'ionViewWillLeave',
  ionModalDidDismiss: 'ionViewDidLeave'
};
let modalIds = 0;
Modal.style = {
  ios: modalIosCss,
  md: modalMdCss
};


/***/ }),

/***/ 320:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": () => (/* binding */ createColorClasses),
/* harmony export */   "g": () => (/* binding */ getClassMap),
/* harmony export */   "h": () => (/* binding */ hostContext),
/* harmony export */   "o": () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */
const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};
const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }
  return [];
};
const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};
const SCHEME = /^[a-z][a-z0-9+\-.]*:/;
const openURL = /*#__PURE__*/function () {
  var _ref = (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');
      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }
        return router.push(url, direction, animation);
      }
    }
    return false;
  });
  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLW1vZGFsX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDNkg7QUFDbkQ7QUFDbUg7QUFDNUU7QUFDWTtBQUNsRTtBQUNBO0FBQ1o7QUFDOEk7QUFDdEk7QUFDRjtBQUNVO0FBQ1c7QUFDdEI7QUFDUjtBQUNGO0FBRTFDLElBQUl5RCxLQUFLO0FBQ1QsQ0FBQyxVQUFVQSxLQUFLLEVBQUU7RUFDaEJBLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNO0VBQ3RCQSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTztFQUN4QkEsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLFNBQVM7QUFDOUIsQ0FBQyxFQUFFQSxLQUFLLEtBQUtBLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLE1BQU1DLFNBQVMsR0FBRztFQUNoQkMsU0FBU0EsQ0FBQSxFQUFHO0lBQ1YsSUFBSUMsRUFBRTtJQUNOLE9BQU8sQ0FBQyxDQUFDQSxFQUFFLEdBQUdyQixpREFBRyxLQUFLLElBQUksSUFBSUEsaURBQUcsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsMkRBQWEsTUFBTSxJQUFJLElBQUlxQixFQUFFLEtBQUssS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUdBLEVBQUUsQ0FBQ0UsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE1BQU12QixpREFBRyxLQUFLLElBQUksSUFBSUEsaURBQUcsS0FBSyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBR0EsNkVBQStCLENBQUM7RUFDL04sQ0FBQztFQUNEeUIsNkJBQTZCQSxDQUFBLEVBQUc7SUFDOUIsSUFBSUosRUFBRTtJQUNOO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNJLE9BQU8sQ0FBQyxFQUFFLENBQUNBLEVBQUUsR0FBR3JCLGlEQUFH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RyxJQUFJLENBQUNGLE1BQU0sQ0FBQ0csSUFBSSxDQUFDRCxHQUFHLENBQUMsRUFBRTtNQUN0RCxNQUFNRSxNQUFNLEdBQUcxTixRQUFRLENBQUNuRSxhQUFhLENBQUMsWUFBWSxDQUFDO01BQ25ELElBQUk2UixNQUFNLEVBQUU7UUFDVixJQUFJMUgsRUFBRSxJQUFJLElBQUksRUFBRTtVQUNkQSxFQUFFLENBQUMySCxjQUFjLEVBQUU7UUFDckI7UUFDQSxPQUFPRCxNQUFNLENBQUNFLElBQUksQ0FBQ0osR0FBRyxFQUFFL1AsU0FBUyxFQUFFOUQsU0FBUyxDQUFDO01BQy9DO0lBQ0Y7SUFDQSxPQUFPLEtBQUs7RUFDZCxDQUFDO0VBQUEsZ0JBWEs0VCxPQUFPQSxDQUFBclQsRUFBQSxFQUFBQyxHQUFBLEVBQUEwVCxHQUFBLEVBQUFDLEdBQUE7SUFBQSxPQUFBdFYsSUFBQSxDQUFBSyxLQUFBLE9BQUFDLFNBQUE7RUFBQTtBQUFBLEdBV1oiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1tb2RhbC5lbnRyeS5qcyIsIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL3RoZW1lLTc2NzAzNDFjLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5pbXBvcnQgeyByIGFzIHJlZ2lzdGVySW5zdGFuY2UsIGQgYXMgY3JlYXRlRXZlbnQsIHcgYXMgd3JpdGVUYXNrLCBoLCBIIGFzIEhvc3QsIGYgYXMgZ2V0RWxlbWVudCB9IGZyb20gJy4vaW5kZXgtYmUyMThkNzAuanMnO1xuaW1wb3J0IHsgYiBhcyBnZXRJb25Nb2RlLCBjIGFzIGNvbmZpZyB9IGZyb20gJy4vaW9uaWMtZ2xvYmFsLTNiMjhhMjI1LmpzJztcbmltcG9ydCB7IGYgYXMgZmluZENsb3Nlc3RJb25Db250ZW50LCBpIGFzIGlzSW9uQ29udGVudCwgZCBhcyBkaXNhYmxlQ29udGVudFNjcm9sbFksIHIgYXMgcmVzZXRDb250ZW50U2Nyb2xsWSwgYSBhcyBmaW5kSW9uQ29udGVudCwgcCBhcyBwcmludElvbkNvbnRlbnRFcnJvck1zZyB9IGZyb20gJy4vaW5kZXgtNDU1ZjYyMDIuanMnO1xuaW1wb3J0IHsgQyBhcyBDb3JlRGVsZWdhdGUsIGEgYXMgYXR0YWNoQ29tcG9uZW50LCBkIGFzIGRldGFjaENvbXBvbmVudCB9IGZyb20gJy4vZnJhbWV3b3JrLWRlbGVnYXRlLTI4ZjdlYTI5LmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0RWxlbWVudFJvb3QsIGwgYXMgY2xhbXAsIHIgYXMgcmFmLCBqIGFzIGluaGVyaXRBdHRyaWJ1dGVzLCBtIGFzIGhhc0xhenlCdWlsZCB9IGZyb20gJy4vaGVscGVycy01ZWI2MzY0ZC5qcyc7XG5pbXBvcnQgeyBLRVlCT0FSRF9ESURfT1BFTiB9IGZyb20gJy4va2V5Ym9hcmQtMjgyYjgxYjguanMnO1xuaW1wb3J0IHsgcCBhcyBwcmludElvbldhcm5pbmcgfSBmcm9tICcuL2luZGV4LWU4NmYwMTE3LmpzJztcbmltcG9ydCB7IHcgYXMgd2luIH0gZnJvbSAnLi9pbmRleC0zM2ZmZWMyNS5qcyc7XG5pbXBvcnQgeyBHIGFzIEdFU1RVUkUsIGUgYXMgY3JlYXRlVHJpZ2dlckNvbnRyb2xsZXIsIEIgYXMgQkFDS0RST1AsIGogYXMgcHJlcGFyZU92ZXJsYXksIGYgYXMgcHJlc2VudCwgayBhcyBhY3RpdmVBbmltYXRpb25zLCBnIGFzIGRpc21pc3MsIGggYXMgZXZlbnRNZXRob2QgfSBmcm9tICcuL292ZXJsYXlzLTE2NmIzNGFlLmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0Q2xhc3NNYXAgfSBmcm9tICcuL3RoZW1lLTc2NzAzNDFjLmpzJztcbmltcG9ydCB7IGUgYXMgZGVlcFJlYWR5IH0gZnJvbSAnLi9pbmRleC05Mzg2N2Y0Yy5qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUFuaW1hdGlvbiB9IGZyb20gJy4vYW5pbWF0aW9uLTlhODkwY2FkLmpzJztcbmltcG9ydCB7IGcgYXMgZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24gfSBmcm9tICcuL2N1YmljLWJlemllci1lNzhkMTMwNy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVHZXN0dXJlIH0gZnJvbSAnLi9pbmRleC00MjJiNmU4My5qcyc7XG5pbXBvcnQgJy4vaGFyZHdhcmUtYmFjay1idXR0b24tNDkwZGYxMTUuanMnO1xuaW1wb3J0ICcuL2dlc3R1cmUtY29udHJvbGxlci0xNzA2MGI3Yy5qcyc7XG5cbnZhciBTdHlsZTtcbihmdW5jdGlvbiAoU3R5bGUpIHtcbiAgU3R5bGVbXCJEYXJrXCJdID0gXCJEQVJLXCI7XG4gIFN0eWxlW1wiTGlnaHRcIl0gPSBcIkxJR0hUXCI7XG4gIFN0eWxlW1wiRGVmYXVsdFwiXSA9IFwiREVGQVVMVFwiO1xufSkoU3R5bGUgfHwgKFN0eWxlID0ge30pKTtcbmNvbnN0IFN0YXR1c0JhciA9IHtcbiAgZ2V0RW5naW5lKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IHdpbiA9PT0gbnVsbCB8fCB3aW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHdpbi5DYXBhY2l0b3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pc1BsdWdpbkF2YWlsYWJsZSgnU3RhdHVzQmFyJykpICYmICh3aW4gPT09IG51bGwgfHwgd2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW4uQ2FwYWNpdG9yLlBsdWdpbnMuU3RhdHVzQmFyKTtcbiAgfSxcbiAgc3VwcG9ydHNEZWZhdWx0U3RhdHVzQmFyU3R5bGUoKSB7XG4gICAgdmFyIF9hO1xuICAgIC8qKlxuICAgICAqIFRoZSAnREVGQVVMVCcgc3RhdHVzIGJhciBzdHlsZSB3YXMgYWRkZWRcbiAgICAgKiB0byB0aGUgQGNhcGFjaXRvci9zdGF0dXMtYmFyIHBsdWdpbiBpbiBDYXBhY2l0b3IgMy5cbiAgICAgKiBQbHVnaW5IZWFkZXJzIGlzIG9ubHkgc3VwcG9ydGVkIGluIENhcGFjaXRvciAzKyxcbiAgICAgKiBzbyB3ZSBjYW4gdXNlIHRoaXMgdG8gZGV0ZWN0IENhcGFjaXRvciAzLlxuICAgICAqL1xuICAgIHJldHVybiAhISgoX2EgPSB3aW4gPT09IG51bGwgfHwgd2luID09PSB2b2lkIDAgPyB2b2lkIDAgOiB3aW4uQ2FwYWNpdG9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuUGx1Z2luSGVhZGVycyk7XG4gIH0sXG4gIHNldFN0eWxlKG9wdGlvbnMpIHtcbiAgICBjb25zdCBlbmdpbmUgPSB0aGlzLmdldEVuZ2luZSgpO1xuICAgIGlmICghZW5naW5lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVuZ2luZS5zZXRTdHlsZShvcHRpb25zKTtcbiAgfSxcbiAgZ2V0U3R5bGU6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBlbmdpbmUgPSB0aGlzLmdldEVuZ2luZSgpO1xuICAgIGlmICghZW5naW5lKSB7XG4gICAgICByZXR1cm4gU3R5bGUuRGVmYXVsdDtcbiAgICB9XG4gICAgY29uc3QgeyBzdHlsZSB9ID0gYXdhaXQgZW5naW5lLmdldEluZm8oKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG59O1xuXG4vKipcbiAqIFVzZSB5ID0gbXggKyBiIHRvXG4gKiBmaWd1cmUgb3V0IHRoZSBiYWNrZHJvcCB2YWx1ZVxuICogYXQgYSBwYXJ0aWN1bGFyIHggY29vcmRpbmF0ZS4gVGhpc1xuICogaXMgdXNlZnVsIHdoZW4gdGhlIGJhY2tkcm9wIGRvZXNcbiAqIG5vdCBiZWdpbiB0byBmYWRlIGluIHVudGlsIGFmdGVyXG4gKiB0aGUgMCBicmVha3BvaW50LlxuICovXG5jb25zdCBnZXRCYWNrZHJvcFZhbHVlRm9yU2hlZXQgPSAoeCwgYmFja2Ryb3BCcmVha3BvaW50KSA9PiB7XG4gIC8qKlxuICAgKiBXZSB3aWxsIHVzZSB0aGVzZSBwb2ludHM6XG4gICAqIChiYWNrZHJvcEJyZWFrcG9pbnQsIDApXG4gICAqIChtYXhCcmVha3BvaW50LCAxKVxuICAgKiBXZSBrbm93IHRoYXQgYXQgdGhlIGJlZ2lubmluZyBicmVha3BvaW50LFxuICAgKiB0aGUgYmFja2Ryb3Agd2lsbCBiZSBoaWRkZW4uIFdlIGFsc29cbiAgICoga25vdyB0aGF0IGF0IHRoZSBtYXhCcmVha3BvaW50LCB0aGUgYmFja2Ryb3BcbiAgICogbXVzdCBiZSBmdWxseSB2aXNpYmxlLiBtYXhCcmVha3BvaW50IHNob3VsZFxuICAgKiBhbHdheXMgYmUgMSBldmVuIGlmIHRoZSBtYXhpbXVtIHZhbHVlXG4gICAqIG9mIHRoZSBicmVha3BvaW50cyBhcnJheSBpcyBub3QgMSBzaW5jZVxuICAgKiB0aGUgYW5pbWF0aW9uIHJ1bnMgZnJvbSBhIHByb2dyZXNzIG9mIDBcbiAgICogdG8gYSBwcm9ncmVzcyBvZiAxLlxuICAgKiBtID0gKHkyIC0geTEpIC8gKHgyIC0geDEpXG4gICAqXG4gICAqIFRoaXMgaXMgc2ltcGxpZmllZCBmcm9tOlxuICAgKiBtID0gKDEgLSAwKSAvIChtYXhCcmVha3BvaW50IC0gYmFja2Ryb3BCcmVha3BvaW50KVxuICAgKlxuICAgKiBJZiB0aGUgYmFja2Ryb3BCcmVha3BvaW50IGlzIDEsIHdlIHJldHVybiAwIGFzIHRoZVxuICAgKiBiYWNrZHJvcCBpcyBjb21wbGV0ZWx5IGhpZGRlbi5cbiAgICpcbiAgICovXG4gIGlmIChiYWNrZHJvcEJyZWFrcG9pbnQgPT09IDEpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICBjb25zdCBzbG9wZSA9IDEgLyAoMSAtIGJhY2tkcm9wQnJlYWtwb2ludCk7XG4gIC8qKlxuICAgKiBGcm9tIGhlcmUsIGNvbXB1dGUgYiB3aGljaCBpc1xuICAgKiB0aGUgYmFja2Ryb3Agb3BhY2l0eSBpZiB0aGUgb2Zmc2V0XG4gICAqIGlzIDAuIElmIHRoZSBiYWNrZHJvcCBkb2VzIG5vdFxuICAgKiBiZWdpbiB0byBmYWRlIGluIHVudGlsIGFmdGVyIHRoZVxuICAgKiAwIGJyZWFrcG9pbnQsIHRoaXMgYiB2YWx1ZSB3aWxsIGJlXG4gICAqIG5lZ2F0aXZlLiBUaGlzIGlzIGZpbmUgYXMgd2UgbmV2ZXIgcGFzc1xuICAgKiBiIGRpcmVjdGx5IGludG8gdGhlIGFuaW1hdGlvbiBrZXlmcmFtZXMuXG4gICAqIGIgPSB5IC0gbXhcbiAgICogVXNlIGEga25vd24gcG9pbnQ6IChiYWNrZHJvcEJyZWFrcG9pbnQsIDApXG4gICAqIFRoaXMgaXMgc2ltcGxpZmllZCBmcm9tOlxuICAgKiBiID0gMCAtIChiYWNrZHJvcEJyZWFrcG9pbnQgKiBzbG9wZSlcbiAgICovXG4gIGNvbnN0IGIgPSAtKGJhY2tkcm9wQnJlYWtwb2ludCAqIHNsb3BlKTtcbiAgLyoqXG4gICAqIEZpbmFsbHksIHdlIGNhbiBub3cgZGV0ZXJtaW5lIHRoZVxuICAgKiBiYWNrZHJvcCBvZmZzZXQgZ2l2ZW4gYW4gYXJiaXRyYXJ5XG4gICAqIGdlc3R1cmUgb2Zmc2V0LlxuICAgKi9cbiAgcmV0dXJuIHggKiBzbG9wZSArIGI7XG59O1xuLyoqXG4gKiBUaGUgdGFibGV0L2Rlc2t0b3AgY2FyZCBtb2RhbCBhY3RpdmF0ZXNcbiAqIHdoZW4gdGhlIHdpbmRvdyB3aWR0aCBpcyA+PSA3NjguXG4gKiBBdCB0aGF0IHBvaW50LCB0aGUgcHJlc2VudGluZyBlbGVtZW50XG4gKiBpcyBub3QgdHJhbnNmb3JtZWQsIHNvIHdlIGRvIG5vdCBuZWVkIHRvXG4gKiBhZGp1c3QgdGhlIHN0YXR1cyBiYXIgY29sb3IuXG4gKlxuICogTm90ZTogV2UgY2hlY2sgc3VwcG9ydHNEZWZhdWx0U3RhdHVzQmFyU3R5bGUgc28gdGhhdFxuICogQ2FwYWNpdG9yIDw9IDIgdXNlcnMgZG8gbm90IGdldCB0aGVpciBzdGF0dXMgYmFyXG4gKiBzdHVjayBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgZHVlIHRvIGEgbGFjayBvZlxuICogc3VwcG9ydCBmb3IgU3R5bGUuRGVmYXVsdC5cbiAqL1xuY29uc3Qgc2V0Q2FyZFN0YXR1c0JhckRhcmsgPSAoKSA9PiB7XG4gIGlmICghd2luIHx8IHdpbi5pbm5lcldpZHRoID49IDc2OCB8fCAhU3RhdHVzQmFyLnN1cHBvcnRzRGVmYXVsdFN0YXR1c0JhclN0eWxlKCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgU3RhdHVzQmFyLnNldFN0eWxlKHsgc3R5bGU6IFN0eWxlLkRhcmsgfSk7XG59O1xuY29uc3Qgc2V0Q2FyZFN0YXR1c0JhckRlZmF1bHQgPSAoZGVmYXVsdFN0eWxlID0gU3R5bGUuRGVmYXVsdCkgPT4ge1xuICBpZiAoIXdpbiB8fCB3aW4uaW5uZXJXaWR0aCA+PSA3NjggfHwgIVN0YXR1c0Jhci5zdXBwb3J0c0RlZmF1bHRTdGF0dXNCYXJTdHlsZSgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFN0YXR1c0Jhci5zZXRTdHlsZSh7IHN0eWxlOiBkZWZhdWx0U3R5bGUgfSk7XG59O1xuXG5jb25zdCBoYW5kbGVDYW5EaXNtaXNzID0gYXN5bmMgKGVsLCBhbmltYXRpb24pID0+IHtcbiAgLyoqXG4gICAqIElmIGNhbkRpc21pc3MgaXMgbm90IGEgZnVuY3Rpb25cbiAgICogdGhlbiB3ZSBjYW4gcmV0dXJuIGVhcmx5LiBJZiBjYW5EaXNtaXNzIGlzIGB0cnVlYCxcbiAgICogdGhlbiBjYW5EaXNtaXNzQmxvY2tzR2VzdHVyZSBpcyBgZmFsc2VgIGFzIGNhbkRpc21pc3NcbiAgICogd2lsbCBuZXZlciBpbnRlcnJ1cHQgdGhlIGdlc3R1cmUuIEFzIGEgcmVzdWx0LFxuICAgKiB0aGlzIGNvZGUgYmxvY2sgaXMgbmV2ZXIgcmVhY2hlZC4gSWYgY2FuRGlzbWlzcyBpcyBgZmFsc2VgLFxuICAgKiB0aGVuIHdlIG5ldmVyIGRpc21pc3MuXG4gICAqL1xuICBpZiAodHlwZW9mIGVsLmNhbkRpc21pc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLyoqXG4gICAqIFJ1biB0aGUgY2FuRGlzbWlzcyBjYWxsYmFjay5cbiAgICogSWYgdGhlIGZ1bmN0aW9uIHJldHVybnMgYHRydWVgLFxuICAgKiB0aGVuIHdlIGNhbiBwcm9jZWVkIHdpdGggZGlzbWlzcy5cbiAgICovXG4gIGNvbnN0IHNob3VsZERpc21pc3MgPSBhd2FpdCBlbC5jYW5EaXNtaXNzKHVuZGVmaW5lZCwgR0VTVFVSRSk7XG4gIGlmICghc2hvdWxkRGlzbWlzcykge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogSWYgY2FuRGlzbWlzcyByZXNvbHZlZCBhZnRlciB0aGUgc25hcFxuICAgKiBiYWNrIGFuaW1hdGlvbiBmaW5pc2hlZCwgd2UgY2FuXG4gICAqIGRpc21pc3MgaW1tZWRpYXRlbHkuXG4gICAqXG4gICAqIElmIGNhbkRpc21pc3MgcmVzb2x2ZWQgYmVmb3JlIHRoZSBzbmFwXG4gICAqIGJhY2sgYW5pbWF0aW9uIGZpbmlzaGVkLCB3ZSBuZWVkIHRvXG4gICAqIHdhaXQgdW50aWwgdGhlIHNuYXAgYmFjayBhbmltYXRpb24gaXNcbiAgICogZG9uZSBiZWZvcmUgZGlzbWlzc2luZy5cbiAgICovXG4gIGlmIChhbmltYXRpb24uaXNSdW5uaW5nKCkpIHtcbiAgICBhbmltYXRpb24ub25GaW5pc2goKCkgPT4ge1xuICAgICAgZWwuZGlzbWlzcyh1bmRlZmluZWQsICdoYW5kbGVyJyk7XG4gICAgfSwgeyBvbmVUaW1lQ2FsbGJhY2s6IHRydWUgfSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZWwuZGlzbWlzcyh1bmRlZmluZWQsICdoYW5kbGVyJyk7XG4gIH1cbn07XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbGV0cyB1cyBzaW11bGF0ZSBhIHJlYWxpc3RpYyBzcHJpbmctbGlrZSBhbmltYXRpb25cbiAqIHdoZW4gc3dpcGluZyBkb3duIG9uIHRoZSBtb2RhbC5cbiAqIFRoZXJlIGFyZSB0d28gZm9yY2VzIHRoYXQgd2UgbmVlZCB0byB1c2UgdG8gY29tcHV0ZSB0aGUgc3ByaW5nIHBoeXNpY3M6XG4gKlxuICogMS4gU3RpZmZuZXNzLCBrOiBUaGlzIGlzIGEgbWVhc3VyZSBvZiByZXNpc3RhbmNlIGFwcGxpZWQgYSBzcHJpbmcuXG4gKiAyLiBEYW1wZW5pbmcsIGM6IFRoaXMgdmFsdWUgaGFzIHRoZSBlZmZlY3Qgb2YgcmVkdWNpbmcgb3IgcHJldmVudGluZyBvc2NpbGxhdGlvbi5cbiAqXG4gKiBVc2luZyB0aGVzZSB0d28gdmFsdWVzLCB3ZSBjYW4gY2FsY3VsYXRlIHRoZSBTcHJpbmcgRm9yY2UgYW5kIHRoZSBEYW1wZW5pbmcgRm9yY2VcbiAqIHRvIGNvbXB1dGUgdGhlIHRvdGFsIGZvcmNlIGFwcGxpZWQgdG8gYSBzcHJpbmcuXG4gKlxuICogU3ByaW5nIEZvcmNlOiBUaGlzIGZvcmNlIHB1bGxzIGEgc3ByaW5nIGJhY2sgaW50byBpdHMgZXF1aWxpYnJpdW0gcG9zaXRpb24uXG4gKiBIb29rZSdzIExhdyB0ZWxscyB1cyB0aGF0IHRoYXQgc3ByaW5nIGZvcmNlIChGUykgPSBrWC5cbiAqIGsgaXMgdGhlIHN0aWZmbmVzcyBvZiBhIHNwcmluZywgYW5kIFggaXMgdGhlIGRpc3BsYWNlbWVudCBvZiB0aGUgc3ByaW5nIGZyb20gaXRzXG4gKiBlcXVpbGlicml1bSBwb3NpdGlvbi4gSW4gdGhpcyBjYXNlLCBpdCBpcyB0aGUgYW1vdW50IGJ5IHdoaWNoIHRoZSBmcmVlIGVuZFxuICogb2YgYSBzcHJpbmcgd2FzIGRpc3BsYWNlZCAoc3RyZXRjaGVkL3B1c2hlZCkgZnJvbSBpdHMgXCJyZWxheGVkXCIgcG9zaXRpb24uXG4gKlxuICogRGFtcGVuaW5nIEZvcmNlOiBUaGlzIGZvcmNlIHNsb3dzIGRvd24gbW90aW9uLiBXaXRob3V0IGl0LCBhIHNwcmluZyB3b3VsZCBvc2NpbGxhdGUgZm9yZXZlci5cbiAqIFRoZSBkYW1wZW5pbmcgZm9yY2UsIEZELCBjYW4gYmUgZm91bmQgdmlhIHRoaXMgZm9ybXVsYTogRkQgPSAtY3ZcbiAqIHdoZXJlIGMgdGhlIGRhbXBlbmluZyB2YWx1ZSBhbmQgdiBpcyB2ZWxvY2l0eS5cbiAqXG4gKiBUaGVyZWZvcmUsIHRoZSByZXN1bHRpbmcgZm9yY2UgdGhhdCBpcyBleGVydGVkIG9uIHRoZSBibG9jayBpczpcbiAqIEYgPSBGUyArIEZEID0gLWtYIC0gY3ZcbiAqXG4gKiBOZXd0b24ncyAybmQgTGF3IHRlbGxzIHVzIHRoYXQgRiA9IG1hOlxuICogbWEgPSAta1ggLSBjdi5cbiAqXG4gKiBGb3IgSW9uaWMncyBwdXJwb3Nlcywgd2UgY2FuIGFzc3VtZSB0aGF0IG0gPSAxOlxuICogYSA9IC1rWCAtIGN2XG4gKlxuICogSW1hZ2luZSBhIGJsb2NrIGF0dGFjaGVkIHRvIHRoZSBlbmQgb2YgYSBzcHJpbmcuIEF0IGVxdWlsaWJyaXVtXG4gKiB0aGUgYmxvY2sgaXMgYXQgcG9zaXRpb24geCA9IDEuXG4gKiBQcmVzc2luZyBvbiB0aGUgYmxvY2sgbW92ZXMgaXQgdG8gcG9zaXRpb24geCA9IDA7XG4gKiBTbywgdG8gY2FsY3VsYXRlIHRoZSBkaXNwbGFjZW1lbnQsIHdlIG5lZWQgdG8gdGFrZSB0aGVcbiAqIGN1cnJlbnQgcG9zaXRpb24gYW5kIHN1YnRyYWN0IHRoZSBwcmV2aW91cyBwb3NpdGlvbiBmcm9tIGl0LlxuICogWCA9IHggLSB4MCA9IDAgLSAxID0gLTEuXG4gKlxuICogRm9yIElvbmljJ3MgcHVycG9zZXMsIHdlIGFyZSBvbmx5IHB1c2hpbmcgb24gdGhlIHNwcmluZyBtb2RhbFxuICogc28gd2UgaGF2ZSBhIG1heCBwb3NpdGlvbiBvZiAxLlxuICogQXMgYSByZXN1bHQsIHdlIGNhbiBleHBhbmQgZGlzcGxhY2VtZW50IHRvIHRoaXMgZm9ybXVsYTpcbiAqIFggPSB4IC0gMVxuICpcbiAqIGEgPSAtayh4IC0gMSkgLSBjdlxuICpcbiAqIFdlIGNhbiByZXByZXNlbnQgdGhlIG1vdGlvbiBvZiBzb21ldGhpbmcgYXMgYSBmdW5jdGlvbiBvZiB0aW1lOiBmKHQpID0geC5cbiAqIFRoZSBkZXJpdmF0aXZlIG9mIHBvc2l0aW9uIGdpdmVzIHVzIHRoZSB2ZWxvY2l0eTogZicodClcbiAqIFRoZSBkZXJpdmF0aXZlIG9mIHRoZSB2ZWxvY2l0eSBnaXZlcyB1cyB0aGUgYWNjZWxlcmF0aW9uOiBmJycodClcbiAqXG4gKiBXZSBjYW4gc3Vic3RpdHV0ZSB0aGUgZm9ybXVsYSBhYm92ZSB3aXRoIHRoZXNlIHZhbHVlczpcbiAqXG4gKiBmXCIodCkgPSAtayAqIChmKHQpIC0gMSkgLSBjICogZicodClcbiAqXG4gKiBUaGlzIGlzIGNhbGxlZCBhIGRpZmZlcmVudGlhbCBlcXVhdGlvbi5cbiAqXG4gKiBXZSBrbm93IHRoYXQgYXQgdCA9IDAsIHdlIGFyZSBhdCB4ID0gMCBiZWNhdXNlIHRoZSBtb2RhbCBkb2VzIG5vdCBtb3ZlOiBmKDApID0gMFxuICogVGhpcyBtZWFucyBvdXIgdmVsb2NpdHkgaXMgYWxzbyB6ZXJvOiBmJygwKSA9IDAuXG4gKlxuICogV2UgY2FuIGNoZWF0IGEgYml0IGFuZCBwbHVnIHRoZSBmb3JtdWxhIGludG8gV29sZnJhbSBBbHBoYS5cbiAqIEhvd2V2ZXIsIHdlIG5lZWQgdG8gcGljayBzdGlmZm5lc3MgYW5kIGRhbXBlbmluZyB2YWx1ZXM6XG4gKiBrID0gMC41N1xuICogYyA9IDE1XG4gKlxuICogSSBwaWNrZWQgdGhlc2UgYXMgdGhleSBhcmUgZmFpcmx5IGNsb3NlIHRvIG5hdGl2ZSBpT1MncyBzcHJpbmcgZWZmZWN0XG4gKiB3aXRoIHRoZSBtb2RhbC5cbiAqXG4gKiBXaGF0IHdlIHBsdWcgaW4gaXMgdGhpczogZigwKSA9IDA7IGYnKDApID0gMDsgZicnKHQpID0gLTAuNTcoZih0KSAtIDEpIC0gMTVmJyh0KVxuICpcbiAqIFRoZSByZXN1bHQgaXMgYSBmb3JtdWxhIHRoYXQgbGV0cyB1cyBjYWxjdWxhdGUgdGhlIGFjY2VsZXJhdGlvblxuICogZm9yIGEgZ2l2ZW4gdGltZSB0LlxuICogTm90ZTogVGhpcyBpcyB0aGUgYXBwcm94aW1hdGUgZm9ybSBvZiB0aGUgc29sdXRpb24uIFdvbGZyYW0gQWxwaGEgd2lsbFxuICogZ2l2ZSB5b3UgYSBjb21wbGV4IGRpZmZlcmVudGlhbCBlcXVhdGlvbiB0b28uXG4gKi9cbmNvbnN0IGNhbGN1bGF0ZVNwcmluZ1N0ZXAgPSAodCkgPT4ge1xuICByZXR1cm4gMC4wMDI1NTI3NSAqIDIuNzE4MjggKiogKC0xNC45NjE5ICogdCkgLSAxLjAwMjU1ICogMi43MTgyOCAqKiAoLTAuMDM4MDk2OCAqIHQpICsgMTtcbn07XG5cbi8vIERlZmF1bHRzIGZvciB0aGUgY2FyZCBzd2lwZSBhbmltYXRpb25cbmNvbnN0IFN3aXBlVG9DbG9zZURlZmF1bHRzID0ge1xuICBNSU5fUFJFU0VOVElOR19TQ0FMRTogMC45Myxcbn07XG5jb25zdCBjcmVhdGVTd2lwZVRvQ2xvc2VHZXN0dXJlID0gKGVsLCBhbmltYXRpb24sIHN0YXR1c0JhclN0eWxlLCBvbkRpc21pc3MpID0+IHtcbiAgLyoqXG4gICAqIFRoZSBzdGVwIHZhbHVlIGF0IHdoaWNoIGEgY2FyZCBtb2RhbFxuICAgKiBpcyBlbGlnaWJsZSBmb3IgZGlzbWlzc2luZyB2aWEgZ2VzdHVyZS5cbiAgICovXG4gIGNvbnN0IERJU01JU1NfVEhSRVNIT0xEID0gMC41O1xuICBjb25zdCBoZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG4gIGxldCBpc09wZW4gPSBmYWxzZTtcbiAgbGV0IGNhbkRpc21pc3NCbG9ja3NHZXN0dXJlID0gZmFsc2U7XG4gIGxldCBjb250ZW50RWwgPSBudWxsO1xuICBsZXQgc2Nyb2xsRWwgPSBudWxsO1xuICBjb25zdCBjYW5EaXNtaXNzTWF4U3RlcCA9IDAuMjtcbiAgbGV0IGluaXRpYWxTY3JvbGxZID0gdHJ1ZTtcbiAgbGV0IGxhc3RTdGVwID0gMDtcbiAgY29uc3QgZ2V0U2Nyb2xsWSA9ICgpID0+IHtcbiAgICBpZiAoY29udGVudEVsICYmIGlzSW9uQ29udGVudChjb250ZW50RWwpKSB7XG4gICAgICByZXR1cm4gY29udGVudEVsLnNjcm9sbFk7XG4gICAgICAvKipcbiAgICAgICAqIEN1c3RvbSBzY3JvbGwgY29udGFpbmVycyBhcmUgaW50ZW5kZWQgdG8gYmVcbiAgICAgICAqIHVzZWQgd2l0aCB2aXJ0dWFsIHNjcm9sbGluZywgc28gd2UgYXNzdW1lXG4gICAgICAgKiB0aGVyZSBpcyBzY3JvbGxpbmcgaW4gdGhpcyBjYXNlLlxuICAgICAgICovXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICBjb25zdCBjYW5TdGFydCA9IChkZXRhaWwpID0+IHtcbiAgICBjb25zdCB0YXJnZXQgPSBkZXRhaWwuZXZlbnQudGFyZ2V0O1xuICAgIGlmICh0YXJnZXQgPT09IG51bGwgfHwgIXRhcmdldC5jbG9zZXN0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgd2UgYXJlIHN3aXBpbmcgb24gdGhlIGNvbnRlbnQsXG4gICAgICogc3dpcGluZyBzaG91bGQgb25seSBiZSBwb3NzaWJsZSBpZlxuICAgICAqIHRoZSBjb250ZW50IGlzIHNjcm9sbGVkIGFsbCB0aGUgd2F5XG4gICAgICogdG8gdGhlIHRvcCBzbyB0aGF0IHdlIGRvIG5vdCBpbnRlcmZlcmVcbiAgICAgKiB3aXRoIHNjcm9sbGluZy5cbiAgICAgKlxuICAgICAqIFdlIGNhbm5vdCBhc3N1bWUgdGhhdCB0aGUgYGlvbi1jb250ZW50YFxuICAgICAqIHRhcmdldCB3aWxsIHJlbWFpbiBjb25zaXN0ZW50IGJldHdlZW5cbiAgICAgKiBzd2lwZXMuIEZvciBleGFtcGxlLCB3aGVuIHVzaW5nXG4gICAgICogaW9uLW5hdiB3aXRoaW4gYSBjYXJkIG1vZGFsIGl0IGlzXG4gICAgICogcG9zc2libGUgdG8gc3dpcGUsIHB1c2ggYSB2aWV3LCBhbmQgdGhlblxuICAgICAqIHN3aXBlIGFnYWluLiBUaGUgdGFyZ2V0IGNvbnRlbnQgd2lsbCBub3RcbiAgICAgKiBiZSB0aGUgc2FtZSBiZXR3ZWVuIHN3aXBlcy5cbiAgICAgKi9cbiAgICBjb250ZW50RWwgPSBmaW5kQ2xvc2VzdElvbkNvbnRlbnQodGFyZ2V0KTtcbiAgICBpZiAoY29udGVudEVsKSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBjYXJkIHNob3VsZCBuZXZlciBzd2lwZSB0byBjbG9zZVxuICAgICAgICogb24gdGhlIGNvbnRlbnQgd2l0aCBhIHJlZnJlc2hlci5cbiAgICAgICAqIE5vdGU6IFdlIGNhbm5vdCBzb2x2ZSB0aGlzIGJ5IG1ha2luZyB0aGVcbiAgICAgICAqIHN3aXBlVG9DbG9zZSBnZXN0dXJlIGhhdmUgYSBoaWdoZXIgcHJpb3JpdHlcbiAgICAgICAqIHRoYW4gdGhlIHJlZnJlc2hlciBnZXN0dXJlIGFzIHRoZSBpT1MgbmF0aXZlXG4gICAgICAgKiByZWZyZXNoIGdlc3R1cmUgdXNlcyBhIHNjcm9sbCBsaXN0ZW5lciBpblxuICAgICAgICogYWRkaXRpb24gdG8gYSBnZXN0dXJlLlxuICAgICAgICpcbiAgICAgICAqIE5vdGU6IERvIG5vdCB1c2UgZ2V0U2Nyb2xsRWxlbWVudCBoZXJlXG4gICAgICAgKiBiZWNhdXNlIHdlIG5lZWQgdGhpcyB0byBiZSBhIHN5bmNocm9ub3VzXG4gICAgICAgKiBvcGVyYXRpb24sIGFuZCBnZXRTY3JvbGxFbGVtZW50IGlzXG4gICAgICAgKiBhc3luY2hyb25vdXMuXG4gICAgICAgKi9cbiAgICAgIGlmIChpc0lvbkNvbnRlbnQoY29udGVudEVsKSkge1xuICAgICAgICBjb25zdCByb290ID0gZ2V0RWxlbWVudFJvb3QoY29udGVudEVsKTtcbiAgICAgICAgc2Nyb2xsRWwgPSByb290LnF1ZXJ5U2VsZWN0b3IoJy5pbm5lci1zY3JvbGwnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBzY3JvbGxFbCA9IGNvbnRlbnRFbDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhhc1JlZnJlc2hlckluQ29udGVudCA9ICEhY29udGVudEVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yZWZyZXNoZXInKTtcbiAgICAgIHJldHVybiAhaGFzUmVmcmVzaGVySW5Db250ZW50ICYmIHNjcm9sbEVsLnNjcm9sbFRvcCA9PT0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FyZCBzaG91bGQgYmUgc3dpcGVhYmxlIG9uIGFsbFxuICAgICAqIHBhcnRzIG9mIHRoZSBtb2RhbCBleGNlcHQgZm9yIHRoZSBmb290ZXIuXG4gICAgICovXG4gICAgY29uc3QgZm9vdGVyID0gdGFyZ2V0LmNsb3Nlc3QoJ2lvbi1mb290ZXInKTtcbiAgICBpZiAoZm9vdGVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuICBjb25zdCBvblN0YXJ0ID0gKGRldGFpbCkgPT4ge1xuICAgIGNvbnN0IHsgZGVsdGFZIH0gPSBkZXRhaWw7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpbml0aWFsIHNjcm9sbFkgdmFsdWUgc29cbiAgICAgKiB0aGF0IHdlIGNhbiBjb3JyZWN0bHkgcmVzZXQgdGhlIHNjcm9sbFlcbiAgICAgKiBwcm9wIHdoZW4gdGhlIGdlc3R1cmUgZW5kcy5cbiAgICAgKi9cbiAgICBpbml0aWFsU2Nyb2xsWSA9IGdldFNjcm9sbFkoKTtcbiAgICAvKipcbiAgICAgKiBJZiBjYW5EaXNtaXNzIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYHRydWVgXG4gICAgICogdGhlbiB1c2VycyBzaG91bGQgYmUgYWJsZSB0byBzd2lwZSBkb3duXG4gICAgICogdW50aWwgYSB0aHJlc2hvbGQgaXMgaGl0LiBBdCB0aGF0IHBvaW50LFxuICAgICAqIHRoZSBjYXJkIG1vZGFsIHNob3VsZCBub3QgcHJvY2VlZCBhbnkgZnVydGhlci5cbiAgICAgKiBUT0RPIChGVy05MzcpXG4gICAgICogUmVtb3ZlIHVuZGVmaW5lZCBjaGVja1xuICAgICAqL1xuICAgIGNhbkRpc21pc3NCbG9ja3NHZXN0dXJlID0gZWwuY2FuRGlzbWlzcyAhPT0gdW5kZWZpbmVkICYmIGVsLmNhbkRpc21pc3MgIT09IHRydWU7XG4gICAgLyoqXG4gICAgICogSWYgd2UgYXJlIHB1bGxpbmcgZG93biwgdGhlblxuICAgICAqIGl0IGlzIHBvc3NpYmxlIHdlIGFyZSBwdWxsaW5nIG9uIHRoZVxuICAgICAqIGNvbnRlbnQuIFdlIGRvIG5vdCB3YW50IHNjcm9sbGluZyB0b1xuICAgICAqIGhhcHBlbiBhdCB0aGUgc2FtZSB0aW1lIGFzIHRoZSBnZXN0dXJlLlxuICAgICAqL1xuICAgIGlmIChkZWx0YVkgPiAwICYmIGNvbnRlbnRFbCkge1xuICAgICAgZGlzYWJsZUNvbnRlbnRTY3JvbGxZKGNvbnRlbnRFbCk7XG4gICAgfVxuICAgIGFuaW1hdGlvbi5wcm9ncmVzc1N0YXJ0KHRydWUsIGlzT3BlbiA/IDEgOiAwKTtcbiAgfTtcbiAgY29uc3Qgb25Nb3ZlID0gKGRldGFpbCkgPT4ge1xuICAgIGNvbnN0IHsgZGVsdGFZIH0gPSBkZXRhaWw7XG4gICAgLyoqXG4gICAgICogSWYgd2UgYXJlIHB1bGxpbmcgZG93biwgdGhlblxuICAgICAqIGl0IGlzIHBvc3NpYmxlIHdlIGFyZSBwdWxsaW5nIG9uIHRoZVxuICAgICAqIGNvbnRlbnQuIFdlIGRvIG5vdCB3YW50IHNjcm9sbGluZyB0b1xuICAgICAqIGhhcHBlbiBhdCB0aGUgc2FtZSB0aW1lIGFzIHRoZSBnZXN0dXJlLlxuICAgICAqL1xuICAgIGlmIChkZWx0YVkgPiAwICYmIGNvbnRlbnRFbCkge1xuICAgICAgZGlzYWJsZUNvbnRlbnRTY3JvbGxZKGNvbnRlbnRFbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHdlIGFyZSBzd2lwaW5nIG9uIHRoZSBjb250ZW50XG4gICAgICogdGhlbiB0aGUgc3dpcGUgZ2VzdHVyZSBzaG91bGQgb25seVxuICAgICAqIGhhcHBlbiBpZiB3ZSBhcmUgcHVsbGluZyBkb3duLlxuICAgICAqXG4gICAgICogSG93ZXZlciwgaWYgd2UgcHVsbCB1cCBhbmRcbiAgICAgKiB0aGVuIGRvd24gc3VjaCB0aGF0IHRoZSBzY3JvbGwgcG9zaXRpb25cbiAgICAgKiByZXR1cm5zIHRvIDAsIHdlIHNob3VsZCBiZSBhYmxlIHRvIHN3aXBlXG4gICAgICogdGhlIGNhcmQuXG4gICAgICovXG4gICAgY29uc3Qgc3RlcCA9IGRldGFpbC5kZWx0YVkgLyBoZWlnaHQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdXNlciBpcyBzd2lwaW5nIGRvd24gYW5kXG4gICAgICogaWYgd2UgaGF2ZSBhIGNhbkRpc21pc3MgdmFsdWUgdGhhdFxuICAgICAqIHNob3VsZCBibG9jayB0aGUgZ2VzdHVyZSBmcm9tXG4gICAgICogcHJvY2VlZGluZyxcbiAgICAgKi9cbiAgICBjb25zdCBpc0F0dGVtcHRpbmdEaXNtaXNzV2l0aENhbkRpc21pc3MgPSBzdGVwID49IDAgJiYgY2FuRGlzbWlzc0Jsb2Nrc0dlc3R1cmU7XG4gICAgLyoqXG4gICAgICogSWYgd2UgYXJlIGJsb2NraW5nIHRoZSBnZXN0dXJlIGZyb20gZGlzbWlzc2luZyxcbiAgICAgKiBzZXQgdGhlIG1heCBzdGVwIHZhbHVlIHNvIHRoYXQgdGhlIHNoZWV0IGNhbm5vdCBiZVxuICAgICAqIGNvbXBsZXRlbHkgaGlkZGVuLlxuICAgICAqL1xuICAgIGNvbnN0IG1heFN0ZXAgPSBpc0F0dGVtcHRpbmdEaXNtaXNzV2l0aENhbkRpc21pc3MgPyBjYW5EaXNtaXNzTWF4U3RlcCA6IDAuOTk5OTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBhcmUgYmxvY2tpbmcgdGhlIGdlc3R1cmUgZnJvbVxuICAgICAqIGRpc21pc3NpbmcsIGNhbGN1bGF0ZSB0aGUgc3ByaW5nIG1vZGlmaWVyIHZhbHVlXG4gICAgICogdGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzdGFydGluZyBicmVha3BvaW50XG4gICAgICogdmFsdWUgdG8gZ2l2ZSB0aGUgZ2VzdHVyZSBhIHNwcmluZy1saWtlIGZlZWxpbmcuXG4gICAgICogTm90ZSB0aGF0IHRoZSBzdGFydGluZyBicmVha3BvaW50IGlzIGFsd2F5cyAwLFxuICAgICAqIHNvIHdlIG9taXQgYWRkaW5nIDAgdG8gdGhlIHJlc3VsdC5cbiAgICAgKi9cbiAgICBjb25zdCBwcm9jZXNzZWRTdGVwID0gaXNBdHRlbXB0aW5nRGlzbWlzc1dpdGhDYW5EaXNtaXNzID8gY2FsY3VsYXRlU3ByaW5nU3RlcChzdGVwIC8gbWF4U3RlcCkgOiBzdGVwO1xuICAgIGNvbnN0IGNsYW1wZWRTdGVwID0gY2xhbXAoMC4wMDAxLCBwcm9jZXNzZWRTdGVwLCBtYXhTdGVwKTtcbiAgICBhbmltYXRpb24ucHJvZ3Jlc3NTdGVwKGNsYW1wZWRTdGVwKTtcbiAgICAvKipcbiAgICAgKiBXaGVuIHN3aXBpbmcgZG93biBoYWxmIHdheSwgdGhlIHN0YXR1cyBiYXIgc3R5bGVcbiAgICAgKiBzaG91bGQgYmUgcmVzZXQgdG8gaXRzIGRlZmF1bHQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBXZSB0cmFjayBsYXN0U3RlcCBzbyB0aGF0IHdlIGRvIG5vdCBmaXJlIHRoZXNlXG4gICAgICogZnVuY3Rpb25zIG9uIGV2ZXJ5IG9uTW92ZSwgb25seSB3aGVuIHRoZSB1c2VyIGhhc1xuICAgICAqIGNyb3NzZWQgYSBjZXJ0YWluIHRocmVzaG9sZC5cbiAgICAgKi9cbiAgICBpZiAoY2xhbXBlZFN0ZXAgPj0gRElTTUlTU19USFJFU0hPTEQgJiYgbGFzdFN0ZXAgPCBESVNNSVNTX1RIUkVTSE9MRCkge1xuICAgICAgc2V0Q2FyZFN0YXR1c0JhckRlZmF1bHQoc3RhdHVzQmFyU3R5bGUpO1xuICAgICAgLyoqXG4gICAgICAgKiBIb3dldmVyLCBpZiB3ZSBzd2lwZSBiYWNrIHVwLCB0aGVuIHRoZVxuICAgICAgICogc3RhdHVzIGJhciBzdHlsZSBzaG91bGQgYmUgc2V0IHRvIGhhdmUgbGlnaHRcbiAgICAgICAqIHRleHQgb24gYSBkYXJrIGJhY2tncm91bmQuXG4gICAgICAgKi9cbiAgICB9XG4gICAgZWxzZSBpZiAoY2xhbXBlZFN0ZXAgPCBESVNNSVNTX1RIUkVTSE9MRCAmJiBsYXN0U3RlcCA+PSBESVNNSVNTX1RIUkVTSE9MRCkge1xuICAgICAgc2V0Q2FyZFN0YXR1c0JhckRhcmsoKTtcbiAgICB9XG4gICAgbGFzdFN0ZXAgPSBjbGFtcGVkU3RlcDtcbiAgfTtcbiAgY29uc3Qgb25FbmQgPSAoZGV0YWlsKSA9PiB7XG4gICAgY29uc3QgdmVsb2NpdHkgPSBkZXRhaWwudmVsb2NpdHlZO1xuICAgIGNvbnN0IHN0ZXAgPSBkZXRhaWwuZGVsdGFZIC8gaGVpZ2h0O1xuICAgIGNvbnN0IGlzQXR0ZW1wdGluZ0Rpc21pc3NXaXRoQ2FuRGlzbWlzcyA9IHN0ZXAgPj0gMCAmJiBjYW5EaXNtaXNzQmxvY2tzR2VzdHVyZTtcbiAgICBjb25zdCBtYXhTdGVwID0gaXNBdHRlbXB0aW5nRGlzbWlzc1dpdGhDYW5EaXNtaXNzID8gY2FuRGlzbWlzc01heFN0ZXAgOiAwLjk5OTk7XG4gICAgY29uc3QgcHJvY2Vzc2VkU3RlcCA9IGlzQXR0ZW1wdGluZ0Rpc21pc3NXaXRoQ2FuRGlzbWlzcyA/IGNhbGN1bGF0ZVNwcmluZ1N0ZXAoc3RlcCAvIG1heFN0ZXApIDogc3RlcDtcbiAgICBjb25zdCBjbGFtcGVkU3RlcCA9IGNsYW1wKDAuMDAwMSwgcHJvY2Vzc2VkU3RlcCwgbWF4U3RlcCk7XG4gICAgY29uc3QgdGhyZXNob2xkID0gKGRldGFpbC5kZWx0YVkgKyB2ZWxvY2l0eSAqIDEwMDApIC8gaGVpZ2h0O1xuICAgIC8qKlxuICAgICAqIElmIGNhbkRpc21pc3MgYmxvY2tzXG4gICAgICogdGhlIHN3aXBlIGdlc3R1cmUsIHRoZW4gdGhlXG4gICAgICogYW5pbWF0aW9uIGNhbiBuZXZlciBjb21wbGV0ZSB1bnRpbFxuICAgICAqIGNhbkRpc21pc3MgaXMgY2hlY2tlZC5cbiAgICAgKi9cbiAgICBjb25zdCBzaG91bGRDb21wbGV0ZSA9ICFpc0F0dGVtcHRpbmdEaXNtaXNzV2l0aENhbkRpc21pc3MgJiYgdGhyZXNob2xkID49IERJU01JU1NfVEhSRVNIT0xEO1xuICAgIGxldCBuZXdTdGVwVmFsdWUgPSBzaG91bGRDb21wbGV0ZSA/IC0wLjAwMSA6IDAuMDAxO1xuICAgIGlmICghc2hvdWxkQ29tcGxldGUpIHtcbiAgICAgIGFuaW1hdGlvbi5lYXNpbmcoJ2N1YmljLWJlemllcigxLCAwLCAwLjY4LCAwLjI4KScpO1xuICAgICAgbmV3U3RlcFZhbHVlICs9IGdldFRpbWVHaXZlblByb2dyZXNzaW9uKFswLCAwXSwgWzEsIDBdLCBbMC42OCwgMC4yOF0sIFsxLCAxXSwgY2xhbXBlZFN0ZXApWzBdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFuaW1hdGlvbi5lYXNpbmcoJ2N1YmljLWJlemllcigwLjMyLCAwLjcyLCAwLCAxKScpO1xuICAgICAgbmV3U3RlcFZhbHVlICs9IGdldFRpbWVHaXZlblByb2dyZXNzaW9uKFswLCAwXSwgWzAuMzIsIDAuNzJdLCBbMCwgMV0sIFsxLCAxXSwgY2xhbXBlZFN0ZXApWzBdO1xuICAgIH1cbiAgICBjb25zdCBkdXJhdGlvbiA9IHNob3VsZENvbXBsZXRlXG4gICAgICA/IGNvbXB1dGVEdXJhdGlvbihzdGVwICogaGVpZ2h0LCB2ZWxvY2l0eSlcbiAgICAgIDogY29tcHV0ZUR1cmF0aW9uKCgxIC0gY2xhbXBlZFN0ZXApICogaGVpZ2h0LCB2ZWxvY2l0eSk7XG4gICAgaXNPcGVuID0gc2hvdWxkQ29tcGxldGU7XG4gICAgZ2VzdHVyZS5lbmFibGUoZmFsc2UpO1xuICAgIGlmIChjb250ZW50RWwpIHtcbiAgICAgIHJlc2V0Q29udGVudFNjcm9sbFkoY29udGVudEVsLCBpbml0aWFsU2Nyb2xsWSk7XG4gICAgfVxuICAgIGFuaW1hdGlvblxuICAgICAgLm9uRmluaXNoKCgpID0+IHtcbiAgICAgIGlmICghc2hvdWxkQ29tcGxldGUpIHtcbiAgICAgICAgZ2VzdHVyZS5lbmFibGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSlcbiAgICAgIC5wcm9ncmVzc0VuZChzaG91bGRDb21wbGV0ZSA/IDEgOiAwLCBuZXdTdGVwVmFsdWUsIGR1cmF0aW9uKTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgY2FuRGlzbWlzcyB2YWx1ZSBibG9ja2VkIHRoZSBnZXN0dXJlXG4gICAgICogZnJvbSBwcm9jZWVkaW5nLCB0aGVuIHdlIHNob3VsZCBpZ25vcmUgd2hhdGV2ZXJcbiAgICAgKiBzaG91bGRDb21wbGV0ZSBpcy4gV2hldGhlciBvciBub3QgdGhlIG1vZGFsXG4gICAgICogYW5pbWF0aW9uIHNob3VsZCBjb21wbGV0ZSBpcyBub3cgZGV0ZXJtaW5lZCBieVxuICAgICAqIGNhbkRpc21pc3MuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgdXNlciBzd2lwZWQgPjI1JSBvZiB0aGUgd2F5XG4gICAgICogdG8gdGhlIG1heCBzdGVwLCB0aGVuIHdlIHNob3VsZFxuICAgICAqIGNoZWNrIGNhbkRpc21pc3MuIDI1JSB3YXMgY2hvc2VuXG4gICAgICogdG8gYXZvaWQgYWNjaWRlbnRhbCBzd2lwZXMuXG4gICAgICovXG4gICAgaWYgKGlzQXR0ZW1wdGluZ0Rpc21pc3NXaXRoQ2FuRGlzbWlzcyAmJiBjbGFtcGVkU3RlcCA+IG1heFN0ZXAgLyA0KSB7XG4gICAgICBoYW5kbGVDYW5EaXNtaXNzKGVsLCBhbmltYXRpb24pO1xuICAgIH1cbiAgICBlbHNlIGlmIChzaG91bGRDb21wbGV0ZSkge1xuICAgICAgb25EaXNtaXNzKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBnZXN0dXJlID0gY3JlYXRlR2VzdHVyZSh7XG4gICAgZWwsXG4gICAgZ2VzdHVyZU5hbWU6ICdtb2RhbFN3aXBlVG9DbG9zZScsXG4gICAgZ2VzdHVyZVByaW9yaXR5OiAzOSxcbiAgICBkaXJlY3Rpb246ICd5JyxcbiAgICB0aHJlc2hvbGQ6IDEwLFxuICAgIGNhblN0YXJ0LFxuICAgIG9uU3RhcnQsXG4gICAgb25Nb3ZlLFxuICAgIG9uRW5kLFxuICB9KTtcbiAgcmV0dXJuIGdlc3R1cmU7XG59O1xuY29uc3QgY29tcHV0ZUR1cmF0aW9uID0gKHJlbWFpbmluZywgdmVsb2NpdHkpID0+IHtcbiAgcmV0dXJuIGNsYW1wKDQwMCwgcmVtYWluaW5nIC8gTWF0aC5hYnModmVsb2NpdHkgKiAxLjEpLCA1MDApO1xufTtcblxuY29uc3QgY3JlYXRlU2hlZXRFbnRlckFuaW1hdGlvbiA9IChvcHRzKSA9PiB7XG4gIGNvbnN0IHsgY3VycmVudEJyZWFrcG9pbnQsIGJhY2tkcm9wQnJlYWtwb2ludCB9ID0gb3B0cztcbiAgLyoqXG4gICAqIElmIHRoZSBiYWNrZHJvcEJyZWFrcG9pbnQgaXMgdW5kZWZpbmVkLCB0aGVuIHRoZSBiYWNrZHJvcFxuICAgKiBzaG91bGQgYWx3YXlzIGZhZGUgaW4uIElmIHRoZSBiYWNrZHJvcEJyZWFrcG9pbnQgY2FtZSBiZWZvcmUgdGhlXG4gICAqIGN1cnJlbnQgYnJlYWtwb2ludCwgdGhlbiB0aGUgYmFja2Ryb3Agc2hvdWxkIGJlIGZhZGluZyBpbi5cbiAgICovXG4gIGNvbnN0IHNob3VsZFNob3dCYWNrZHJvcCA9IGJhY2tkcm9wQnJlYWtwb2ludCA9PT0gdW5kZWZpbmVkIHx8IGJhY2tkcm9wQnJlYWtwb2ludCA8IGN1cnJlbnRCcmVha3BvaW50O1xuICBjb25zdCBpbml0aWFsQmFja2Ryb3AgPSBzaG91bGRTaG93QmFja2Ryb3AgPyBgY2FsYyh2YXIoLS1iYWNrZHJvcC1vcGFjaXR5KSAqICR7Y3VycmVudEJyZWFrcG9pbnR9KWAgOiAnMCc7XG4gIGNvbnN0IGJhY2tkcm9wQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCdiYWNrZHJvcEFuaW1hdGlvbicpLmZyb21Ubygnb3BhY2l0eScsIDAsIGluaXRpYWxCYWNrZHJvcCk7XG4gIGlmIChzaG91bGRTaG93QmFja2Ryb3ApIHtcbiAgICBiYWNrZHJvcEFuaW1hdGlvblxuICAgICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgICAncG9pbnRlci1ldmVudHMnOiAnbm9uZScsXG4gICAgfSlcbiAgICAgIC5hZnRlckNsZWFyU3R5bGVzKFsncG9pbnRlci1ldmVudHMnXSk7XG4gIH1cbiAgY29uc3Qgd3JhcHBlckFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbignd3JhcHBlckFuaW1hdGlvbicpLmtleWZyYW1lcyhbXG4gICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMTAwJSknIH0sXG4gICAgeyBvZmZzZXQ6IDEsIG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoJHsxMDAgLSBjdXJyZW50QnJlYWtwb2ludCAqIDEwMH0lKWAgfSxcbiAgXSk7XG4gIHJldHVybiB7IHdyYXBwZXJBbmltYXRpb24sIGJhY2tkcm9wQW5pbWF0aW9uIH07XG59O1xuY29uc3QgY3JlYXRlU2hlZXRMZWF2ZUFuaW1hdGlvbiA9IChvcHRzKSA9PiB7XG4gIGNvbnN0IHsgY3VycmVudEJyZWFrcG9pbnQsIGJhY2tkcm9wQnJlYWtwb2ludCB9ID0gb3B0cztcbiAgLyoqXG4gICAqIEJhY2tkcm9wIGRvZXMgbm90IGFsd2F5cyBmYWRlIGluIGZyb20gMCB0byAxIGlmIGJhY2tkcm9wQnJlYWtwb2ludFxuICAgKiBpcyBkZWZpbmVkLCBzbyB3ZSBuZWVkIHRvIGFjY291bnQgZm9yIHRoYXQgb2Zmc2V0IGJ5IGZpZ3VyaW5nIG91dFxuICAgKiB3aGF0IHRoZSBjdXJyZW50IGJhY2tkcm9wIHZhbHVlIHNob3VsZCBiZS5cbiAgICovXG4gIGNvbnN0IGJhY2tkcm9wVmFsdWUgPSBgY2FsYyh2YXIoLS1iYWNrZHJvcC1vcGFjaXR5KSAqICR7Z2V0QmFja2Ryb3BWYWx1ZUZvclNoZWV0KGN1cnJlbnRCcmVha3BvaW50LCBiYWNrZHJvcEJyZWFrcG9pbnQpfSlgO1xuICBjb25zdCBkZWZhdWx0QmFja2Ryb3AgPSBbXG4gICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6IGJhY2tkcm9wVmFsdWUgfSxcbiAgICB7IG9mZnNldDogMSwgb3BhY2l0eTogMCB9LFxuICBdO1xuICBjb25zdCBjdXN0b21CYWNrZHJvcCA9IFtcbiAgICB7IG9mZnNldDogMCwgb3BhY2l0eTogYmFja2Ryb3BWYWx1ZSB9LFxuICAgIHsgb2Zmc2V0OiBiYWNrZHJvcEJyZWFrcG9pbnQsIG9wYWNpdHk6IDAgfSxcbiAgICB7IG9mZnNldDogMSwgb3BhY2l0eTogMCB9LFxuICBdO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbignYmFja2Ryb3BBbmltYXRpb24nKS5rZXlmcmFtZXMoYmFja2Ryb3BCcmVha3BvaW50ICE9PSAwID8gY3VzdG9tQmFja2Ryb3AgOiBkZWZhdWx0QmFja2Ryb3ApO1xuICBjb25zdCB3cmFwcGVyQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCd3cmFwcGVyQW5pbWF0aW9uJykua2V5ZnJhbWVzKFtcbiAgICB7IG9mZnNldDogMCwgb3BhY2l0eTogMSwgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkezEwMCAtIGN1cnJlbnRCcmVha3BvaW50ICogMTAwfSUpYCB9LFxuICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGVZKDEwMCUpYCB9LFxuICBdKTtcbiAgcmV0dXJuIHsgd3JhcHBlckFuaW1hdGlvbiwgYmFja2Ryb3BBbmltYXRpb24gfTtcbn07XG5cbmNvbnN0IGNyZWF0ZUVudGVyQW5pbWF0aW9uJDEgPSAoKSA9PiB7XG4gIGNvbnN0IGJhY2tkcm9wQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKClcbiAgICAuZnJvbVRvKCdvcGFjaXR5JywgMC4wMSwgJ3ZhcigtLWJhY2tkcm9wLW9wYWNpdHkpJylcbiAgICAuYmVmb3JlU3R5bGVzKHtcbiAgICAncG9pbnRlci1ldmVudHMnOiAnbm9uZScsXG4gIH0pXG4gICAgLmFmdGVyQ2xlYXJTdHlsZXMoWydwb2ludGVyLWV2ZW50cyddKTtcbiAgY29uc3Qgd3JhcHBlckFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpLmZyb21UbygndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZVkoMTAwdmgpJywgJ3RyYW5zbGF0ZVkoMHZoKScpO1xuICByZXR1cm4geyBiYWNrZHJvcEFuaW1hdGlvbiwgd3JhcHBlckFuaW1hdGlvbiB9O1xufTtcbi8qKlxuICogaU9TIE1vZGFsIEVudGVyIEFuaW1hdGlvbiBmb3IgdGhlIENhcmQgcHJlc2VudGF0aW9uIHN0eWxlXG4gKi9cbmNvbnN0IGlvc0VudGVyQW5pbWF0aW9uID0gKGJhc2VFbCwgb3B0cykgPT4ge1xuICBjb25zdCB7IHByZXNlbnRpbmdFbCwgY3VycmVudEJyZWFrcG9pbnQgfSA9IG9wdHM7XG4gIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChiYXNlRWwpO1xuICBjb25zdCB7IHdyYXBwZXJBbmltYXRpb24sIGJhY2tkcm9wQW5pbWF0aW9uIH0gPSBjdXJyZW50QnJlYWtwb2ludCAhPT0gdW5kZWZpbmVkID8gY3JlYXRlU2hlZXRFbnRlckFuaW1hdGlvbihvcHRzKSA6IGNyZWF0ZUVudGVyQW5pbWF0aW9uJDEoKTtcbiAgYmFja2Ryb3BBbmltYXRpb24uYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKTtcbiAgd3JhcHBlckFuaW1hdGlvbi5hZGRFbGVtZW50KHJvb3QucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsLXdyYXBwZXIsIC5tb2RhbC1zaGFkb3cnKSkuYmVmb3JlU3R5bGVzKHsgb3BhY2l0eTogMSB9KTtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbignZW50ZXJpbmctYmFzZScpXG4gICAgLmFkZEVsZW1lbnQoYmFzZUVsKVxuICAgIC5lYXNpbmcoJ2N1YmljLWJlemllcigwLjMyLDAuNzIsMCwxKScpXG4gICAgLmR1cmF0aW9uKDUwMClcbiAgICAuYWRkQW5pbWF0aW9uKHdyYXBwZXJBbmltYXRpb24pO1xuICBpZiAocHJlc2VudGluZ0VsKSB7XG4gICAgY29uc3QgaXNNb2JpbGUgPSB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2ODtcbiAgICBjb25zdCBoYXNDYXJkTW9kYWwgPSBwcmVzZW50aW5nRWwudGFnTmFtZSA9PT0gJ0lPTi1NT0RBTCcgJiYgcHJlc2VudGluZ0VsLnByZXNlbnRpbmdFbGVtZW50ICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgcHJlc2VudGluZ0VsUm9vdCA9IGdldEVsZW1lbnRSb290KHByZXNlbnRpbmdFbCk7XG4gICAgY29uc3QgcHJlc2VudGluZ0FuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpLmJlZm9yZVN0eWxlcyh7XG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyxcbiAgICAgICd0cmFuc2Zvcm0tb3JpZ2luJzogJ3RvcCBjZW50ZXInLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgIH0pO1xuICAgIGNvbnN0IGJvZHlFbCA9IGRvY3VtZW50LmJvZHk7XG4gICAgaWYgKGlzTW9iaWxlKSB7XG4gICAgICAvKipcbiAgICAgICAqIEZhbGxiYWNrIGZvciBicm93c2VycyB0aGF0IGRvZXMgbm90IHN1cHBvcnQgYG1heCgpYCAoZXg6IEZpcmVmb3gpXG4gICAgICAgKiBObyBuZWVkIHRvIHdvcnJ5IGFib3V0IHN0YXR1c2JhciBwYWRkaW5nIHNpbmNlIGVuZ2luZXMgbGlrZSBHZWNrb1xuICAgICAgICogYXJlIG5vdCB1c2VkIGFzIHRoZSBlbmdpbmUgZm9yIHN0YW5kYWxvbmUgQ29yZG92YS9DYXBhY2l0b3IgYXBwc1xuICAgICAgICovXG4gICAgICBjb25zdCB0cmFuc2Zvcm1PZmZzZXQgPSAhQ1NTLnN1cHBvcnRzKCd3aWR0aCcsICdtYXgoMHB4LCAxcHgpJykgPyAnMzBweCcgOiAnbWF4KDMwcHgsIHZhcigtLWlvbi1zYWZlLWFyZWEtdG9wKSknO1xuICAgICAgY29uc3QgbW9kYWxUcmFuc2Zvcm0gPSBoYXNDYXJkTW9kYWwgPyAnLTEwcHgnIDogdHJhbnNmb3JtT2Zmc2V0O1xuICAgICAgY29uc3QgdG9QcmVzZW50aW5nU2NhbGUgPSBTd2lwZVRvQ2xvc2VEZWZhdWx0cy5NSU5fUFJFU0VOVElOR19TQ0FMRTtcbiAgICAgIGNvbnN0IGZpbmFsVHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHttb2RhbFRyYW5zZm9ybX0pIHNjYWxlKCR7dG9QcmVzZW50aW5nU2NhbGV9KWA7XG4gICAgICBwcmVzZW50aW5nQW5pbWF0aW9uXG4gICAgICAgIC5hZnRlclN0eWxlcyh7XG4gICAgICAgIHRyYW5zZm9ybTogZmluYWxUcmFuc2Zvcm0sXG4gICAgICB9KVxuICAgICAgICAuYmVmb3JlQWRkV3JpdGUoKCkgPT4gYm9keUVsLnN0eWxlLnNldFByb3BlcnR5KCdiYWNrZ3JvdW5kLWNvbG9yJywgJ2JsYWNrJykpXG4gICAgICAgIC5hZGRFbGVtZW50KHByZXNlbnRpbmdFbClcbiAgICAgICAgLmtleWZyYW1lcyhbXG4gICAgICAgIHsgb2Zmc2V0OiAwLCBmaWx0ZXI6ICdjb250cmFzdCgxKScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMHB4KSBzY2FsZSgxKScsIGJvcmRlclJhZGl1czogJzBweCcgfSxcbiAgICAgICAgeyBvZmZzZXQ6IDEsIGZpbHRlcjogJ2NvbnRyYXN0KDAuODUpJywgdHJhbnNmb3JtOiBmaW5hbFRyYW5zZm9ybSwgYm9yZGVyUmFkaXVzOiAnMTBweCAxMHB4IDAgMCcgfSxcbiAgICAgIF0pO1xuICAgICAgYmFzZUFuaW1hdGlvbi5hZGRBbmltYXRpb24ocHJlc2VudGluZ0FuaW1hdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYmFzZUFuaW1hdGlvbi5hZGRBbmltYXRpb24oYmFja2Ryb3BBbmltYXRpb24pO1xuICAgICAgaWYgKCFoYXNDYXJkTW9kYWwpIHtcbiAgICAgICAgd3JhcHBlckFuaW1hdGlvbi5mcm9tVG8oJ29wYWNpdHknLCAnMCcsICcxJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdG9QcmVzZW50aW5nU2NhbGUgPSBoYXNDYXJkTW9kYWwgPyBTd2lwZVRvQ2xvc2VEZWZhdWx0cy5NSU5fUFJFU0VOVElOR19TQ0FMRSA6IDE7XG4gICAgICAgIGNvbnN0IGZpbmFsVHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKCR7dG9QcmVzZW50aW5nU2NhbGV9KWA7XG4gICAgICAgIHByZXNlbnRpbmdBbmltYXRpb25cbiAgICAgICAgICAuYWZ0ZXJTdHlsZXMoe1xuICAgICAgICAgIHRyYW5zZm9ybTogZmluYWxUcmFuc2Zvcm0sXG4gICAgICAgIH0pXG4gICAgICAgICAgLmFkZEVsZW1lbnQocHJlc2VudGluZ0VsUm9vdC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtd3JhcHBlcicpKVxuICAgICAgICAgIC5rZXlmcmFtZXMoW1xuICAgICAgICAgIHsgb2Zmc2V0OiAwLCBmaWx0ZXI6ICdjb250cmFzdCgxKScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCkgc2NhbGUoMSknIH0sXG4gICAgICAgICAgeyBvZmZzZXQ6IDEsIGZpbHRlcjogJ2NvbnRyYXN0KDAuODUpJywgdHJhbnNmb3JtOiBmaW5hbFRyYW5zZm9ybSB9LFxuICAgICAgICBdKTtcbiAgICAgICAgY29uc3Qgc2hhZG93QW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKClcbiAgICAgICAgICAuYWZ0ZXJTdHlsZXMoe1xuICAgICAgICAgIHRyYW5zZm9ybTogZmluYWxUcmFuc2Zvcm0sXG4gICAgICAgIH0pXG4gICAgICAgICAgLmFkZEVsZW1lbnQocHJlc2VudGluZ0VsUm9vdC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtc2hhZG93JykpXG4gICAgICAgICAgLmtleWZyYW1lcyhbXG4gICAgICAgICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6ICcxJywgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKSBzY2FsZSgxKScgfSxcbiAgICAgICAgICB7IG9mZnNldDogMSwgb3BhY2l0eTogJzAnLCB0cmFuc2Zvcm06IGZpbmFsVHJhbnNmb3JtIH0sXG4gICAgICAgIF0pO1xuICAgICAgICBiYXNlQW5pbWF0aW9uLmFkZEFuaW1hdGlvbihbcHJlc2VudGluZ0FuaW1hdGlvbiwgc2hhZG93QW5pbWF0aW9uXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGJhc2VBbmltYXRpb24uYWRkQW5pbWF0aW9uKGJhY2tkcm9wQW5pbWF0aW9uKTtcbiAgfVxuICByZXR1cm4gYmFzZUFuaW1hdGlvbjtcbn07XG5cbmNvbnN0IGNyZWF0ZUxlYXZlQW5pbWF0aW9uJDEgPSAoKSA9PiB7XG4gIGNvbnN0IGJhY2tkcm9wQW5pbWF0aW9uID0gY3JlYXRlQW5pbWF0aW9uKCkuZnJvbVRvKCdvcGFjaXR5JywgJ3ZhcigtLWJhY2tkcm9wLW9wYWNpdHkpJywgMCk7XG4gIGNvbnN0IHdyYXBwZXJBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKS5mcm9tVG8oJ3RyYW5zZm9ybScsICd0cmFuc2xhdGVZKDB2aCknLCAndHJhbnNsYXRlWSgxMDB2aCknKTtcbiAgcmV0dXJuIHsgYmFja2Ryb3BBbmltYXRpb24sIHdyYXBwZXJBbmltYXRpb24gfTtcbn07XG4vKipcbiAqIGlPUyBNb2RhbCBMZWF2ZSBBbmltYXRpb25cbiAqL1xuY29uc3QgaW9zTGVhdmVBbmltYXRpb24gPSAoYmFzZUVsLCBvcHRzLCBkdXJhdGlvbiA9IDUwMCkgPT4ge1xuICBjb25zdCB7IHByZXNlbnRpbmdFbCwgY3VycmVudEJyZWFrcG9pbnQgfSA9IG9wdHM7XG4gIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChiYXNlRWwpO1xuICBjb25zdCB7IHdyYXBwZXJBbmltYXRpb24sIGJhY2tkcm9wQW5pbWF0aW9uIH0gPSBjdXJyZW50QnJlYWtwb2ludCAhPT0gdW5kZWZpbmVkID8gY3JlYXRlU2hlZXRMZWF2ZUFuaW1hdGlvbihvcHRzKSA6IGNyZWF0ZUxlYXZlQW5pbWF0aW9uJDEoKTtcbiAgYmFja2Ryb3BBbmltYXRpb24uYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKTtcbiAgd3JhcHBlckFuaW1hdGlvbi5hZGRFbGVtZW50KHJvb3QucXVlcnlTZWxlY3RvckFsbCgnLm1vZGFsLXdyYXBwZXIsIC5tb2RhbC1zaGFkb3cnKSkuYmVmb3JlU3R5bGVzKHsgb3BhY2l0eTogMSB9KTtcbiAgY29uc3QgYmFzZUFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbignbGVhdmluZy1iYXNlJylcbiAgICAuYWRkRWxlbWVudChiYXNlRWwpXG4gICAgLmVhc2luZygnY3ViaWMtYmV6aWVyKDAuMzIsMC43MiwwLDEpJylcbiAgICAuZHVyYXRpb24oZHVyYXRpb24pXG4gICAgLmFkZEFuaW1hdGlvbih3cmFwcGVyQW5pbWF0aW9uKTtcbiAgaWYgKHByZXNlbnRpbmdFbCkge1xuICAgIGNvbnN0IGlzTW9iaWxlID0gd2luZG93LmlubmVyV2lkdGggPCA3Njg7XG4gICAgY29uc3QgaGFzQ2FyZE1vZGFsID0gcHJlc2VudGluZ0VsLnRhZ05hbWUgPT09ICdJT04tTU9EQUwnICYmIHByZXNlbnRpbmdFbC5wcmVzZW50aW5nRWxlbWVudCAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByZXNlbnRpbmdFbFJvb3QgPSBnZXRFbGVtZW50Um9vdChwcmVzZW50aW5nRWwpO1xuICAgIGNvbnN0IHByZXNlbnRpbmdBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKVxuICAgICAgLmJlZm9yZUNsZWFyU3R5bGVzKFsndHJhbnNmb3JtJ10pXG4gICAgICAuYWZ0ZXJDbGVhclN0eWxlcyhbJ3RyYW5zZm9ybSddKVxuICAgICAgLm9uRmluaXNoKChjdXJyZW50U3RlcCkgPT4ge1xuICAgICAgLy8gb25seSByZXNldCBiYWNrZ3JvdW5kIGNvbG9yIGlmIHRoaXMgaXMgdGhlIGxhc3QgY2FyZC1zdHlsZSBtb2RhbFxuICAgICAgaWYgKGN1cnJlbnRTdGVwICE9PSAxKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHByZXNlbnRpbmdFbC5zdHlsZS5zZXRQcm9wZXJ0eSgnb3ZlcmZsb3cnLCAnJyk7XG4gICAgICBjb25zdCBudW1Nb2RhbHMgPSBBcnJheS5mcm9tKGJvZHlFbC5xdWVyeVNlbGVjdG9yQWxsKCdpb24tbW9kYWwnKSkuZmlsdGVyKChtKSA9PiBtLnByZXNlbnRpbmdFbGVtZW50ICE9PSB1bmRlZmluZWQpLmxlbmd0aDtcbiAgICAgIGlmIChudW1Nb2RhbHMgPD0gMSkge1xuICAgICAgICBib2R5RWwuc3R5bGUuc2V0UHJvcGVydHkoJ2JhY2tncm91bmQtY29sb3InLCAnJyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgYm9keUVsID0gZG9jdW1lbnQuYm9keTtcbiAgICBpZiAoaXNNb2JpbGUpIHtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybU9mZnNldCA9ICFDU1Muc3VwcG9ydHMoJ3dpZHRoJywgJ21heCgwcHgsIDFweCknKSA/ICczMHB4JyA6ICdtYXgoMzBweCwgdmFyKC0taW9uLXNhZmUtYXJlYS10b3ApKSc7XG4gICAgICBjb25zdCBtb2RhbFRyYW5zZm9ybSA9IGhhc0NhcmRNb2RhbCA/ICctMTBweCcgOiB0cmFuc2Zvcm1PZmZzZXQ7XG4gICAgICBjb25zdCB0b1ByZXNlbnRpbmdTY2FsZSA9IFN3aXBlVG9DbG9zZURlZmF1bHRzLk1JTl9QUkVTRU5USU5HX1NDQUxFO1xuICAgICAgY29uc3QgZmluYWxUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlWSgke21vZGFsVHJhbnNmb3JtfSkgc2NhbGUoJHt0b1ByZXNlbnRpbmdTY2FsZX0pYDtcbiAgICAgIHByZXNlbnRpbmdBbmltYXRpb24uYWRkRWxlbWVudChwcmVzZW50aW5nRWwpLmtleWZyYW1lcyhbXG4gICAgICAgIHsgb2Zmc2V0OiAwLCBmaWx0ZXI6ICdjb250cmFzdCgwLjg1KScsIHRyYW5zZm9ybTogZmluYWxUcmFuc2Zvcm0sIGJvcmRlclJhZGl1czogJzEwcHggMTBweCAwIDAnIH0sXG4gICAgICAgIHsgb2Zmc2V0OiAxLCBmaWx0ZXI6ICdjb250cmFzdCgxKScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMHB4KSBzY2FsZSgxKScsIGJvcmRlclJhZGl1czogJzBweCcgfSxcbiAgICAgIF0pO1xuICAgICAgYmFzZUFuaW1hdGlvbi5hZGRBbmltYXRpb24ocHJlc2VudGluZ0FuaW1hdGlvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYmFzZUFuaW1hdGlvbi5hZGRBbmltYXRpb24oYmFja2Ryb3BBbmltYXRpb24pO1xuICAgICAgaWYgKCFoYXNDYXJkTW9kYWwpIHtcbiAgICAgICAgd3JhcHBlckFuaW1hdGlvbi5mcm9tVG8oJ29wYWNpdHknLCAnMScsICcwJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgdG9QcmVzZW50aW5nU2NhbGUgPSBoYXNDYXJkTW9kYWwgPyBTd2lwZVRvQ2xvc2VEZWZhdWx0cy5NSU5fUFJFU0VOVElOR19TQ0FMRSA6IDE7XG4gICAgICAgIGNvbnN0IGZpbmFsVHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoLTEwcHgpIHNjYWxlKCR7dG9QcmVzZW50aW5nU2NhbGV9KWA7XG4gICAgICAgIHByZXNlbnRpbmdBbmltYXRpb25cbiAgICAgICAgICAuYWRkRWxlbWVudChwcmVzZW50aW5nRWxSb290LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC13cmFwcGVyJykpXG4gICAgICAgICAgLmFmdGVyU3R5bGVzKHtcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgwLCAwLCAwKScsXG4gICAgICAgIH0pXG4gICAgICAgICAgLmtleWZyYW1lcyhbXG4gICAgICAgICAgeyBvZmZzZXQ6IDAsIGZpbHRlcjogJ2NvbnRyYXN0KDAuODUpJywgdHJhbnNmb3JtOiBmaW5hbFRyYW5zZm9ybSB9LFxuICAgICAgICAgIHsgb2Zmc2V0OiAxLCBmaWx0ZXI6ICdjb250cmFzdCgxKScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCkgc2NhbGUoMSknIH0sXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCBzaGFkb3dBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKVxuICAgICAgICAgIC5hZGRFbGVtZW50KHByZXNlbnRpbmdFbFJvb3QucXVlcnlTZWxlY3RvcignLm1vZGFsLXNoYWRvdycpKVxuICAgICAgICAgIC5hZnRlclN0eWxlcyh7XG4gICAgICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKSBzY2FsZSgxKScsXG4gICAgICAgIH0pXG4gICAgICAgICAgLmtleWZyYW1lcyhbXG4gICAgICAgICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6ICcwJywgdHJhbnNmb3JtOiBmaW5hbFRyYW5zZm9ybSB9LFxuICAgICAgICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAnMScsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCkgc2NhbGUoMSknIH0sXG4gICAgICAgIF0pO1xuICAgICAgICBiYXNlQW5pbWF0aW9uLmFkZEFuaW1hdGlvbihbcHJlc2VudGluZ0FuaW1hdGlvbiwgc2hhZG93QW5pbWF0aW9uXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGJhc2VBbmltYXRpb24uYWRkQW5pbWF0aW9uKGJhY2tkcm9wQW5pbWF0aW9uKTtcbiAgfVxuICByZXR1cm4gYmFzZUFuaW1hdGlvbjtcbn07XG5cbmNvbnN0IGNyZWF0ZUVudGVyQW5pbWF0aW9uID0gKCkgPT4ge1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpXG4gICAgLmZyb21Ubygnb3BhY2l0eScsIDAuMDEsICd2YXIoLS1iYWNrZHJvcC1vcGFjaXR5KScpXG4gICAgLmJlZm9yZVN0eWxlcyh7XG4gICAgJ3BvaW50ZXItZXZlbnRzJzogJ25vbmUnLFxuICB9KVxuICAgIC5hZnRlckNsZWFyU3R5bGVzKFsncG9pbnRlci1ldmVudHMnXSk7XG4gIGNvbnN0IHdyYXBwZXJBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKS5rZXlmcmFtZXMoW1xuICAgIHsgb2Zmc2V0OiAwLCBvcGFjaXR5OiAwLjAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDQwcHgpJyB9LFxuICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGVZKDBweClgIH0sXG4gIF0pO1xuICByZXR1cm4geyBiYWNrZHJvcEFuaW1hdGlvbiwgd3JhcHBlckFuaW1hdGlvbiB9O1xufTtcbi8qKlxuICogTWQgTW9kYWwgRW50ZXIgQW5pbWF0aW9uXG4gKi9cbmNvbnN0IG1kRW50ZXJBbmltYXRpb24gPSAoYmFzZUVsLCBvcHRzKSA9PiB7XG4gIGNvbnN0IHsgY3VycmVudEJyZWFrcG9pbnQgfSA9IG9wdHM7XG4gIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChiYXNlRWwpO1xuICBjb25zdCB7IHdyYXBwZXJBbmltYXRpb24sIGJhY2tkcm9wQW5pbWF0aW9uIH0gPSBjdXJyZW50QnJlYWtwb2ludCAhPT0gdW5kZWZpbmVkID8gY3JlYXRlU2hlZXRFbnRlckFuaW1hdGlvbihvcHRzKSA6IGNyZWF0ZUVudGVyQW5pbWF0aW9uKCk7XG4gIGJhY2tkcm9wQW5pbWF0aW9uLmFkZEVsZW1lbnQocm9vdC5xdWVyeVNlbGVjdG9yKCdpb24tYmFja2Ryb3AnKSk7XG4gIHdyYXBwZXJBbmltYXRpb24uYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC13cmFwcGVyJykpO1xuICByZXR1cm4gY3JlYXRlQW5pbWF0aW9uKClcbiAgICAuYWRkRWxlbWVudChiYXNlRWwpXG4gICAgLmVhc2luZygnY3ViaWMtYmV6aWVyKDAuMzYsMC42NiwwLjA0LDEpJylcbiAgICAuZHVyYXRpb24oMjgwKVxuICAgIC5hZGRBbmltYXRpb24oW2JhY2tkcm9wQW5pbWF0aW9uLCB3cmFwcGVyQW5pbWF0aW9uXSk7XG59O1xuXG5jb25zdCBjcmVhdGVMZWF2ZUFuaW1hdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgYmFja2Ryb3BBbmltYXRpb24gPSBjcmVhdGVBbmltYXRpb24oKS5mcm9tVG8oJ29wYWNpdHknLCAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknLCAwKTtcbiAgY29uc3Qgd3JhcHBlckFuaW1hdGlvbiA9IGNyZWF0ZUFuaW1hdGlvbigpLmtleWZyYW1lcyhbXG4gICAgeyBvZmZzZXQ6IDAsIG9wYWNpdHk6IDAuOTksIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoMHB4KWAgfSxcbiAgICB7IG9mZnNldDogMSwgb3BhY2l0eTogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSg0MHB4KScgfSxcbiAgXSk7XG4gIHJldHVybiB7IGJhY2tkcm9wQW5pbWF0aW9uLCB3cmFwcGVyQW5pbWF0aW9uIH07XG59O1xuLyoqXG4gKiBNZCBNb2RhbCBMZWF2ZSBBbmltYXRpb25cbiAqL1xuY29uc3QgbWRMZWF2ZUFuaW1hdGlvbiA9IChiYXNlRWwsIG9wdHMpID0+IHtcbiAgY29uc3QgeyBjdXJyZW50QnJlYWtwb2ludCB9ID0gb3B0cztcbiAgY29uc3Qgcm9vdCA9IGdldEVsZW1lbnRSb290KGJhc2VFbCk7XG4gIGNvbnN0IHsgd3JhcHBlckFuaW1hdGlvbiwgYmFja2Ryb3BBbmltYXRpb24gfSA9IGN1cnJlbnRCcmVha3BvaW50ICE9PSB1bmRlZmluZWQgPyBjcmVhdGVTaGVldExlYXZlQW5pbWF0aW9uKG9wdHMpIDogY3JlYXRlTGVhdmVBbmltYXRpb24oKTtcbiAgYmFja2Ryb3BBbmltYXRpb24uYWRkRWxlbWVudChyb290LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1iYWNrZHJvcCcpKTtcbiAgd3JhcHBlckFuaW1hdGlvbi5hZGRFbGVtZW50KHJvb3QucXVlcnlTZWxlY3RvcignLm1vZGFsLXdyYXBwZXInKSk7XG4gIHJldHVybiBjcmVhdGVBbmltYXRpb24oKVxuICAgIC5lYXNpbmcoJ2N1YmljLWJlemllcigwLjQ3LDAsMC43NDUsMC43MTUpJylcbiAgICAuZHVyYXRpb24oMjAwKVxuICAgIC5hZGRBbmltYXRpb24oW2JhY2tkcm9wQW5pbWF0aW9uLCB3cmFwcGVyQW5pbWF0aW9uXSk7XG59O1xuXG5jb25zdCBjcmVhdGVTaGVldEdlc3R1cmUgPSAoYmFzZUVsLCBiYWNrZHJvcEVsLCB3cmFwcGVyRWwsIGluaXRpYWxCcmVha3BvaW50LCBiYWNrZHJvcEJyZWFrcG9pbnQsIGFuaW1hdGlvbiwgYnJlYWtwb2ludHMgPSBbXSwgZ2V0Q3VycmVudEJyZWFrcG9pbnQsIG9uRGlzbWlzcywgb25CcmVha3BvaW50Q2hhbmdlKSA9PiB7XG4gIC8vIERlZmF1bHRzIGZvciB0aGUgc2hlZXQgc3dpcGUgYW5pbWF0aW9uXG4gIGNvbnN0IGRlZmF1bHRCYWNrZHJvcCA9IFtcbiAgICB7IG9mZnNldDogMCwgb3BhY2l0eTogJ3ZhcigtLWJhY2tkcm9wLW9wYWNpdHkpJyB9LFxuICAgIHsgb2Zmc2V0OiAxLCBvcGFjaXR5OiAwLjAxIH0sXG4gIF07XG4gIGNvbnN0IGN1c3RvbUJhY2tkcm9wID0gW1xuICAgIHsgb2Zmc2V0OiAwLCBvcGFjaXR5OiAndmFyKC0tYmFja2Ryb3Atb3BhY2l0eSknIH0sXG4gICAgeyBvZmZzZXQ6IDEgLSBiYWNrZHJvcEJyZWFrcG9pbnQsIG9wYWNpdHk6IDAgfSxcbiAgICB7IG9mZnNldDogMSwgb3BhY2l0eTogMCB9LFxuICBdO1xuICBjb25zdCBTaGVldERlZmF1bHRzID0ge1xuICAgIFdSQVBQRVJfS0VZRlJBTUVTOiBbXG4gICAgICB7IG9mZnNldDogMCwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwJSknIH0sXG4gICAgICB7IG9mZnNldDogMSwgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgxMDAlKScgfSxcbiAgICBdLFxuICAgIEJBQ0tEUk9QX0tFWUZSQU1FUzogYmFja2Ryb3BCcmVha3BvaW50ICE9PSAwID8gY3VzdG9tQmFja2Ryb3AgOiBkZWZhdWx0QmFja2Ryb3AsXG4gIH07XG4gIGNvbnN0IGNvbnRlbnRFbCA9IGJhc2VFbC5xdWVyeVNlbGVjdG9yKCdpb24tY29udGVudCcpO1xuICBjb25zdCBoZWlnaHQgPSB3cmFwcGVyRWwuY2xpZW50SGVpZ2h0O1xuICBsZXQgY3VycmVudEJyZWFrcG9pbnQgPSBpbml0aWFsQnJlYWtwb2ludDtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGxldCBjYW5EaXNtaXNzQmxvY2tzR2VzdHVyZSA9IGZhbHNlO1xuICBjb25zdCBjYW5EaXNtaXNzTWF4U3RlcCA9IDAuOTU7XG4gIGNvbnN0IHdyYXBwZXJBbmltYXRpb24gPSBhbmltYXRpb24uY2hpbGRBbmltYXRpb25zLmZpbmQoKGFuaSkgPT4gYW5pLmlkID09PSAnd3JhcHBlckFuaW1hdGlvbicpO1xuICBjb25zdCBiYWNrZHJvcEFuaW1hdGlvbiA9IGFuaW1hdGlvbi5jaGlsZEFuaW1hdGlvbnMuZmluZCgoYW5pKSA9PiBhbmkuaWQgPT09ICdiYWNrZHJvcEFuaW1hdGlvbicpO1xuICBjb25zdCBtYXhCcmVha3BvaW50ID0gYnJlYWtwb2ludHNbYnJlYWtwb2ludHMubGVuZ3RoIC0gMV07XG4gIGNvbnN0IG1pbkJyZWFrcG9pbnQgPSBicmVha3BvaW50c1swXTtcbiAgY29uc3QgZW5hYmxlQmFja2Ryb3AgPSAoKSA9PiB7XG4gICAgYmFzZUVsLnN0eWxlLnNldFByb3BlcnR5KCdwb2ludGVyLWV2ZW50cycsICdhdXRvJyk7XG4gICAgYmFja2Ryb3BFbC5zdHlsZS5zZXRQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnLCAnYXV0bycpO1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGJhY2tkcm9wIGlzIGVuYWJsZWQsIGVsZW1lbnRzIHN1Y2hcbiAgICAgKiBhcyBpbnB1dHMgc2hvdWxkIG5vdCBiZSBmb2N1c2FibGUgb3V0c2lkZVxuICAgICAqIHRoZSBzaGVldC5cbiAgICAgKi9cbiAgICBiYXNlRWwuY2xhc3NMaXN0LnJlbW92ZSgnaW9uLWRpc2FibGUtZm9jdXMtdHJhcCcpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlQmFja2Ryb3AgPSAoKSA9PiB7XG4gICAgYmFzZUVsLnN0eWxlLnNldFByb3BlcnR5KCdwb2ludGVyLWV2ZW50cycsICdub25lJyk7XG4gICAgYmFja2Ryb3BFbC5zdHlsZS5zZXRQcm9wZXJ0eSgncG9pbnRlci1ldmVudHMnLCAnbm9uZScpO1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGJhY2tkcm9wIGlzIGVuYWJsZWQsIGVsZW1lbnRzIHN1Y2hcbiAgICAgKiBhcyBpbnB1dHMgc2hvdWxkIG5vdCBiZSBmb2N1c2FibGUgb3V0c2lkZVxuICAgICAqIHRoZSBzaGVldC5cbiAgICAgKiBBZGRpbmcgdGhpcyBjbGFzcyBkaXNhYmxlcyBmb2N1cyB0cmFwcGluZ1xuICAgICAqIGZvciB0aGUgc2hlZXQgdGVtcG9yYXJpbHkuXG4gICAgICovXG4gICAgYmFzZUVsLmNsYXNzTGlzdC5hZGQoJ2lvbi1kaXNhYmxlLWZvY3VzLXRyYXAnKTtcbiAgfTtcbiAgLyoqXG4gICAqIEFmdGVyIHRoZSBlbnRlcmluZyBhbmltYXRpb24gY29tcGxldGVzLFxuICAgKiB3ZSBuZWVkIHRvIHNldCB0aGUgYW5pbWF0aW9uIHRvIGdvIGZyb21cbiAgICogb2Zmc2V0IDAgdG8gb2Zmc2V0IDEgc28gdGhhdCB1c2VycyBjYW5cbiAgICogc3dpcGUgaW4gYW55IGRpcmVjdGlvbi4gV2UgdGhlbiBzZXQgdGhlXG4gICAqIGFuaW1hdGlvbiBvZmZzZXQgdG8gdGhlIGN1cnJlbnQgYnJlYWtwb2ludFxuICAgKiBzbyB0aGVyZSBpcyBubyBmbGlja2VyaW5nLlxuICAgKi9cbiAgaWYgKHdyYXBwZXJBbmltYXRpb24gJiYgYmFja2Ryb3BBbmltYXRpb24pIHtcbiAgICB3cmFwcGVyQW5pbWF0aW9uLmtleWZyYW1lcyhbLi4uU2hlZXREZWZhdWx0cy5XUkFQUEVSX0tFWUZSQU1FU10pO1xuICAgIGJhY2tkcm9wQW5pbWF0aW9uLmtleWZyYW1lcyhbLi4uU2hlZXREZWZhdWx0cy5CQUNLRFJPUF9LRVlGUkFNRVNdKTtcbiAgICBhbmltYXRpb24ucHJvZ3Jlc3NTdGFydCh0cnVlLCAxIC0gY3VycmVudEJyZWFrcG9pbnQpO1xuICAgIC8qKlxuICAgICAqIElmIGJhY2tkcm9wIGlzIG5vdCBlbmFibGVkLCB0aGVuIGNvbnRlbnRcbiAgICAgKiBiZWhpbmQgbW9kYWwgc2hvdWxkIGJlIGNsaWNrYWJsZS4gVG8gZG8gdGhpcywgd2UgbmVlZFxuICAgICAqIHRvIHJlbW92ZSBwb2ludGVyLWV2ZW50cyBmcm9tIGlvbi1tb2RhbCBhcyBhIHdob2xlLlxuICAgICAqIGlvbi1iYWNrZHJvcCBhbmQgLm1vZGFsLXdyYXBwZXIgYWx3YXlzIGhhdmUgcG9pbnRlci1ldmVudHM6IGF1dG9cbiAgICAgKiBhcHBsaWVkLCBzbyB0aGUgbW9kYWwgY29udGVudCBjYW4gc3RpbGwgYmUgaW50ZXJhY3RlZCB3aXRoLlxuICAgICAqL1xuICAgIGNvbnN0IHNob3VsZEVuYWJsZUJhY2tkcm9wID0gY3VycmVudEJyZWFrcG9pbnQgPiBiYWNrZHJvcEJyZWFrcG9pbnQ7XG4gICAgaWYgKHNob3VsZEVuYWJsZUJhY2tkcm9wKSB7XG4gICAgICBlbmFibGVCYWNrZHJvcCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGRpc2FibGVCYWNrZHJvcCgpO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEVsICYmIGN1cnJlbnRCcmVha3BvaW50ICE9PSBtYXhCcmVha3BvaW50KSB7XG4gICAgY29udGVudEVsLnNjcm9sbFkgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBjYW5TdGFydCA9IChkZXRhaWwpID0+IHtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgc2hlZXQgaXMgZnVsbHkgZXhwYW5kZWQgYW5kXG4gICAgICogdGhlIHVzZXIgaXMgc3dpcGluZyBvbiB0aGUgY29udGVudCxcbiAgICAgKiB0aGUgZ2VzdHVyZSBzaG91bGQgbm90IHN0YXJ0IHRvXG4gICAgICogYWxsb3cgZm9yIHNjcm9sbGluZyBvbiB0aGUgY29udGVudC5cbiAgICAgKi9cbiAgICBjb25zdCBjb250ZW50ID0gZGV0YWlsLmV2ZW50LnRhcmdldC5jbG9zZXN0KCdpb24tY29udGVudCcpO1xuICAgIGN1cnJlbnRCcmVha3BvaW50ID0gZ2V0Q3VycmVudEJyZWFrcG9pbnQoKTtcbiAgICBpZiAoY3VycmVudEJyZWFrcG9pbnQgPT09IDEgJiYgY29udGVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgY29uc3Qgb25TdGFydCA9ICgpID0+IHtcbiAgICAvKipcbiAgICAgKiBJZiBjYW5EaXNtaXNzIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYHRydWVgXG4gICAgICogdGhlbiB1c2VycyBzaG91bGQgYmUgYWJsZSB0byBzd2lwZSBkb3duXG4gICAgICogdW50aWwgYSB0aHJlc2hvbGQgaXMgaGl0LiBBdCB0aGF0IHBvaW50LFxuICAgICAqIHRoZSBjYXJkIG1vZGFsIHNob3VsZCBub3QgcHJvY2VlZCBhbnkgZnVydGhlci5cbiAgICAgKlxuICAgICAqIGNhbkRpc21pc3MgaXMgbmV2ZXIgZmlyZWQgdmlhIGdlc3R1cmUgaWYgdGhlcmUgaXNcbiAgICAgKiBubyAwIGJyZWFrcG9pbnQuIEhvd2V2ZXIsIGl0IGNhbiBiZSBmaXJlZCBpZiB0aGUgdXNlclxuICAgICAqIHByZXNzZXMgRXNjIG9yIHRoZSBoYXJkd2FyZSBiYWNrIGJ1dHRvbi5cbiAgICAgKiBUT0RPIChGVy05MzcpXG4gICAgICogUmVtb3ZlIHVuZGVmaW5lZCBjaGVja1xuICAgICAqL1xuICAgIGNhbkRpc21pc3NCbG9ja3NHZXN0dXJlID0gYmFzZUVsLmNhbkRpc21pc3MgIT09IHVuZGVmaW5lZCAmJiBiYXNlRWwuY2FuRGlzbWlzcyAhPT0gdHJ1ZSAmJiBtaW5CcmVha3BvaW50ID09PSAwO1xuICAgIC8qKlxuICAgICAqIElmIHN3aXBpbmcgb24gdGhlIGNvbnRlbnRcbiAgICAgKiB3ZSBzaG91bGQgZGlzYWJsZSBzY3JvbGxpbmcgb3RoZXJ3aXNlXG4gICAgICogdGhlIHNoZWV0IHdpbGwgZXhwYW5kIGFuZCB0aGUgY29udGVudCB3aWxsIHNjcm9sbC5cbiAgICAgKi9cbiAgICBpZiAoY29udGVudEVsKSB7XG4gICAgICBjb250ZW50RWwuc2Nyb2xsWSA9IGZhbHNlO1xuICAgIH1cbiAgICByYWYoKCkgPT4ge1xuICAgICAgLyoqXG4gICAgICAgKiBEaXNtaXNzZXMgdGhlIG9wZW4ga2V5Ym9hcmQgd2hlbiB0aGUgc2hlZXQgZHJhZyBnZXN0dXJlIGlzIHN0YXJ0ZWQuXG4gICAgICAgKiBTZXRzIHRoZSBmb2N1cyBvbnRvIHRoZSBtb2RhbCBlbGVtZW50LlxuICAgICAgICovXG4gICAgICBiYXNlRWwuZm9jdXMoKTtcbiAgICB9KTtcbiAgICBhbmltYXRpb24ucHJvZ3Jlc3NTdGFydCh0cnVlLCAxIC0gY3VycmVudEJyZWFrcG9pbnQpO1xuICB9O1xuICBjb25zdCBvbk1vdmUgPSAoZGV0YWlsKSA9PiB7XG4gICAgLyoqXG4gICAgICogR2l2ZW4gdGhlIGNoYW5nZSBpbiBnZXN0dXJlIHBvc2l0aW9uIG9uIHRoZSBZIGF4aXMsXG4gICAgICogY29tcHV0ZSB3aGVyZSB0aGUgb2Zmc2V0IG9mIHRoZSBhbmltYXRpb24gc2hvdWxkIGJlXG4gICAgICogcmVsYXRpdmUgdG8gd2hlcmUgdGhlIHVzZXIgZHJhZ2dlZC5cbiAgICAgKi9cbiAgICBjb25zdCBpbml0aWFsU3RlcCA9IDEgLSBjdXJyZW50QnJlYWtwb2ludDtcbiAgICBjb25zdCBzZWNvbmRUb0xhc3RCcmVha3BvaW50ID0gYnJlYWtwb2ludHMubGVuZ3RoID4gMSA/IDEgLSBicmVha3BvaW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzdGVwID0gaW5pdGlhbFN0ZXAgKyBkZXRhaWwuZGVsdGFZIC8gaGVpZ2h0O1xuICAgIGNvbnN0IGlzQXR0ZW1wdGluZ0Rpc21pc3NXaXRoQ2FuRGlzbWlzcyA9IHNlY29uZFRvTGFzdEJyZWFrcG9pbnQgIT09IHVuZGVmaW5lZCAmJiBzdGVwID49IHNlY29uZFRvTGFzdEJyZWFrcG9pbnQgJiYgY2FuRGlzbWlzc0Jsb2Nrc0dlc3R1cmU7XG4gICAgLyoqXG4gICAgICogSWYgd2UgYXJlIGJsb2NraW5nIHRoZSBnZXN0dXJlIGZyb20gZGlzbWlzc2luZyxcbiAgICAgKiBzZXQgdGhlIG1heCBzdGVwIHZhbHVlIHNvIHRoYXQgdGhlIHNoZWV0IGNhbm5vdCBiZVxuICAgICAqIGNvbXBsZXRlbHkgaGlkZGVuLlxuICAgICAqL1xuICAgIGNvbnN0IG1heFN0ZXAgPSBpc0F0dGVtcHRpbmdEaXNtaXNzV2l0aENhbkRpc21pc3MgPyBjYW5EaXNtaXNzTWF4U3RlcCA6IDAuOTk5OTtcbiAgICAvKipcbiAgICAgKiBJZiB3ZSBhcmUgYmxvY2tpbmcgdGhlIGdlc3R1cmUgZnJvbVxuICAgICAqIGRpc21pc3NpbmcsIGNhbGN1bGF0ZSB0aGUgc3ByaW5nIG1vZGlmaWVyIHZhbHVlXG4gICAgICogdGhpcyB3aWxsIGJlIGFkZGVkIHRvIHRoZSBzdGFydGluZyBicmVha3BvaW50XG4gICAgICogdmFsdWUgdG8gZ2l2ZSB0aGUgZ2VzdHVyZSBhIHNwcmluZy1saWtlIGZlZWxpbmcuXG4gICAgICogTm90ZSB0aGF0IHdoZW4gaXNBdHRlbXB0aW5nRGlzbWlzc1dpdGhDYW5EaXNtaXNzIGlzIHRydWUsXG4gICAgICogdGhlIG1vZGlmaWVyIGlzIGFsd2F5cyBhZGRlZCB0byB0aGUgYnJlYWtwb2ludCB0aGF0XG4gICAgICogYXBwZWFycyByaWdodCBhZnRlciB0aGUgMCBicmVha3BvaW50LlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgaXMgZXNzZW50aWFsbHkgdGhlIHByb2dyZXNzaW9uXG4gICAgICogYmV0d2VlbiBzZWNvbmRUb0xhc3RCcmVha3BvaW50IGFuZCBtYXhTdGVwIHdoaWNoIGlzXG4gICAgICogd2h5IHdlIHN1YnRyYWN0IHNlY29uZFRvTGFzdEJyZWFrcG9pbnQuIFRoaXMgbGV0cyB1cyBnZXRcbiAgICAgKiB0aGUgcmVzdWx0IGFzIGEgdmFsdWUgZnJvbSAwIHRvIDEuXG4gICAgICovXG4gICAgY29uc3QgcHJvY2Vzc2VkU3RlcCA9IGlzQXR0ZW1wdGluZ0Rpc21pc3NXaXRoQ2FuRGlzbWlzcyAmJiBzZWNvbmRUb0xhc3RCcmVha3BvaW50ICE9PSB1bmRlZmluZWRcbiAgICAgID8gc2Vjb25kVG9MYXN0QnJlYWtwb2ludCArXG4gICAgICAgIGNhbGN1bGF0ZVNwcmluZ1N0ZXAoKHN0ZXAgLSBzZWNvbmRUb0xhc3RCcmVha3BvaW50KSAvIChtYXhTdGVwIC0gc2Vjb25kVG9MYXN0QnJlYWtwb2ludCkpXG4gICAgICA6IHN0ZXA7XG4gICAgb2Zmc2V0ID0gY2xhbXAoMC4wMDAxLCBwcm9jZXNzZWRTdGVwLCBtYXhTdGVwKTtcbiAgICBhbmltYXRpb24ucHJvZ3Jlc3NTdGVwKG9mZnNldCk7XG4gIH07XG4gIGNvbnN0IG9uRW5kID0gKGRldGFpbCkgPT4ge1xuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGdlc3R1cmUgcmVsZWFzZXMsIHdlIG5lZWQgdG8gZGV0ZXJtaW5lXG4gICAgICogdGhlIGNsb3Nlc3QgYnJlYWtwb2ludCB0byBzbmFwIHRvLlxuICAgICAqL1xuICAgIGNvbnN0IHZlbG9jaXR5ID0gZGV0YWlsLnZlbG9jaXR5WTtcbiAgICBjb25zdCB0aHJlc2hvbGQgPSAoZGV0YWlsLmRlbHRhWSArIHZlbG9jaXR5ICogMzUwKSAvIGhlaWdodDtcbiAgICBjb25zdCBkaWZmID0gY3VycmVudEJyZWFrcG9pbnQgLSB0aHJlc2hvbGQ7XG4gICAgY29uc3QgY2xvc2VzdCA9IGJyZWFrcG9pbnRzLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIE1hdGguYWJzKGIgLSBkaWZmKSA8IE1hdGguYWJzKGEgLSBkaWZmKSA/IGIgOiBhO1xuICAgIH0pO1xuICAgIG1vdmVTaGVldFRvQnJlYWtwb2ludCh7XG4gICAgICBicmVha3BvaW50OiBjbG9zZXN0LFxuICAgICAgYnJlYWtwb2ludE9mZnNldDogb2Zmc2V0LFxuICAgICAgY2FuRGlzbWlzczogY2FuRGlzbWlzc0Jsb2Nrc0dlc3R1cmUsXG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IG1vdmVTaGVldFRvQnJlYWtwb2ludCA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3QgeyBicmVha3BvaW50LCBjYW5EaXNtaXNzLCBicmVha3BvaW50T2Zmc2V0IH0gPSBvcHRpb25zO1xuICAgIC8qKlxuICAgICAqIGNhbkRpc21pc3Mgc2hvdWxkIG9ubHkgcHJldmVudCBzbmFwcGluZ1xuICAgICAqIHdoZW4gdXNlcnMgYXJlIHRyeWluZyB0byBkaXNtaXNzLiBJZiBjYW5EaXNtaXNzXG4gICAgICogaXMgcHJlc2VudCBidXQgdGhlIHVzZXIgaXMgdHJ5aW5nIHRvIHN3aXBlIHVwd2FyZHMsXG4gICAgICogd2Ugc2hvdWxkIGFsbG93IHRoYXQgdG8gaGFwcGVuLFxuICAgICAqL1xuICAgIGNvbnN0IHNob3VsZFByZXZlbnREaXNtaXNzID0gY2FuRGlzbWlzcyAmJiBicmVha3BvaW50ID09PSAwO1xuICAgIGNvbnN0IHNuYXBUb0JyZWFrcG9pbnQgPSBzaG91bGRQcmV2ZW50RGlzbWlzcyA/IGN1cnJlbnRCcmVha3BvaW50IDogYnJlYWtwb2ludDtcbiAgICBjb25zdCBzaG91bGRSZW1haW5PcGVuID0gc25hcFRvQnJlYWtwb2ludCAhPT0gMDtcbiAgICBjdXJyZW50QnJlYWtwb2ludCA9IDA7XG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoZSBhbmltYXRpb24gc28gdGhhdCBpdCBwbGF5cyBmcm9tXG4gICAgICogdGhlIGxhc3Qgb2Zmc2V0IHRvIHRoZSBjbG9zZXN0IHNuYXAgcG9pbnQuXG4gICAgICovXG4gICAgaWYgKHdyYXBwZXJBbmltYXRpb24gJiYgYmFja2Ryb3BBbmltYXRpb24pIHtcbiAgICAgIHdyYXBwZXJBbmltYXRpb24ua2V5ZnJhbWVzKFtcbiAgICAgICAgeyBvZmZzZXQ6IDAsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoJHticmVha3BvaW50T2Zmc2V0ICogMTAwfSUpYCB9LFxuICAgICAgICB7IG9mZnNldDogMSwgdHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkeygxIC0gc25hcFRvQnJlYWtwb2ludCkgKiAxMDB9JSlgIH0sXG4gICAgICBdKTtcbiAgICAgIGJhY2tkcm9wQW5pbWF0aW9uLmtleWZyYW1lcyhbXG4gICAgICAgIHtcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgb3BhY2l0eTogYGNhbGModmFyKC0tYmFja2Ryb3Atb3BhY2l0eSkgKiAke2dldEJhY2tkcm9wVmFsdWVGb3JTaGVldCgxIC0gYnJlYWtwb2ludE9mZnNldCwgYmFja2Ryb3BCcmVha3BvaW50KX0pYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICBvcGFjaXR5OiBgY2FsYyh2YXIoLS1iYWNrZHJvcC1vcGFjaXR5KSAqICR7Z2V0QmFja2Ryb3BWYWx1ZUZvclNoZWV0KHNuYXBUb0JyZWFrcG9pbnQsIGJhY2tkcm9wQnJlYWtwb2ludCl9KWAsXG4gICAgICAgIH0sXG4gICAgICBdKTtcbiAgICAgIGFuaW1hdGlvbi5wcm9ncmVzc1N0ZXAoMCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlc3R1cmUgc2hvdWxkIHJlbWFpbiBkaXNhYmxlZCB1bnRpbCB0aGVcbiAgICAgKiBzbmFwcGluZyBhbmltYXRpb24gY29tcGxldGVzLlxuICAgICAqL1xuICAgIGdlc3R1cmUuZW5hYmxlKGZhbHNlKTtcbiAgICBpZiAoc2hvdWxkUHJldmVudERpc21pc3MpIHtcbiAgICAgIGhhbmRsZUNhbkRpc21pc3MoYmFzZUVsLCBhbmltYXRpb24pO1xuICAgIH1cbiAgICBlbHNlIGlmICghc2hvdWxkUmVtYWluT3Blbikge1xuICAgICAgb25EaXNtaXNzKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgYW5pbWF0aW9uXG4gICAgICAgIC5vbkZpbmlzaCgoKSA9PiB7XG4gICAgICAgIGlmIChzaG91bGRSZW1haW5PcGVuKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogT25jZSB0aGUgc25hcHBpbmcgYW5pbWF0aW9uIGNvbXBsZXRlcyxcbiAgICAgICAgICAgKiB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBhbmltYXRpb24gdG8gZ29cbiAgICAgICAgICAgKiBmcm9tIDAgdG8gMSBzbyB1c2VycyBjYW4gc3dpcGUgaW4gYW55IGRpcmVjdGlvbi5cbiAgICAgICAgICAgKiBXZSB0aGVuIHNldCB0aGUgYW5pbWF0aW9uIG9mZnNldCB0byB0aGUgY3VycmVudFxuICAgICAgICAgICAqIGJyZWFrcG9pbnQgc28gdGhhdCBpdCBzdGFydHMgYXQgdGhlIHNuYXBwZWQgcG9zaXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKHdyYXBwZXJBbmltYXRpb24gJiYgYmFja2Ryb3BBbmltYXRpb24pIHtcbiAgICAgICAgICAgIHJhZigoKSA9PiB7XG4gICAgICAgICAgICAgIHdyYXBwZXJBbmltYXRpb24ua2V5ZnJhbWVzKFsuLi5TaGVldERlZmF1bHRzLldSQVBQRVJfS0VZRlJBTUVTXSk7XG4gICAgICAgICAgICAgIGJhY2tkcm9wQW5pbWF0aW9uLmtleWZyYW1lcyhbLi4uU2hlZXREZWZhdWx0cy5CQUNLRFJPUF9LRVlGUkFNRVNdKTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uLnByb2dyZXNzU3RhcnQodHJ1ZSwgMSAtIHNuYXBUb0JyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICBjdXJyZW50QnJlYWtwb2ludCA9IHNuYXBUb0JyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgIG9uQnJlYWtwb2ludENoYW5nZShjdXJyZW50QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBJZiB0aGUgc2hlZXQgaXMgZnVsbHkgZXhwYW5kZWQsIHdlIGNhbiBzYWZlbHlcbiAgICAgICAgICAgICAgICogZW5hYmxlIHNjcm9sbGluZyBhZ2Fpbi5cbiAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIGlmIChjb250ZW50RWwgJiYgY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgY29udGVudEVsLnNjcm9sbFkgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgKiBCYWNrZHJvcCBzaG91bGQgYmVjb21lIGVuYWJsZWRcbiAgICAgICAgICAgICAgICogYWZ0ZXIgdGhlIGJhY2tkcm9wQnJlYWtwb2ludCB2YWx1ZVxuICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkRW5hYmxlQmFja2Ryb3AgPSBjdXJyZW50QnJlYWtwb2ludCA+IGJhY2tkcm9wQnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgaWYgKHNob3VsZEVuYWJsZUJhY2tkcm9wKSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlQmFja2Ryb3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXNhYmxlQmFja2Ryb3AoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBnZXN0dXJlLmVuYWJsZSh0cnVlKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2VzdHVyZS5lbmFibGUodHJ1ZSk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBtdXN0IGJlIGEgb25lIHRpbWUgY2FsbGJhY2tcbiAgICAgICAgICogb3RoZXJ3aXNlIGEgbmV3IGNhbGxiYWNrIHdpbGxcbiAgICAgICAgICogYmUgYWRkZWQgZXZlcnkgdGltZSBvbkVuZCBydW5zLlxuICAgICAgICAgKi9cbiAgICAgIH0sIHsgb25lVGltZUNhbGxiYWNrOiB0cnVlIH0pXG4gICAgICAgIC5wcm9ncmVzc0VuZCgxLCAwLCA1MDApO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXN0dXJlID0gY3JlYXRlR2VzdHVyZSh7XG4gICAgZWw6IHdyYXBwZXJFbCxcbiAgICBnZXN0dXJlTmFtZTogJ21vZGFsU2hlZXQnLFxuICAgIGdlc3R1cmVQcmlvcml0eTogNDAsXG4gICAgZGlyZWN0aW9uOiAneScsXG4gICAgdGhyZXNob2xkOiAxMCxcbiAgICBjYW5TdGFydCxcbiAgICBvblN0YXJ0LFxuICAgIG9uTW92ZSxcbiAgICBvbkVuZCxcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgZ2VzdHVyZSxcbiAgICBtb3ZlU2hlZXRUb0JyZWFrcG9pbnQsXG4gIH07XG59O1xuXG5jb25zdCBtb2RhbElvc0NzcyA9IFwiOmhvc3R7LS13aWR0aDoxMDAlOy0tbWluLXdpZHRoOmF1dG87LS1tYXgtd2lkdGg6YXV0bzstLWhlaWdodDoxMDAlOy0tbWluLWhlaWdodDphdXRvOy0tbWF4LWhlaWdodDphdXRvOy0tb3ZlcmZsb3c6aGlkZGVuOy0tYm9yZGVyLXJhZGl1czowOy0tYm9yZGVyLXdpZHRoOjA7LS1ib3JkZXItc3R5bGU6bm9uZTstLWJvcmRlci1jb2xvcjp0cmFuc3BhcmVudDstLWJhY2tncm91bmQ6dmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpOy0tYm94LXNoYWRvdzpub25lOy0tYmFja2Ryb3Atb3BhY2l0eTowO2xlZnQ6MDtyaWdodDowO3RvcDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOmFic29sdXRlOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtvdXRsaW5lOm5vbmU7Y29udGFpbjpzdHJpY3R9Lm1vZGFsLXdyYXBwZXIsaW9uLWJhY2tkcm9we3BvaW50ZXItZXZlbnRzOmF1dG99Omhvc3QoLm92ZXJsYXktaGlkZGVuKXtkaXNwbGF5Om5vbmV9Lm1vZGFsLXdyYXBwZXIsLm1vZGFsLXNoYWRvd3tib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO3dpZHRoOnZhcigtLXdpZHRoKTttaW4td2lkdGg6dmFyKC0tbWluLXdpZHRoKTttYXgtd2lkdGg6dmFyKC0tbWF4LXdpZHRoKTtoZWlnaHQ6dmFyKC0taGVpZ2h0KTttaW4taGVpZ2h0OnZhcigtLW1pbi1oZWlnaHQpO21heC1oZWlnaHQ6dmFyKC0tbWF4LWhlaWdodCk7Ym9yZGVyLXdpZHRoOnZhcigtLWJvcmRlci13aWR0aCk7Ym9yZGVyLXN0eWxlOnZhcigtLWJvcmRlci1zdHlsZSk7Ym9yZGVyLWNvbG9yOnZhcigtLWJvcmRlci1jb2xvcik7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTstd2Via2l0LWJveC1zaGFkb3c6dmFyKC0tYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1ib3gtc2hhZG93KTtvdmVyZmxvdzp2YXIoLS1vdmVyZmxvdyk7ei1pbmRleDoxMH0ubW9kYWwtc2hhZG93e3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQ6dHJhbnNwYXJlbnR9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtaW4taGVpZ2h0OiA2MDBweCl7Omhvc3R7LS13aWR0aDo2MDBweDstLWhlaWdodDo1MDBweDstLWlvbi1zYWZlLWFyZWEtdG9wOjBweDstLWlvbi1zYWZlLWFyZWEtYm90dG9tOjBweDstLWlvbi1zYWZlLWFyZWEtcmlnaHQ6MHB4Oy0taW9uLXNhZmUtYXJlYS1sZWZ0OjBweH19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtaW4taGVpZ2h0OiA3NjhweCl7Omhvc3R7LS13aWR0aDo2MDBweDstLWhlaWdodDo2MDBweH19Lm1vZGFsLWhhbmRsZXtsZWZ0OjBweDtyaWdodDowcHg7dG9wOjVweDtib3JkZXItcmFkaXVzOjhweDttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjM2cHg7aGVpZ2h0OjVweDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApO2JvcmRlcjowO2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMzUwLCAjYzBjMGJlKTtjdXJzb3I6cG9pbnRlcjt6LWluZGV4OjExfUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Lm1vZGFsLWhhbmRsZXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW4tcmlnaHQ6dW5zZXQ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6YXV0bzttYXJnaW4taW5saW5lLXN0YXJ0OmF1dG87LXdlYmtpdC1tYXJnaW4tZW5kOmF1dG87bWFyZ2luLWlubGluZS1lbmQ6YXV0b319Lm1vZGFsLWhhbmRsZTo6YmVmb3Jle3BhZGRpbmctbGVmdDo0cHg7cGFkZGluZy1yaWdodDo0cHg7cGFkZGluZy10b3A6NHB4O3BhZGRpbmctYm90dG9tOjRweDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDozNnB4O2hlaWdodDo1cHg7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgLTUwJSk7Y29udGVudDpcXFwiXFxcIn1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5tb2RhbC1oYW5kbGU6OmJlZm9yZXtwYWRkaW5nLWxlZnQ6dW5zZXQ7cGFkZGluZy1yaWdodDp1bnNldDstd2Via2l0LXBhZGRpbmctc3RhcnQ6NHB4O3BhZGRpbmctaW5saW5lLXN0YXJ0OjRweDstd2Via2l0LXBhZGRpbmctZW5kOjRweDtwYWRkaW5nLWlubGluZS1lbmQ6NHB4fX06aG9zdCgubW9kYWwtc2hlZXQpey0taGVpZ2h0OmNhbGMoMTAwJSAtICh2YXIoLS1pb24tc2FmZS1hcmVhLXRvcCkgKyAxMHB4KSl9Omhvc3QoLm1vZGFsLXNoZWV0KSAubW9kYWwtd3JhcHBlciw6aG9zdCgubW9kYWwtc2hlZXQpIC5tb2RhbC1zaGFkb3d7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjB9Omhvc3R7LS1iYWNrZHJvcC1vcGFjaXR5OnZhcigtLWlvbi1iYWNrZHJvcC1vcGFjaXR5LCAwLjQpfTpob3N0KC5tb2RhbC1jYXJkKSw6aG9zdCgubW9kYWwtc2hlZXQpey0tYm9yZGVyLXJhZGl1czoxMHB4fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWluLWhlaWdodDogNjAwcHgpezpob3N0ey0tYm9yZGVyLXJhZGl1czoxMHB4fX0ubW9kYWwtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMTAwJSwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMTAwJSwgIDApfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDc2N3B4KXtAc3VwcG9ydHMgKHdpZHRoOiBtYXgoMHB4LCAxcHgpKXs6aG9zdCgubW9kYWwtY2FyZCl7LS1oZWlnaHQ6Y2FsYygxMDAlIC0gbWF4KDMwcHgsIHZhcigtLWlvbi1zYWZlLWFyZWEtdG9wKSkgLSAxMHB4KX19QHN1cHBvcnRzIG5vdCAod2lkdGg6IG1heCgwcHgsIDFweCkpezpob3N0KC5tb2RhbC1jYXJkKXstLWhlaWdodDpjYWxjKDEwMCUgLSA0MHB4KX19Omhvc3QoLm1vZGFsLWNhcmQpIC5tb2RhbC13cmFwcGVye2JvcmRlci10b3AtbGVmdC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLm1vZGFsLWNhcmQpIC5tb2RhbC13cmFwcGVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5tb2RhbC1jYXJkIC5tb2RhbC13cmFwcGVye2JvcmRlci10b3AtbGVmdC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9Omhvc3QoLm1vZGFsLWNhcmQpey0tYmFja2Ryb3Atb3BhY2l0eTowOy0td2lkdGg6MTAwJTstbXMtZmxleC1hbGlnbjplbmQ7YWxpZ24taXRlbXM6ZmxleC1lbmR9Omhvc3QoLm1vZGFsLWNhcmQpIC5tb2RhbC1zaGFkb3d7ZGlzcGxheTpub25lfTpob3N0KC5tb2RhbC1jYXJkKSBpb24tYmFja2Ryb3B7cG9pbnRlci1ldmVudHM6bm9uZX19QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpezpob3N0KC5tb2RhbC1jYXJkKXstLXdpZHRoOmNhbGMoMTAwJSAtIDEyMHB4KTstLWhlaWdodDpjYWxjKDEwMCUgLSAoMTIwcHggKyB2YXIoLS1pb24tc2FmZS1hcmVhLXRvcCkgKyB2YXIoLS1pb24tc2FmZS1hcmVhLWJvdHRvbSkpKTstLW1heC13aWR0aDo3MjBweDstLW1heC1oZWlnaHQ6MTAwMHB4Oy0tYmFja2Ryb3Atb3BhY2l0eTowOy0tYm94LXNoYWRvdzowcHggMHB4IDMwcHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMSk7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAwLjVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YWxsIDAuNXMgZWFzZS1pbi1vdXR9Omhvc3QoLm1vZGFsLWNhcmQpIC5tb2RhbC13cmFwcGVyey13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZX06aG9zdCgubW9kYWwtY2FyZCkgLm1vZGFsLXNoYWRvd3std2Via2l0LWJveC1zaGFkb3c6dmFyKC0tYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1ib3gtc2hhZG93KX19Omhvc3QoLm1vZGFsLXNoZWV0KSAubW9kYWwtd3JhcHBlcntib3JkZXItdG9wLWxlZnQtcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowfTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5tb2RhbC1zaGVldCkgLm1vZGFsLXdyYXBwZXIsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLm1vZGFsLXNoZWV0IC5tb2RhbC13cmFwcGVye2JvcmRlci10b3AtbGVmdC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9XCI7XG5cbmNvbnN0IG1vZGFsTWRDc3MgPSBcIjpob3N0ey0td2lkdGg6MTAwJTstLW1pbi13aWR0aDphdXRvOy0tbWF4LXdpZHRoOmF1dG87LS1oZWlnaHQ6MTAwJTstLW1pbi1oZWlnaHQ6YXV0bzstLW1heC1oZWlnaHQ6YXV0bzstLW92ZXJmbG93OmhpZGRlbjstLWJvcmRlci1yYWRpdXM6MDstLWJvcmRlci13aWR0aDowOy0tYm9yZGVyLXN0eWxlOm5vbmU7LS1ib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmKTstLWJveC1zaGFkb3c6bm9uZTstLWJhY2tkcm9wLW9wYWNpdHk6MDtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7b3V0bGluZTpub25lO2NvbnRhaW46c3RyaWN0fS5tb2RhbC13cmFwcGVyLGlvbi1iYWNrZHJvcHtwb2ludGVyLWV2ZW50czphdXRvfTpob3N0KC5vdmVybGF5LWhpZGRlbil7ZGlzcGxheTpub25lfS5tb2RhbC13cmFwcGVyLC5tb2RhbC1zaGFkb3d7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTt3aWR0aDp2YXIoLS13aWR0aCk7bWluLXdpZHRoOnZhcigtLW1pbi13aWR0aCk7bWF4LXdpZHRoOnZhcigtLW1heC13aWR0aCk7aGVpZ2h0OnZhcigtLWhlaWdodCk7bWluLWhlaWdodDp2YXIoLS1taW4taGVpZ2h0KTttYXgtaGVpZ2h0OnZhcigtLW1heC1oZWlnaHQpO2JvcmRlci13aWR0aDp2YXIoLS1ib3JkZXItd2lkdGgpO2JvcmRlci1zdHlsZTp2YXIoLS1ib3JkZXItc3R5bGUpO2JvcmRlci1jb2xvcjp2YXIoLS1ib3JkZXItY29sb3IpO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7LXdlYmtpdC1ib3gtc2hhZG93OnZhcigtLWJveC1zaGFkb3cpO2JveC1zaGFkb3c6dmFyKC0tYm94LXNoYWRvdyk7b3ZlcmZsb3c6dmFyKC0tb3ZlcmZsb3cpO3otaW5kZXg6MTB9Lm1vZGFsLXNoYWRvd3twb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWluLWhlaWdodDogNjAwcHgpezpob3N0ey0td2lkdGg6NjAwcHg7LS1oZWlnaHQ6NTAwcHg7LS1pb24tc2FmZS1hcmVhLXRvcDowcHg7LS1pb24tc2FmZS1hcmVhLWJvdHRvbTowcHg7LS1pb24tc2FmZS1hcmVhLXJpZ2h0OjBweDstLWlvbi1zYWZlLWFyZWEtbGVmdDowcHh9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpIGFuZCAobWluLWhlaWdodDogNzY4cHgpezpob3N0ey0td2lkdGg6NjAwcHg7LS1oZWlnaHQ6NjAwcHh9fS5tb2RhbC1oYW5kbGV7bGVmdDowcHg7cmlnaHQ6MHB4O3RvcDo1cHg7Ym9yZGVyLXJhZGl1czo4cHg7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bztwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDozNnB4O2hlaWdodDo1cHg7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKTtib3JkZXI6MDtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTM1MCwgI2MwYzBiZSk7Y3Vyc29yOnBvaW50ZXI7ei1pbmRleDoxMX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5tb2RhbC1oYW5kbGV7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OmF1dG87bWFyZ2luLWlubGluZS1zdGFydDphdXRvOy13ZWJraXQtbWFyZ2luLWVuZDphdXRvO21hcmdpbi1pbmxpbmUtZW5kOmF1dG99fS5tb2RhbC1oYW5kbGU6OmJlZm9yZXtwYWRkaW5nLWxlZnQ6NHB4O3BhZGRpbmctcmlnaHQ6NHB4O3BhZGRpbmctdG9wOjRweDtwYWRkaW5nLWJvdHRvbTo0cHg7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MzZweDtoZWlnaHQ6NXB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLCAtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO2NvbnRlbnQ6XFxcIlxcXCJ9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXsubW9kYWwtaGFuZGxlOjpiZWZvcmV7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjRweDtwYWRkaW5nLWlubGluZS1zdGFydDo0cHg7LXdlYmtpdC1wYWRkaW5nLWVuZDo0cHg7cGFkZGluZy1pbmxpbmUtZW5kOjRweH19Omhvc3QoLm1vZGFsLXNoZWV0KXstLWhlaWdodDpjYWxjKDEwMCUgLSAodmFyKC0taW9uLXNhZmUtYXJlYS10b3ApICsgMTBweCkpfTpob3N0KC5tb2RhbC1zaGVldCkgLm1vZGFsLXdyYXBwZXIsOmhvc3QoLm1vZGFsLXNoZWV0KSAubW9kYWwtc2hhZG93e3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowfTpob3N0ey0tYmFja2Ryb3Atb3BhY2l0eTp2YXIoLS1pb24tYmFja2Ryb3Atb3BhY2l0eSwgMC4zMil9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3NjhweCkgYW5kIChtaW4taGVpZ2h0OiA2MDBweCl7Omhvc3R7LS1ib3JkZXItcmFkaXVzOjJweDstLWJveC1zaGFkb3c6MCAyOHB4IDQ4cHggcmdiYSgwLCAwLCAwLCAwLjQpfX0ubW9kYWwtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgNDBweCwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgNDBweCwgIDApO29wYWNpdHk6MC4wMX1cIjtcblxuY29uc3QgTW9kYWwgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuZGlkUHJlc2VudCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTW9kYWxEaWRQcmVzZW50XCIsIDcpO1xuICAgIHRoaXMud2lsbFByZXNlbnQgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbk1vZGFsV2lsbFByZXNlbnRcIiwgNyk7XG4gICAgdGhpcy53aWxsRGlzbWlzcyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uTW9kYWxXaWxsRGlzbWlzc1wiLCA3KTtcbiAgICB0aGlzLmRpZERpc21pc3MgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbk1vZGFsRGlkRGlzbWlzc1wiLCA3KTtcbiAgICB0aGlzLmlvbkJyZWFrcG9pbnREaWRDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkJyZWFrcG9pbnREaWRDaGFuZ2VcIiwgNyk7XG4gICAgdGhpcy5kaWRQcmVzZW50U2hvcnRoYW5kID0gY3JlYXRlRXZlbnQodGhpcywgXCJkaWRQcmVzZW50XCIsIDcpO1xuICAgIHRoaXMud2lsbFByZXNlbnRTaG9ydGhhbmQgPSBjcmVhdGVFdmVudCh0aGlzLCBcIndpbGxQcmVzZW50XCIsIDcpO1xuICAgIHRoaXMud2lsbERpc21pc3NTaG9ydGhhbmQgPSBjcmVhdGVFdmVudCh0aGlzLCBcIndpbGxEaXNtaXNzXCIsIDcpO1xuICAgIHRoaXMuZGlkRGlzbWlzc1Nob3J0aGFuZCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiZGlkRGlzbWlzc1wiLCA3KTtcbiAgICB0aGlzLnRyaWdnZXJDb250cm9sbGVyID0gY3JlYXRlVHJpZ2dlckNvbnRyb2xsZXIoKTtcbiAgICB0aGlzLm1vZGFsSW5kZXggPSBtb2RhbElkcysrO1xuICAgIHRoaXMuY29yZURlbGVnYXRlID0gQ29yZURlbGVnYXRlKCk7XG4gICAgdGhpcy5pc1NoZWV0TW9kYWwgPSBmYWxzZTtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSB7fTtcbiAgICB0aGlzLmlubGluZSA9IGZhbHNlO1xuICAgIC8vIFdoZXRoZXIgb3Igbm90IG1vZGFsIGlzIGJlaW5nIGRpc21pc3NlZCB2aWEgZ2VzdHVyZVxuICAgIHRoaXMuZ2VzdHVyZUFuaW1hdGlvbkRpc21pc3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLm9uSGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCB7IHNoZWV0VHJhbnNpdGlvbiwgaGFuZGxlQmVoYXZpb3IgfSA9IHRoaXM7XG4gICAgICBpZiAoaGFuZGxlQmVoYXZpb3IgIT09ICdjeWNsZScgfHwgc2hlZXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzaGVldCBtb2RhbCBzaG91bGQgbm90IGFkdmFuY2UgdG8gdGhlIG5leHQgYnJlYWtwb2ludFxuICAgICAgICAgKiBpZiB0aGUgaGFuZGxlIGJlaGF2aW9yIGlzIG5vdCBgY3ljbGVgIG9yIGlmIHRoZSBoYW5kbGVcbiAgICAgICAgICogaXMgY2xpY2tlZCB3aGlsZSB0aGUgc2hlZXQgaXMgbW92aW5nIHRvIGEgYnJlYWtwb2ludC5cbiAgICAgICAgICovXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubW92ZVRvTmV4dEJyZWFrcG9pbnQoKTtcbiAgICB9O1xuICAgIHRoaXMub25CYWNrZHJvcFRhcCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHsgc2hlZXRUcmFuc2l0aW9uIH0gPSB0aGlzO1xuICAgICAgaWYgKHNoZWV0VHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHRoZSBoYW5kbGUgaXMgZG91YmxlIGNsaWNrZWQgYXQgdGhlIGxhcmdlc3QgYnJlYWtwb2ludCxcbiAgICAgICAgICogaXQgd2lsbCBzdGFydCB0byBtb3ZlIHRvIHRoZSBmaXJzdCBicmVha3BvaW50LiBXaGlsZSB0cmFuc2l0aW9uaW5nLFxuICAgICAgICAgKiB0aGUgYmFja2Ryb3Agd2lsbCBvZnRlbiByZWNlaXZlIHRoZSBzZWNvbmQgY2xpY2suIFdlIHByZXZlbnQgdGhlXG4gICAgICAgICAqIGJhY2tkcm9wIGZyb20gZGlzbWlzc2luZyB0aGUgbW9kYWwgd2hpbGUgbW92aW5nIGJldHdlZW4gYnJlYWtwb2ludHMuXG4gICAgICAgICAqL1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmRpc21pc3ModW5kZWZpbmVkLCBCQUNLRFJPUCk7XG4gICAgfTtcbiAgICB0aGlzLm9uTGlmZWN5Y2xlID0gKG1vZGFsRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGVsID0gdGhpcy51c2Vyc0VsZW1lbnQ7XG4gICAgICBjb25zdCBuYW1lID0gTElGRUNZQ0xFX01BUFttb2RhbEV2ZW50LnR5cGVdO1xuICAgICAgaWYgKGVsICYmIG5hbWUpIHtcbiAgICAgICAgY29uc3QgZXYgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgICAgIGJ1YmJsZXM6IGZhbHNlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgICAgIGRldGFpbDogbW9kYWxFdmVudC5kZXRhaWwsXG4gICAgICAgIH0pO1xuICAgICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMucHJlc2VudGVkID0gZmFsc2U7XG4gICAgdGhpcy5oYXNDb250cm9sbGVyID0gZmFsc2U7XG4gICAgdGhpcy5vdmVybGF5SW5kZXggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kZWxlZ2F0ZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmtleWJvYXJkQ2xvc2UgPSB0cnVlO1xuICAgIHRoaXMuZW50ZXJBbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sZWF2ZUFuaW1hdGlvbiA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmJyZWFrcG9pbnRzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaW5pdGlhbEJyZWFrcG9pbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5iYWNrZHJvcEJyZWFrcG9pbnQgPSAwO1xuICAgIHRoaXMuaGFuZGxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGFuZGxlQmVoYXZpb3IgPSAnbm9uZSc7XG4gICAgdGhpcy5jb21wb25lbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb21wb25lbnRQcm9wcyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmNzc0NsYXNzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuYmFja2Ryb3BEaXNtaXNzID0gdHJ1ZTtcbiAgICB0aGlzLnNob3dCYWNrZHJvcCA9IHRydWU7XG4gICAgdGhpcy5hbmltYXRlZCA9IHRydWU7XG4gICAgdGhpcy5wcmVzZW50aW5nRWxlbWVudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmh0bWxBdHRyaWJ1dGVzID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XG4gICAgdGhpcy50cmlnZ2VyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMua2VlcENvbnRlbnRzTW91bnRlZCA9IGZhbHNlO1xuICAgIHRoaXMuY2FuRGlzbWlzcyA9IHRydWU7XG4gIH1cbiAgb25Jc09wZW5DaGFuZ2UobmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgaWYgKG5ld1ZhbHVlID09PSB0cnVlICYmIG9sZFZhbHVlID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5wcmVzZW50KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5ld1ZhbHVlID09PSBmYWxzZSAmJiBvbGRWYWx1ZSA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5kaXNtaXNzKCk7XG4gICAgfVxuICB9XG4gIHRyaWdnZXJDaGFuZ2VkKCkge1xuICAgIGNvbnN0IHsgdHJpZ2dlciwgZWwsIHRyaWdnZXJDb250cm9sbGVyIH0gPSB0aGlzO1xuICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICB0cmlnZ2VyQ29udHJvbGxlci5hZGRDbGlja0xpc3RlbmVyKGVsLCB0cmlnZ2VyKTtcbiAgICB9XG4gIH1cbiAgYnJlYWtwb2ludHNDaGFuZ2VkKGJyZWFrcG9pbnRzKSB7XG4gICAgaWYgKGJyZWFrcG9pbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuc29ydGVkQnJlYWtwb2ludHMgPSBicmVha3BvaW50cy5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgfVxuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIGNvbnN0IHsgZWwgfSA9IHRoaXM7XG4gICAgcHJlcGFyZU92ZXJsYXkoZWwpO1xuICAgIHRoaXMudHJpZ2dlckNoYW5nZWQoKTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLnRyaWdnZXJDb250cm9sbGVyLnJlbW92ZUNsaWNrTGlzdGVuZXIoKTtcbiAgfVxuICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBjb25zdCB7IGJyZWFrcG9pbnRzLCBpbml0aWFsQnJlYWtwb2ludCwgZWwgfSA9IHRoaXM7XG4gICAgdGhpcy5pbmhlcml0ZWRBdHRyaWJ1dGVzID0gaW5oZXJpdEF0dHJpYnV0ZXMoZWwsIFsnYXJpYS1sYWJlbCcsICdyb2xlJ10pO1xuICAgIC8qKlxuICAgICAqIElmIHVzZXIgaGFzIGN1c3RvbSBJRCBzZXQgdGhlbiB3ZSBzaG91bGRcbiAgICAgKiBub3QgYXNzaWduIHRoZSBkZWZhdWx0IGluY3JlbWVudGluZyBJRC5cbiAgICAgKi9cbiAgICB0aGlzLm1vZGFsSWQgPSB0aGlzLmVsLmhhc0F0dHJpYnV0ZSgnaWQnKSA/IHRoaXMuZWwuZ2V0QXR0cmlidXRlKCdpZCcpIDogYGlvbi1tb2RhbC0ke3RoaXMubW9kYWxJbmRleH1gO1xuICAgIGNvbnN0IGlzU2hlZXRNb2RhbCA9ICh0aGlzLmlzU2hlZXRNb2RhbCA9IGJyZWFrcG9pbnRzICE9PSB1bmRlZmluZWQgJiYgaW5pdGlhbEJyZWFrcG9pbnQgIT09IHVuZGVmaW5lZCk7XG4gICAgaWYgKGlzU2hlZXRNb2RhbCkge1xuICAgICAgdGhpcy5jdXJyZW50QnJlYWtwb2ludCA9IHRoaXMuaW5pdGlhbEJyZWFrcG9pbnQ7XG4gICAgfVxuICAgIGlmIChicmVha3BvaW50cyAhPT0gdW5kZWZpbmVkICYmIGluaXRpYWxCcmVha3BvaW50ICE9PSB1bmRlZmluZWQgJiYgIWJyZWFrcG9pbnRzLmluY2x1ZGVzKGluaXRpYWxCcmVha3BvaW50KSkge1xuICAgICAgcHJpbnRJb25XYXJuaW5nKCdZb3VyIGJyZWFrcG9pbnRzIGFycmF5IG11c3QgaW5jbHVkZSB0aGUgaW5pdGlhbEJyZWFrcG9pbnQgdmFsdWUuJyk7XG4gICAgfVxuICB9XG4gIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgLyoqXG4gICAgICogSWYgbW9kYWwgd2FzIHJlbmRlcmVkIHdpdGggaXNPcGVuPVwidHJ1ZVwiXG4gICAgICogdGhlbiB3ZSBzaG91bGQgb3BlbiBtb2RhbCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICBpZiAodGhpcy5pc09wZW4gPT09IHRydWUpIHtcbiAgICAgIHJhZigoKSA9PiB0aGlzLnByZXNlbnQoKSk7XG4gICAgfVxuICAgIHRoaXMuYnJlYWtwb2ludHNDaGFuZ2VkKHRoaXMuYnJlYWtwb2ludHMpO1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IGFuIG92ZXJsYXlcbiAgICogaXMgYmVpbmcgdXNlZCBpbmxpbmUgb3IgdmlhIGEgY29udHJvbGxlci9KU1xuICAgKiBhbmQgcmV0dXJucyB0aGUgY29ycmVjdCBkZWxlZ2F0ZS5cbiAgICogQnkgZGVmYXVsdCwgc3Vic2VxdWVudCBjYWxscyB0byBnZXREZWxlZ2F0ZVxuICAgKiB3aWxsIHVzZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIHRoZSBkZWxlZ2F0ZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgZm9yIGNhbGxpbmcgZGlzbWlzcyBhZnRlclxuICAgKiBwcmVzZW50IHNvIHRoYXQgdGhlIGNvcnJlY3QgZGVsZWdhdGUgaXMgZ2l2ZW4uXG4gICAqL1xuICBnZXREZWxlZ2F0ZShmb3JjZSA9IGZhbHNlKSB7XG4gICAgaWYgKHRoaXMud29ya2luZ0RlbGVnYXRlICYmICFmb3JjZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGVsZWdhdGU6IHRoaXMud29ya2luZ0RlbGVnYXRlLFxuICAgICAgICBpbmxpbmU6IHRoaXMuaW5saW5lLFxuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdXNpbmcgb3ZlcmxheSBpbmxpbmVcbiAgICAgKiB3ZSBwb3RlbnRpYWxseSBuZWVkIHRvIHVzZSB0aGUgY29yZURlbGVnYXRlXG4gICAgICogc28gdGhhdCB0aGlzIHdvcmtzIGluIHZhbmlsbGEgSlMgYXBwcy5cbiAgICAgKiBJZiBhIGRldmVsb3BlciBoYXMgcHJlc2VudGVkIHRoaXMgY29tcG9uZW50XG4gICAgICogdmlhIGEgY29udHJvbGxlciwgdGhlbiB3ZSBjYW4gYXNzdW1lXG4gICAgICogdGhlIGNvbXBvbmVudCBpcyBhbHJlYWR5IGluIHRoZVxuICAgICAqIGNvcnJlY3QgcGxhY2UuXG4gICAgICovXG4gICAgY29uc3QgcGFyZW50RWwgPSB0aGlzLmVsLnBhcmVudE5vZGU7XG4gICAgY29uc3QgaW5saW5lID0gKHRoaXMuaW5saW5lID0gcGFyZW50RWwgIT09IG51bGwgJiYgIXRoaXMuaGFzQ29udHJvbGxlcik7XG4gICAgY29uc3QgZGVsZWdhdGUgPSAodGhpcy53b3JraW5nRGVsZWdhdGUgPSBpbmxpbmUgPyB0aGlzLmRlbGVnYXRlIHx8IHRoaXMuY29yZURlbGVnYXRlIDogdGhpcy5kZWxlZ2F0ZSk7XG4gICAgcmV0dXJuIHsgaW5saW5lLCBkZWxlZ2F0ZSB9O1xuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRoZVxuICAgKiBtb2RhbCBpcyBhbGxvd2VkIHRvIGRpc21pc3MgYmFzZWRcbiAgICogb24gdGhlIHN0YXRlIG9mIHRoZSBjYW5EaXNtaXNzIHByb3AuXG4gICAqL1xuICBhc3luYyBjaGVja0NhbkRpc21pc3MoZGF0YSwgcm9sZSkge1xuICAgIGNvbnN0IHsgY2FuRGlzbWlzcyB9ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGNhbkRpc21pc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBjYW5EaXNtaXNzKGRhdGEsIHJvbGUpO1xuICAgIH1cbiAgICByZXR1cm4gY2FuRGlzbWlzcztcbiAgfVxuICAvKipcbiAgICogUHJlc2VudCB0aGUgbW9kYWwgb3ZlcmxheSBhZnRlciBpdCBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKi9cbiAgYXN5bmMgcHJlc2VudCgpIHtcbiAgICBpZiAodGhpcy5wcmVzZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBwcmVzZW50aW5nRWxlbWVudCwgZWwgfSA9IHRoaXM7XG4gICAgLyoqXG4gICAgICogV2hlbiB1c2luZyBhbiBpbmxpbmUgbW9kYWxcbiAgICAgKiBhbmQgZGlzbWlzc2luZyBhIG1vZGFsIGl0IGlzIHBvc3NpYmxlIHRvXG4gICAgICogcXVpY2tseSBwcmVzZW50IHRoZSBtb2RhbCB3aGlsZSBpdCBpc1xuICAgICAqIGRpc21pc3NpbmcuIFdlIG5lZWQgdG8gYXdhaXQgYW55IGN1cnJlbnRcbiAgICAgKiB0cmFuc2l0aW9uIHRvIGFsbG93IHRoZSBkaXNtaXNzIHRvIGZpbmlzaFxuICAgICAqIGJlZm9yZSBwcmVzZW50aW5nIGFnYWluLlxuICAgICAqL1xuICAgIGlmICh0aGlzLmN1cnJlbnRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuY3VycmVudFRyYW5zaXRpb247XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIHRoZSBtb2RhbCBpcyBwcmVzZW50ZWQgbXVsdGlwbGUgdGltZXMgKGlubGluZSBtb2RhbHMpLCB3ZVxuICAgICAqIG5lZWQgdG8gcmVzZXQgdGhlIGN1cnJlbnQgYnJlYWtwb2ludCB0byB0aGUgaW5pdGlhbCBicmVha3BvaW50LlxuICAgICAqL1xuICAgIHRoaXMuY3VycmVudEJyZWFrcG9pbnQgPSB0aGlzLmluaXRpYWxCcmVha3BvaW50O1xuICAgIGNvbnN0IHsgaW5saW5lLCBkZWxlZ2F0ZSB9ID0gdGhpcy5nZXREZWxlZ2F0ZSh0cnVlKTtcbiAgICB0aGlzLnVzZXJzRWxlbWVudCA9IGF3YWl0IGF0dGFjaENvbXBvbmVudChkZWxlZ2F0ZSwgZWwsIHRoaXMuY29tcG9uZW50LCBbJ2lvbi1wYWdlJ10sIHRoaXMuY29tcG9uZW50UHJvcHMsIGlubGluZSk7XG4gICAgaGFzTGF6eUJ1aWxkKGVsKSAmJiAoYXdhaXQgZGVlcFJlYWR5KHRoaXMudXNlcnNFbGVtZW50KSk7XG4gICAgd3JpdGVUYXNrKCgpID0+IHRoaXMuZWwuY2xhc3NMaXN0LmFkZCgnc2hvdy1tb2RhbCcpKTtcbiAgICB0aGlzLmN1cnJlbnRUcmFuc2l0aW9uID0gcHJlc2VudCh0aGlzLCAnbW9kYWxFbnRlcicsIGlvc0VudGVyQW5pbWF0aW9uLCBtZEVudGVyQW5pbWF0aW9uLCB7XG4gICAgICBwcmVzZW50aW5nRWw6IHByZXNlbnRpbmdFbGVtZW50LFxuICAgICAgY3VycmVudEJyZWFrcG9pbnQ6IHRoaXMuaW5pdGlhbEJyZWFrcG9pbnQsXG4gICAgICBiYWNrZHJvcEJyZWFrcG9pbnQ6IHRoaXMuYmFja2Ryb3BCcmVha3BvaW50LFxuICAgIH0pO1xuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLyoqXG4gICAgICAgKiBUaGlzIG5lZWRzIHRvIGJlIHNldHVwIGJlZm9yZSBhbnlcbiAgICAgICAqIG5vbi10cmFuc2l0aW9uIGFzeW5jIHdvcmsgc28gaXQgY2FuIGJlIGRlcmVmZXJlbmNlZFxuICAgICAgICogaW4gdGhlIGRpc21pc3MgbWV0aG9kLiBUaGUgZGlzbWlzcyBtZXRob2RcbiAgICAgICAqIG9ubHkgd2FpdHMgZm9yIHRoZSBlbnRlcmluZyB0cmFuc2l0aW9uXG4gICAgICAgKiB0byBmaW5pc2guIEl0IGRvZXMgbm90IHdhaXQgZm9yIGFsbCBvZiB0aGUgYHByZXNlbnRgXG4gICAgICAgKiBtZXRob2QgdG8gcmVzb2x2ZS5cbiAgICAgICAqL1xuICAgICAgdGhpcy5rZXlib2FyZE9wZW5DYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ2VzdHVyZSkge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFdoZW4gdGhlIG5hdGl2ZSBrZXlib2FyZCBpcyBvcGVuZWQgYW5kIHRoZSB3ZWJ2aWV3XG4gICAgICAgICAgICogaXMgcmVzaXplZCwgdGhlIGdlc3R1cmUgaW1wbGVtZW50YXRpb24gd2lsbCBiZWNvbWUgdW5yZXNwb25zaXZlXG4gICAgICAgICAgICogYW5kIGVudGVyIGEgZnJlZS1zY3JvbGwgbW9kZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFdoZW4gdGhlIGtleWJvYXJkIGlzIG9wZW5lZCwgd2UgZGlzYWJsZSB0aGUgZ2VzdHVyZSBmb3JcbiAgICAgICAgICAgKiBhIHNpbmdsZSBmcmFtZSBhbmQgcmUtZW5hYmxlIG9uY2UgdGhlIGNvbnRlbnRzIGhhdmUgcmVwb3NpdGlvbmVkXG4gICAgICAgICAgICogZnJvbSB0aGUga2V5Ym9hcmQgcGxhY2VtZW50LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHRoaXMuZ2VzdHVyZS5lbmFibGUoZmFsc2UpO1xuICAgICAgICAgIHJhZigoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICAgICAgICAgIHRoaXMuZ2VzdHVyZS5lbmFibGUodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihLRVlCT0FSRF9ESURfT1BFTiwgdGhpcy5rZXlib2FyZE9wZW5DYWxsYmFjayk7XG4gICAgfVxuICAgIGNvbnN0IGhhc0NhcmRNb2RhbCA9IHByZXNlbnRpbmdFbGVtZW50ICE9PSB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogV2UgbmVlZCB0byBjaGFuZ2UgdGhlIHN0YXR1cyBiYXIgYXQgdGhlXG4gICAgICogc3RhcnQgb2YgdGhlIGFuaW1hdGlvbiBzbyB0aGF0IGl0IGNvbXBsZXRlc1xuICAgICAqIGJ5IHRoZSB0aW1lIHRoZSBjYXJkIGFuaW1hdGlvbiBpcyBkb25lLlxuICAgICAqL1xuICAgIGlmIChoYXNDYXJkTW9kYWwgJiYgZ2V0SW9uTW9kZSh0aGlzKSA9PT0gJ2lvcycpIHtcbiAgICAgIC8vIENhY2hlIHRoZSBvcmlnaW5hbCBzdGF0dXMgYmFyIGNvbG9yIGJlZm9yZSB0aGUgbW9kYWwgaXMgcHJlc2VudGVkXG4gICAgICB0aGlzLnN0YXR1c0JhclN0eWxlID0gYXdhaXQgU3RhdHVzQmFyLmdldFN0eWxlKCk7XG4gICAgICBzZXRDYXJkU3RhdHVzQmFyRGFyaygpO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLmN1cnJlbnRUcmFuc2l0aW9uO1xuICAgIGlmICh0aGlzLmlzU2hlZXRNb2RhbCkge1xuICAgICAgdGhpcy5pbml0U2hlZXRHZXN0dXJlKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGhhc0NhcmRNb2RhbCkge1xuICAgICAgdGhpcy5pbml0U3dpcGVUb0Nsb3NlKCk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFRyYW5zaXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgaW5pdFN3aXBlVG9DbG9zZSgpIHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKGdldElvbk1vZGUodGhpcykgIT09ICdpb3MnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgZWwgfSA9IHRoaXM7XG4gICAgLy8gQWxsIG9mIHRoZSBlbGVtZW50cyBuZWVkZWQgZm9yIHRoZSBzd2lwZSBnZXN0dXJlXG4gICAgLy8gc2hvdWxkIGJlIGluIHRoZSBET00gYW5kIHJlZmVyZW5jZWQgYnkgbm93LCBleGNlcHRcbiAgICAvLyBmb3IgdGhlIHByZXNlbnRpbmcgZWxcbiAgICBjb25zdCBhbmltYXRpb25CdWlsZGVyID0gdGhpcy5sZWF2ZUFuaW1hdGlvbiB8fCBjb25maWcuZ2V0KCdtb2RhbExlYXZlJywgaW9zTGVhdmVBbmltYXRpb24pO1xuICAgIGNvbnN0IGFuaSA9ICh0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbkJ1aWxkZXIoZWwsIHsgcHJlc2VudGluZ0VsOiB0aGlzLnByZXNlbnRpbmdFbGVtZW50IH0pKTtcbiAgICBjb25zdCBjb250ZW50RWwgPSBmaW5kSW9uQ29udGVudChlbCk7XG4gICAgaWYgKCFjb250ZW50RWwpIHtcbiAgICAgIHByaW50SW9uQ29udGVudEVycm9yTXNnKGVsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3RhdHVzQmFyU3R5bGUgPSAoX2EgPSB0aGlzLnN0YXR1c0JhclN0eWxlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBTdHlsZS5EZWZhdWx0O1xuICAgIHRoaXMuZ2VzdHVyZSA9IGNyZWF0ZVN3aXBlVG9DbG9zZUdlc3R1cmUoZWwsIGFuaSwgc3RhdHVzQmFyU3R5bGUsICgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogV2hpbGUgdGhlIGdlc3R1cmUgYW5pbWF0aW9uIGlzIGZpbmlzaGluZ1xuICAgICAgICogaXQgaXMgcG9zc2libGUgZm9yIGEgdXNlciB0byB0YXAgdGhlIGJhY2tkcm9wLlxuICAgICAgICogVGhpcyB3b3VsZCByZXN1bHQgaW4gdGhlIGRpc21pc3MgYW5pbWF0aW9uXG4gICAgICAgKiBiZWluZyBwbGF5ZWQgYWdhaW4uIFR5cGljYWxseSB0aGlzIGlzIGF2b2lkZWRcbiAgICAgICAqIGJ5IHNldHRpbmcgYHByZXNlbnRlZCA9IGZhbHNlYCBvbiB0aGUgb3ZlcmxheVxuICAgICAgICogY29tcG9uZW50OyBob3dldmVyLCB3ZSBjYW5ub3QgZG8gdGhhdCBoZXJlIGFzXG4gICAgICAgKiB0aGF0IHdvdWxkIHByZXZlbnQgdGhlIGVsZW1lbnQgZnJvbSBiZWluZ1xuICAgICAgICogcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cbiAgICAgIHRoaXMuZ2VzdHVyZUFuaW1hdGlvbkRpc21pc3NpbmcgPSB0cnVlO1xuICAgICAgdGhpcy5hbmltYXRpb24ub25GaW5pc2goYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmRpc21pc3ModW5kZWZpbmVkLCBHRVNUVVJFKTtcbiAgICAgICAgdGhpcy5nZXN0dXJlQW5pbWF0aW9uRGlzbWlzc2luZyA9IGZhbHNlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5nZXN0dXJlLmVuYWJsZSh0cnVlKTtcbiAgfVxuICBpbml0U2hlZXRHZXN0dXJlKCkge1xuICAgIGNvbnN0IHsgd3JhcHBlckVsLCBpbml0aWFsQnJlYWtwb2ludCwgYmFja2Ryb3BCcmVha3BvaW50IH0gPSB0aGlzO1xuICAgIGlmICghd3JhcHBlckVsIHx8IGluaXRpYWxCcmVha3BvaW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uQnVpbGRlciA9IHRoaXMuZW50ZXJBbmltYXRpb24gfHwgY29uZmlnLmdldCgnbW9kYWxFbnRlcicsIGlvc0VudGVyQW5pbWF0aW9uKTtcbiAgICBjb25zdCBhbmkgPSAodGhpcy5hbmltYXRpb24gPSBhbmltYXRpb25CdWlsZGVyKHRoaXMuZWwsIHtcbiAgICAgIHByZXNlbnRpbmdFbDogdGhpcy5wcmVzZW50aW5nRWxlbWVudCxcbiAgICAgIGN1cnJlbnRCcmVha3BvaW50OiBpbml0aWFsQnJlYWtwb2ludCxcbiAgICAgIGJhY2tkcm9wQnJlYWtwb2ludCxcbiAgICB9KSk7XG4gICAgYW5pLnByb2dyZXNzU3RhcnQodHJ1ZSwgMSk7XG4gICAgY29uc3QgeyBnZXN0dXJlLCBtb3ZlU2hlZXRUb0JyZWFrcG9pbnQgfSA9IGNyZWF0ZVNoZWV0R2VzdHVyZSh0aGlzLmVsLCB0aGlzLmJhY2tkcm9wRWwsIHdyYXBwZXJFbCwgaW5pdGlhbEJyZWFrcG9pbnQsIGJhY2tkcm9wQnJlYWtwb2ludCwgYW5pLCB0aGlzLnNvcnRlZEJyZWFrcG9pbnRzLCAoKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IHRoaXMuY3VycmVudEJyZWFrcG9pbnQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDA7IH0sICgpID0+IHRoaXMuc2hlZXRPbkRpc21pc3MoKSwgKGJyZWFrcG9pbnQpID0+IHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCcmVha3BvaW50ICE9PSBicmVha3BvaW50KSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICAgICAgICB0aGlzLmlvbkJyZWFrcG9pbnREaWRDaGFuZ2UuZW1pdCh7IGJyZWFrcG9pbnQgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5nZXN0dXJlID0gZ2VzdHVyZTtcbiAgICB0aGlzLm1vdmVTaGVldFRvQnJlYWtwb2ludCA9IG1vdmVTaGVldFRvQnJlYWtwb2ludDtcbiAgICB0aGlzLmdlc3R1cmUuZW5hYmxlKHRydWUpO1xuICB9XG4gIHNoZWV0T25EaXNtaXNzKCkge1xuICAgIC8qKlxuICAgICAqIFdoaWxlIHRoZSBnZXN0dXJlIGFuaW1hdGlvbiBpcyBmaW5pc2hpbmdcbiAgICAgKiBpdCBpcyBwb3NzaWJsZSBmb3IgYSB1c2VyIHRvIHRhcCB0aGUgYmFja2Ryb3AuXG4gICAgICogVGhpcyB3b3VsZCByZXN1bHQgaW4gdGhlIGRpc21pc3MgYW5pbWF0aW9uXG4gICAgICogYmVpbmcgcGxheWVkIGFnYWluLiBUeXBpY2FsbHkgdGhpcyBpcyBhdm9pZGVkXG4gICAgICogYnkgc2V0dGluZyBgcHJlc2VudGVkID0gZmFsc2VgIG9uIHRoZSBvdmVybGF5XG4gICAgICogY29tcG9uZW50OyBob3dldmVyLCB3ZSBjYW5ub3QgZG8gdGhhdCBoZXJlIGFzXG4gICAgICogdGhhdCB3b3VsZCBwcmV2ZW50IHRoZSBlbGVtZW50IGZyb20gYmVpbmdcbiAgICAgKiByZW1vdmVkIGZyb20gdGhlIERPTS5cbiAgICAgKi9cbiAgICB0aGlzLmdlc3R1cmVBbmltYXRpb25EaXNtaXNzaW5nID0gdHJ1ZTtcbiAgICB0aGlzLmFuaW1hdGlvbi5vbkZpbmlzaChhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRCcmVha3BvaW50ID0gMDtcbiAgICAgIHRoaXMuaW9uQnJlYWtwb2ludERpZENoYW5nZS5lbWl0KHsgYnJlYWtwb2ludDogdGhpcy5jdXJyZW50QnJlYWtwb2ludCB9KTtcbiAgICAgIGF3YWl0IHRoaXMuZGlzbWlzcyh1bmRlZmluZWQsIEdFU1RVUkUpO1xuICAgICAgdGhpcy5nZXN0dXJlQW5pbWF0aW9uRGlzbWlzc2luZyA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEaXNtaXNzIHRoZSBtb2RhbCBvdmVybGF5IGFmdGVyIGl0IGhhcyBiZWVuIHByZXNlbnRlZC5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgQW55IGRhdGEgdG8gZW1pdCBpbiB0aGUgZGlzbWlzcyBldmVudHMuXG4gICAqIEBwYXJhbSByb2xlIFRoZSByb2xlIG9mIHRoZSBlbGVtZW50IHRoYXQgaXMgZGlzbWlzc2luZyB0aGUgbW9kYWwuIEZvciBleGFtcGxlLCAnY2FuY2VsJyBvciAnYmFja2Ryb3AnLlxuICAgKi9cbiAgYXN5bmMgZGlzbWlzcyhkYXRhLCByb2xlKSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICh0aGlzLmdlc3R1cmVBbmltYXRpb25EaXNtaXNzaW5nICYmIHJvbGUgIT09IEdFU1RVUkUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgYSBjYW5EaXNtaXNzIGhhbmRsZXIgaXMgcmVzcG9uc2libGVcbiAgICAgKiBmb3IgY2FsbGluZyB0aGUgZGlzbWlzcyBtZXRob2QsIHdlIHNob3VsZFxuICAgICAqIG5vdCBydW4gdGhlIGNhbkRpc21pc3MgY2hlY2sgYWdhaW4uXG4gICAgICovXG4gICAgaWYgKHJvbGUgIT09ICdoYW5kbGVyJyAmJiAhKGF3YWl0IHRoaXMuY2hlY2tDYW5EaXNtaXNzKGRhdGEsIHJvbGUpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB7IHByZXNlbnRpbmdFbGVtZW50IH0gPSB0aGlzO1xuICAgIC8qKlxuICAgICAqIFdlIG5lZWQgdG8gc3RhcnQgdGhlIHN0YXR1cyBiYXIgY2hhbmdlXG4gICAgICogYmVmb3JlIHRoZSBhbmltYXRpb24gc28gdGhhdCB0aGUgY2hhbmdlXG4gICAgICogZmluaXNoZXMgd2hlbiB0aGUgZGlzbWlzcyBhbmltYXRpb24gZG9lcy5cbiAgICAgKi9cbiAgICBjb25zdCBoYXNDYXJkTW9kYWwgPSBwcmVzZW50aW5nRWxlbWVudCAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChoYXNDYXJkTW9kYWwgJiYgZ2V0SW9uTW9kZSh0aGlzKSA9PT0gJ2lvcycpIHtcbiAgICAgIHNldENhcmRTdGF0dXNCYXJEZWZhdWx0KHRoaXMuc3RhdHVzQmFyU3R5bGUpO1xuICAgIH1cbiAgICAvKiB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmUgKi9cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5rZXlib2FyZE9wZW5DYWxsYmFjaykge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoS0VZQk9BUkRfRElEX09QRU4sIHRoaXMua2V5Ym9hcmRPcGVuQ2FsbGJhY2spO1xuICAgICAgdGhpcy5rZXlib2FyZE9wZW5DYWxsYmFjayA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2hlbiB1c2luZyBhbiBpbmxpbmUgbW9kYWxcbiAgICAgKiBhbmQgcHJlc2VudGluZyBhIG1vZGFsIGl0IGlzIHBvc3NpYmxlIHRvXG4gICAgICogcXVpY2tseSBkaXNtaXNzIHRoZSBtb2RhbCB3aGlsZSBpdCBpc1xuICAgICAqIHByZXNlbnRpbmcuIFdlIG5lZWQgdG8gYXdhaXQgYW55IGN1cnJlbnRcbiAgICAgKiB0cmFuc2l0aW9uIHRvIGFsbG93IHRoZSBwcmVzZW50IHRvIGZpbmlzaFxuICAgICAqIGJlZm9yZSBkaXNtaXNzaW5nIGFnYWluLlxuICAgICAqL1xuICAgIGlmICh0aGlzLmN1cnJlbnRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGF3YWl0IHRoaXMuY3VycmVudFRyYW5zaXRpb247XG4gICAgfVxuICAgIGNvbnN0IGVudGVyaW5nQW5pbWF0aW9uID0gYWN0aXZlQW5pbWF0aW9ucy5nZXQodGhpcykgfHwgW107XG4gICAgdGhpcy5jdXJyZW50VHJhbnNpdGlvbiA9IGRpc21pc3ModGhpcywgZGF0YSwgcm9sZSwgJ21vZGFsTGVhdmUnLCBpb3NMZWF2ZUFuaW1hdGlvbiwgbWRMZWF2ZUFuaW1hdGlvbiwge1xuICAgICAgcHJlc2VudGluZ0VsOiBwcmVzZW50aW5nRWxlbWVudCxcbiAgICAgIGN1cnJlbnRCcmVha3BvaW50OiAoX2EgPSB0aGlzLmN1cnJlbnRCcmVha3BvaW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB0aGlzLmluaXRpYWxCcmVha3BvaW50LFxuICAgICAgYmFja2Ryb3BCcmVha3BvaW50OiB0aGlzLmJhY2tkcm9wQnJlYWtwb2ludCxcbiAgICB9KTtcbiAgICBjb25zdCBkaXNtaXNzZWQgPSBhd2FpdCB0aGlzLmN1cnJlbnRUcmFuc2l0aW9uO1xuICAgIGlmIChkaXNtaXNzZWQpIHtcbiAgICAgIGNvbnN0IHsgZGVsZWdhdGUgfSA9IHRoaXMuZ2V0RGVsZWdhdGUoKTtcbiAgICAgIGF3YWl0IGRldGFjaENvbXBvbmVudChkZWxlZ2F0ZSwgdGhpcy51c2Vyc0VsZW1lbnQpO1xuICAgICAgd3JpdGVUYXNrKCgpID0+IHRoaXMuZWwuY2xhc3NMaXN0LnJlbW92ZSgnc2hvdy1tb2RhbCcpKTtcbiAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbi5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICAgIHRoaXMuZ2VzdHVyZS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgICBlbnRlcmluZ0FuaW1hdGlvbi5mb3JFYWNoKChhbmkpID0+IGFuaS5kZXN0cm95KCkpO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRCcmVha3BvaW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY3VycmVudFRyYW5zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGRpc21pc3NlZDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBtb2RhbCBkaWQgZGlzbWlzcy5cbiAgICovXG4gIG9uRGlkRGlzbWlzcygpIHtcbiAgICByZXR1cm4gZXZlbnRNZXRob2QodGhpcy5lbCwgJ2lvbk1vZGFsRGlkRGlzbWlzcycpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIG1vZGFsIHdpbGwgZGlzbWlzcy5cbiAgICovXG4gIG9uV2lsbERpc21pc3MoKSB7XG4gICAgcmV0dXJuIGV2ZW50TWV0aG9kKHRoaXMuZWwsICdpb25Nb2RhbFdpbGxEaXNtaXNzJyk7XG4gIH1cbiAgLyoqXG4gICAqIE1vdmUgYSBzaGVldCBzdHlsZSBtb2RhbCB0byBhIHNwZWNpZmljIGJyZWFrcG9pbnQuIFRoZSBicmVha3BvaW50IHZhbHVlIG11c3RcbiAgICogYmUgYSB2YWx1ZSBkZWZpbmVkIGluIHlvdXIgYGJyZWFrcG9pbnRzYCBhcnJheS5cbiAgICovXG4gIGFzeW5jIHNldEN1cnJlbnRCcmVha3BvaW50KGJyZWFrcG9pbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNTaGVldE1vZGFsKSB7XG4gICAgICBwcmludElvbldhcm5pbmcoJ3NldEN1cnJlbnRCcmVha3BvaW50IGlzIG9ubHkgc3VwcG9ydGVkIG9uIHNoZWV0IG1vZGFscy4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmJyZWFrcG9pbnRzLmluY2x1ZGVzKGJyZWFrcG9pbnQpKSB7XG4gICAgICBwcmludElvbldhcm5pbmcoYEF0dGVtcHRlZCB0byBzZXQgaW52YWxpZCBicmVha3BvaW50IHZhbHVlICR7YnJlYWtwb2ludH0uIFBsZWFzZSBkb3VibGUgY2hlY2sgdGhhdCB0aGUgYnJlYWtwb2ludCB2YWx1ZSBpcyBwYXJ0IG9mIHlvdXIgZGVmaW5lZCBicmVha3BvaW50cy5gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyBjdXJyZW50QnJlYWtwb2ludCwgbW92ZVNoZWV0VG9CcmVha3BvaW50LCBjYW5EaXNtaXNzLCBicmVha3BvaW50cyB9ID0gdGhpcztcbiAgICBpZiAoY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG1vdmVTaGVldFRvQnJlYWtwb2ludCkge1xuICAgICAgdGhpcy5zaGVldFRyYW5zaXRpb24gPSBtb3ZlU2hlZXRUb0JyZWFrcG9pbnQoe1xuICAgICAgICBicmVha3BvaW50LFxuICAgICAgICBicmVha3BvaW50T2Zmc2V0OiAxIC0gY3VycmVudEJyZWFrcG9pbnQsXG4gICAgICAgIGNhbkRpc21pc3M6IGNhbkRpc21pc3MgIT09IHVuZGVmaW5lZCAmJiBjYW5EaXNtaXNzICE9PSB0cnVlICYmIGJyZWFrcG9pbnRzWzBdID09PSAwLFxuICAgICAgfSk7XG4gICAgICBhd2FpdCB0aGlzLnNoZWV0VHJhbnNpdGlvbjtcbiAgICAgIHRoaXMuc2hlZXRUcmFuc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBicmVha3BvaW50IG9mIGEgc2hlZXQgc3R5bGUgbW9kYWxcbiAgICovXG4gIGFzeW5jIGdldEN1cnJlbnRCcmVha3BvaW50KCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRCcmVha3BvaW50O1xuICB9XG4gIGFzeW5jIG1vdmVUb05leHRCcmVha3BvaW50KCkge1xuICAgIGNvbnN0IHsgYnJlYWtwb2ludHMsIGN1cnJlbnRCcmVha3BvaW50IH0gPSB0aGlzO1xuICAgIGlmICghYnJlYWtwb2ludHMgfHwgY3VycmVudEJyZWFrcG9pbnQgPT0gbnVsbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGUgbW9kYWwgZG9lcyBub3QgaGF2ZSBicmVha3BvaW50cyBhbmQvb3IgdGhlIGN1cnJlbnRcbiAgICAgICAqIGJyZWFrcG9pbnQgaXMgbm90IHNldCwgd2UgY2FuJ3QgbW92ZSB0byB0aGUgbmV4dCBicmVha3BvaW50LlxuICAgICAgICovXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IGFsbG93ZWRCcmVha3BvaW50cyA9IGJyZWFrcG9pbnRzLmZpbHRlcigoYikgPT4gYiAhPT0gMCk7XG4gICAgY29uc3QgY3VycmVudEJyZWFrcG9pbnRJbmRleCA9IGFsbG93ZWRCcmVha3BvaW50cy5pbmRleE9mKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICBjb25zdCBuZXh0QnJlYWtwb2ludEluZGV4ID0gKGN1cnJlbnRCcmVha3BvaW50SW5kZXggKyAxKSAlIGFsbG93ZWRCcmVha3BvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgbmV4dEJyZWFrcG9pbnQgPSBhbGxvd2VkQnJlYWtwb2ludHNbbmV4dEJyZWFrcG9pbnRJbmRleF07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCBicmVha3BvaW50IHRvIHRoZSBuZXh0IGF2YWlsYWJsZSBicmVha3BvaW50LlxuICAgICAqIElmIHRoZSBjdXJyZW50IGJyZWFrcG9pbnQgaXMgdGhlIGxhc3QgYnJlYWtwb2ludCwgd2Ugc2V0IHRoZSBjdXJyZW50XG4gICAgICogYnJlYWtwb2ludCB0byB0aGUgZmlyc3Qgbm9uLXplcm8gYnJlYWtwb2ludCB0byBhdm9pZCBkaXNtaXNzaW5nIHRoZSBzaGVldC5cbiAgICAgKi9cbiAgICBhd2FpdCB0aGlzLnNldEN1cnJlbnRCcmVha3BvaW50KG5leHRCcmVha3BvaW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBoYW5kbGUsIGlzU2hlZXRNb2RhbCwgcHJlc2VudGluZ0VsZW1lbnQsIGh0bWxBdHRyaWJ1dGVzLCBoYW5kbGVCZWhhdmlvciwgaW5oZXJpdGVkQXR0cmlidXRlcyB9ID0gdGhpcztcbiAgICBjb25zdCBzaG93SGFuZGxlID0gaGFuZGxlICE9PSBmYWxzZSAmJiBpc1NoZWV0TW9kYWw7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgeyBtb2RhbElkIH0gPSB0aGlzO1xuICAgIGNvbnN0IGlzQ2FyZE1vZGFsID0gcHJlc2VudGluZ0VsZW1lbnQgIT09IHVuZGVmaW5lZCAmJiBtb2RlID09PSAnaW9zJztcbiAgICBjb25zdCBpc0hhbmRsZUN5Y2xlID0gaGFuZGxlQmVoYXZpb3IgPT09ICdjeWNsZSc7XG4gICAgcmV0dXJuIChoKEhvc3QsIE9iamVjdC5hc3NpZ24oeyBcIm5vLXJvdXRlclwiOiB0cnVlLCB0YWJpbmRleDogXCItMVwiIH0sIGh0bWxBdHRyaWJ1dGVzLCB7IHN0eWxlOiB7XG4gICAgICAgIHpJbmRleDogYCR7MjAwMDAgKyB0aGlzLm92ZXJsYXlJbmRleH1gLFxuICAgICAgfSwgY2xhc3M6IE9iamVjdC5hc3NpZ24oeyBbbW9kZV06IHRydWUsIFsnbW9kYWwtZGVmYXVsdCddOiAhaXNDYXJkTW9kYWwgJiYgIWlzU2hlZXRNb2RhbCwgW2Btb2RhbC1jYXJkYF06IGlzQ2FyZE1vZGFsLCBbYG1vZGFsLXNoZWV0YF06IGlzU2hlZXRNb2RhbCwgJ292ZXJsYXktaGlkZGVuJzogdHJ1ZSB9LCBnZXRDbGFzc01hcCh0aGlzLmNzc0NsYXNzKSksIGlkOiBtb2RhbElkLCBvbklvbkJhY2tkcm9wVGFwOiB0aGlzLm9uQmFja2Ryb3BUYXAsIG9uSW9uTW9kYWxEaWRQcmVzZW50OiB0aGlzLm9uTGlmZWN5Y2xlLCBvbklvbk1vZGFsV2lsbFByZXNlbnQ6IHRoaXMub25MaWZlY3ljbGUsIG9uSW9uTW9kYWxXaWxsRGlzbWlzczogdGhpcy5vbkxpZmVjeWNsZSwgb25Jb25Nb2RhbERpZERpc21pc3M6IHRoaXMub25MaWZlY3ljbGUgfSksIGgoXCJpb24tYmFja2Ryb3BcIiwgeyByZWY6IChlbCkgPT4gKHRoaXMuYmFja2Ryb3BFbCA9IGVsKSwgdmlzaWJsZTogdGhpcy5zaG93QmFja2Ryb3AsIHRhcHBhYmxlOiB0aGlzLmJhY2tkcm9wRGlzbWlzcywgcGFydDogXCJiYWNrZHJvcFwiIH0pLCBtb2RlID09PSAnaW9zJyAmJiBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibW9kYWwtc2hhZG93XCIgfSksIGgoXCJkaXZcIiwgT2JqZWN0LmFzc2lnbih7XG4gICAgICAvKlxuICAgICAgICByb2xlIGFuZCBhcmlhLW1vZGFsIG11c3QgYmUgdXNlZCBvbiB0aGVcbiAgICAgICAgc2FtZSBlbGVtZW50LiBUaGV5IG11c3QgYWxzbyBiZSBzZXQgaW5zaWRlIHRoZVxuICAgICAgICBzaGFkb3cgRE9NIG90aGVyd2lzZSBpb24tYnV0dG9uIHdpbGwgbm90IGJlIGhpZ2hsaWdodGVkXG4gICAgICAgIHdoZW4gdXNpbmcgVm9pY2VPdmVyOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjQ3MTM0XG4gICAgICAqL1xuICAgICAgcm9sZTogXCJkaWFsb2dcIlxuICAgIH0sIGluaGVyaXRlZEF0dHJpYnV0ZXMsIHsgXCJhcmlhLW1vZGFsXCI6IFwidHJ1ZVwiLCBjbGFzczogXCJtb2RhbC13cmFwcGVyIGlvbi1vdmVybGF5LXdyYXBwZXJcIiwgcGFydDogXCJjb250ZW50XCIsIHJlZjogKGVsKSA9PiAodGhpcy53cmFwcGVyRWwgPSBlbCkgfSksIHNob3dIYW5kbGUgJiYgKGgoXCJidXR0b25cIiwgeyBjbGFzczogXCJtb2RhbC1oYW5kbGVcIixcbiAgICAgIC8vIFByZXZlbnRzIHRoZSBoYW5kbGUgZnJvbSByZWNlaXZpbmcga2V5Ym9hcmQgZm9jdXMgd2hlbiBpdCBkb2VzIG5vdCBjeWNsZVxuICAgICAgdGFiSW5kZXg6ICFpc0hhbmRsZUN5Y2xlID8gLTEgOiAwLCBcImFyaWEtbGFiZWxcIjogXCJBY3RpdmF0ZSB0byBhZGp1c3QgdGhlIHNpemUgb2YgdGhlIGRpYWxvZyBvdmVybGF5aW5nIHRoZSBzY3JlZW5cIiwgb25DbGljazogaXNIYW5kbGVDeWNsZSA/IHRoaXMub25IYW5kbGVDbGljayA6IHVuZGVmaW5lZCwgcGFydDogXCJoYW5kbGVcIiB9KSksIGgoXCJzbG90XCIsIG51bGwpKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcImlzT3BlblwiOiBbXCJvbklzT3BlbkNoYW5nZVwiXSxcbiAgICBcInRyaWdnZXJcIjogW1widHJpZ2dlckNoYW5nZWRcIl1cbiAgfTsgfVxufTtcbmNvbnN0IExJRkVDWUNMRV9NQVAgPSB7XG4gIGlvbk1vZGFsRGlkUHJlc2VudDogJ2lvblZpZXdEaWRFbnRlcicsXG4gIGlvbk1vZGFsV2lsbFByZXNlbnQ6ICdpb25WaWV3V2lsbEVudGVyJyxcbiAgaW9uTW9kYWxXaWxsRGlzbWlzczogJ2lvblZpZXdXaWxsTGVhdmUnLFxuICBpb25Nb2RhbERpZERpc21pc3M6ICdpb25WaWV3RGlkTGVhdmUnLFxufTtcbmxldCBtb2RhbElkcyA9IDA7XG5Nb2RhbC5zdHlsZSA9IHtcbiAgaW9zOiBtb2RhbElvc0NzcyxcbiAgbWQ6IG1vZGFsTWRDc3Ncbn07XG5cbmV4cG9ydCB7IE1vZGFsIGFzIGlvbl9tb2RhbCB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmNvbnN0IGhvc3RDb250ZXh0ID0gKHNlbGVjdG9yLCBlbCkgPT4ge1xuICByZXR1cm4gZWwuY2xvc2VzdChzZWxlY3RvcikgIT09IG51bGw7XG59O1xuLyoqXG4gKiBDcmVhdGUgdGhlIG1vZGUgYW5kIGNvbG9yIGNsYXNzZXMgZm9yIHRoZSBjb21wb25lbnQgYmFzZWQgb24gdGhlIGNsYXNzZXMgcGFzc2VkIGluXG4gKi9cbmNvbnN0IGNyZWF0ZUNvbG9yQ2xhc3NlcyA9IChjb2xvciwgY3NzQ2xhc3NNYXApID0+IHtcbiAgcmV0dXJuIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgY29sb3IubGVuZ3RoID4gMFxuICAgID8gT2JqZWN0LmFzc2lnbih7ICdpb24tY29sb3InOiB0cnVlLCBbYGlvbi1jb2xvci0ke2NvbG9yfWBdOiB0cnVlIH0sIGNzc0NsYXNzTWFwKSA6IGNzc0NsYXNzTWFwO1xufTtcbmNvbnN0IGdldENsYXNzTGlzdCA9IChjbGFzc2VzKSA9PiB7XG4gIGlmIChjbGFzc2VzICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCBhcnJheSA9IEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlcy5zcGxpdCgnICcpO1xuICAgIHJldHVybiBhcnJheVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPSBudWxsKVxuICAgICAgLm1hcCgoYykgPT4gYy50cmltKCkpXG4gICAgICAuZmlsdGVyKChjKSA9PiBjICE9PSAnJyk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcbmNvbnN0IGdldENsYXNzTWFwID0gKGNsYXNzZXMpID0+IHtcbiAgY29uc3QgbWFwID0ge307XG4gIGdldENsYXNzTGlzdChjbGFzc2VzKS5mb3JFYWNoKChjKSA9PiAobWFwW2NdID0gdHJ1ZSkpO1xuICByZXR1cm4gbWFwO1xufTtcbmNvbnN0IFNDSEVNRSA9IC9eW2Etel1bYS16MC05K1xcLS5dKjovO1xuY29uc3Qgb3BlblVSTCA9IGFzeW5jICh1cmwsIGV2LCBkaXJlY3Rpb24sIGFuaW1hdGlvbikgPT4ge1xuICBpZiAodXJsICE9IG51bGwgJiYgdXJsWzBdICE9PSAnIycgJiYgIVNDSEVNRS50ZXN0KHVybCkpIHtcbiAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgaWYgKHJvdXRlcikge1xuICAgICAgaWYgKGV2ICE9IG51bGwpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByb3V0ZXIucHVzaCh1cmwsIGRpcmVjdGlvbiwgYW5pbWF0aW9uKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IHsgY3JlYXRlQ29sb3JDbGFzc2VzIGFzIGMsIGdldENsYXNzTWFwIGFzIGcsIGhvc3RDb250ZXh0IGFzIGgsIG9wZW5VUkwgYXMgbyB9O1xuIl0sIm5hbWVzIjpbInIiLCJyZWdpc3Rlckluc3RhbmNlIiwiZCIsImNyZWF0ZUV2ZW50IiwidyIsIndyaXRlVGFzayIsImgiLCJIIiwiSG9zdCIsImYiLCJnZXRFbGVtZW50IiwiYiIsImdldElvbk1vZGUiLCJjIiwiY29uZmlnIiwiZmluZENsb3Nlc3RJb25Db250ZW50IiwiaSIsImlzSW9uQ29udGVudCIsImRpc2FibGVDb250ZW50U2Nyb2xsWSIsInJlc2V0Q29udGVudFNjcm9sbFkiLCJhIiwiZmluZElvbkNvbnRlbnQiLCJwIiwicHJpbnRJb25Db250ZW50RXJyb3JNc2ciLCJDIiwiQ29yZURlbGVnYXRlIiwiYXR0YWNoQ29tcG9uZW50IiwiZGV0YWNoQ29tcG9uZW50IiwiZyIsImdldEVsZW1lbnRSb290IiwibCIsImNsYW1wIiwicmFmIiwiaiIsImluaGVyaXRBdHRyaWJ1dGVzIiwibSIsImhhc0xhenlCdWlsZCIsIktFWUJPQVJEX0RJRF9PUEVOIiwicHJpbnRJb25XYXJuaW5nIiwid2luIiwiRyIsIkdFU1RVUkUiLCJlIiwiY3JlYXRlVHJpZ2dlckNvbnRyb2xsZXIiLCJCIiwiQkFDS0RST1AiLCJwcmVwYXJlT3ZlcmxheSIsInByZXNlbnQiLCJrIiwiYWN0aXZlQW5pbWF0aW9ucyIsImRpc21pc3MiLCJldmVudE1ldGhvZCIsImdldENsYXNzTWFwIiwiZGVlcFJlYWR5IiwiY3JlYXRlQW5pbWF0aW9uIiwiZ2V0VGltZUdpdmVuUHJvZ3Jlc3Npb24iLCJjcmVhdGVHZXN0dXJlIiwiU3R5bGUiLCJTdGF0dXNCYXIiLCJnZXRFbmdpbmUiLCJfYSIsIkNhcGFjaXRvciIsImlzUGx1Z2luQXZhaWxhYmxlIiwiUGx1Z2lucyIsInN1cHBvcnRzRGVmYXVsdFN0YXR1c0JhclN0eWxlIiwiUGx1Z2luSGVhZGVycyIsInNldFN0eWxlIiwib3B0aW9ucyIsImVuZ2luZSIsImdldFN0eWxlIiwiX3JlZiIsIl9hc3luY1RvR2VuZXJhdG9yIiwiRGVmYXVsdCIsInN0eWxlIiwiZ2V0SW5mbyIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ2V0QmFja2Ryb3BWYWx1ZUZvclNoZWV0IiwieCIsImJhY2tkcm9wQnJlYWtwb2ludCIsInNsb3BlIiwic2V0Q2FyZFN0YXR1c0JhckRhcmsiLCJpbm5lcldpZHRoIiwiRGFyayIsInNldENhcmRTdGF0dXNCYXJEZWZhdWx0IiwiZGVmYXVsdFN0eWxlIiwiaGFuZGxlQ2FuRGlzbWlzcyIsIl9yZWYyIiwiZWwiLCJhbmltYXRpb24iLCJjYW5EaXNtaXNzIiwic2hvdWxkRGlzbWlzcyIsInVuZGVmaW5lZCIsImlzUnVubmluZyIsIm9uRmluaXNoIiwib25lVGltZUNhbGxiYWNrIiwiX3giLCJfeDIiLCJjYWxjdWxhdGVTcHJpbmdTdGVwIiwidCIsIlN3aXBlVG9DbG9zZURlZmF1bHRzIiwiTUlOX1BSRVNFTlRJTkdfU0NBTEUiLCJjcmVhdGVTd2lwZVRvQ2xvc2VHZXN0dXJlIiwic3RhdHVzQmFyU3R5bGUiLCJvbkRpc21pc3MiLCJESVNNSVNTX1RIUkVTSE9MRCIsImhlaWdodCIsIm9mZnNldEhlaWdodCIsImlzT3BlbiIsImNhbkRpc21pc3NCbG9ja3NHZXN0dXJlIiwiY29udGVudEVsIiwic2Nyb2xsRWwiLCJjYW5EaXNtaXNzTWF4U3RlcCIsImluaXRpYWxTY3JvbGxZIiwibGFzdFN0ZXAiLCJnZXRTY3JvbGxZIiwic2Nyb2xsWSIsImNhblN0YXJ0IiwiZGV0YWlsIiwidGFyZ2V0IiwiZXZlbnQiLCJjbG9zZXN0Iiwicm9vdCIsInF1ZXJ5U2VsZWN0b3IiLCJoYXNSZWZyZXNoZXJJbkNvbnRlbnQiLCJzY3JvbGxUb3AiLCJmb290ZXIiLCJvblN0YXJ0IiwiZGVsdGFZIiwicHJvZ3Jlc3NTdGFydCIsIm9uTW92ZSIsInN0ZXAiLCJpc0F0dGVtcHRpbmdEaXNtaXNzV2l0aENhbkRpc21pc3MiLCJtYXhTdGVwIiwicHJvY2Vzc2VkU3RlcCIsImNsYW1wZWRTdGVwIiwicHJvZ3Jlc3NTdGVwIiwib25FbmQiLCJ2ZWxvY2l0eSIsInZlbG9jaXR5WSIsInRocmVzaG9sZCIsInNob3VsZENvbXBsZXRlIiwibmV3U3RlcFZhbHVlIiwiZWFzaW5nIiwiZHVyYXRpb24iLCJjb21wdXRlRHVyYXRpb24iLCJnZXN0dXJlIiwiZW5hYmxlIiwicHJvZ3Jlc3NFbmQiLCJnZXN0dXJlTmFtZSIsImdlc3R1cmVQcmlvcml0eSIsImRpcmVjdGlvbiIsInJlbWFpbmluZyIsIk1hdGgiLCJhYnMiLCJjcmVhdGVTaGVldEVudGVyQW5pbWF0aW9uIiwib3B0cyIsImN1cnJlbnRCcmVha3BvaW50Iiwic2hvdWxkU2hvd0JhY2tkcm9wIiwiaW5pdGlhbEJhY2tkcm9wIiwiYmFja2Ryb3BBbmltYXRpb24iLCJmcm9tVG8iLCJiZWZvcmVTdHlsZXMiLCJhZnRlckNsZWFyU3R5bGVzIiwid3JhcHBlckFuaW1hdGlvbiIsImtleWZyYW1lcyIsIm9mZnNldCIsIm9wYWNpdHkiLCJ0cmFuc2Zvcm0iLCJjcmVhdGVTaGVldExlYXZlQW5pbWF0aW9uIiwiYmFja2Ryb3BWYWx1ZSIsImRlZmF1bHRCYWNrZHJvcCIsImN1c3RvbUJhY2tkcm9wIiwiY3JlYXRlRW50ZXJBbmltYXRpb24kMSIsImlvc0VudGVyQW5pbWF0aW9uIiwiYmFzZUVsIiwicHJlc2VudGluZ0VsIiwiYWRkRWxlbWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJiYXNlQW5pbWF0aW9uIiwiYWRkQW5pbWF0aW9uIiwiaXNNb2JpbGUiLCJ3aW5kb3ciLCJoYXNDYXJkTW9kYWwiLCJ0YWdOYW1lIiwicHJlc2VudGluZ0VsZW1lbnQiLCJwcmVzZW50aW5nRWxSb290IiwicHJlc2VudGluZ0FuaW1hdGlvbiIsIm92ZXJmbG93IiwiYm9keUVsIiwiZG9jdW1lbnQiLCJib2R5IiwidHJhbnNmb3JtT2Zmc2V0IiwiQ1NTIiwic3VwcG9ydHMiLCJtb2RhbFRyYW5zZm9ybSIsInRvUHJlc2VudGluZ1NjYWxlIiwiZmluYWxUcmFuc2Zvcm0iLCJhZnRlclN0eWxlcyIsImJlZm9yZUFkZFdyaXRlIiwic2V0UHJvcGVydHkiLCJmaWx0ZXIiLCJib3JkZXJSYWRpdXMiLCJzaGFkb3dBbmltYXRpb24iLCJjcmVhdGVMZWF2ZUFuaW1hdGlvbiQxIiwiaW9zTGVhdmVBbmltYXRpb24iLCJiZWZvcmVDbGVhclN0eWxlcyIsImN1cnJlbnRTdGVwIiwibnVtTW9kYWxzIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwiY3JlYXRlRW50ZXJBbmltYXRpb24iLCJtZEVudGVyQW5pbWF0aW9uIiwiY3JlYXRlTGVhdmVBbmltYXRpb24iLCJtZExlYXZlQW5pbWF0aW9uIiwiY3JlYXRlU2hlZXRHZXN0dXJlIiwiYmFja2Ryb3BFbCIsIndyYXBwZXJFbCIsImluaXRpYWxCcmVha3BvaW50IiwiYnJlYWtwb2ludHMiLCJnZXRDdXJyZW50QnJlYWtwb2ludCIsIm9uQnJlYWtwb2ludENoYW5nZSIsIlNoZWV0RGVmYXVsdHMiLCJXUkFQUEVSX0tFWUZSQU1FUyIsIkJBQ0tEUk9QX0tFWUZSQU1FUyIsImNsaWVudEhlaWdodCIsImNoaWxkQW5pbWF0aW9ucyIsImZpbmQiLCJhbmkiLCJpZCIsIm1heEJyZWFrcG9pbnQiLCJtaW5CcmVha3BvaW50IiwiZW5hYmxlQmFja2Ryb3AiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJkaXNhYmxlQmFja2Ryb3AiLCJhZGQiLCJzaG91bGRFbmFibGVCYWNrZHJvcCIsImNvbnRlbnQiLCJmb2N1cyIsImluaXRpYWxTdGVwIiwic2Vjb25kVG9MYXN0QnJlYWtwb2ludCIsImRpZmYiLCJyZWR1Y2UiLCJtb3ZlU2hlZXRUb0JyZWFrcG9pbnQiLCJicmVha3BvaW50IiwiYnJlYWtwb2ludE9mZnNldCIsInNob3VsZFByZXZlbnREaXNtaXNzIiwic25hcFRvQnJlYWtwb2ludCIsInNob3VsZFJlbWFpbk9wZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vZGFsSW9zQ3NzIiwibW9kYWxNZENzcyIsIk1vZGFsIiwiY29uc3RydWN0b3IiLCJob3N0UmVmIiwiZGlkUHJlc2VudCIsIndpbGxQcmVzZW50Iiwid2lsbERpc21pc3MiLCJkaWREaXNtaXNzIiwiaW9uQnJlYWtwb2ludERpZENoYW5nZSIsImRpZFByZXNlbnRTaG9ydGhhbmQiLCJ3aWxsUHJlc2VudFNob3J0aGFuZCIsIndpbGxEaXNtaXNzU2hvcnRoYW5kIiwiZGlkRGlzbWlzc1Nob3J0aGFuZCIsInRyaWdnZXJDb250cm9sbGVyIiwibW9kYWxJbmRleCIsIm1vZGFsSWRzIiwiY29yZURlbGVnYXRlIiwiaXNTaGVldE1vZGFsIiwiaW5oZXJpdGVkQXR0cmlidXRlcyIsImlubGluZSIsImdlc3R1cmVBbmltYXRpb25EaXNtaXNzaW5nIiwib25IYW5kbGVDbGljayIsInNoZWV0VHJhbnNpdGlvbiIsImhhbmRsZUJlaGF2aW9yIiwibW92ZVRvTmV4dEJyZWFrcG9pbnQiLCJvbkJhY2tkcm9wVGFwIiwib25MaWZlY3ljbGUiLCJtb2RhbEV2ZW50IiwidXNlcnNFbGVtZW50IiwibmFtZSIsIkxJRkVDWUNMRV9NQVAiLCJ0eXBlIiwiZXYiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGlzcGF0Y2hFdmVudCIsInByZXNlbnRlZCIsImhhc0NvbnRyb2xsZXIiLCJvdmVybGF5SW5kZXgiLCJkZWxlZ2F0ZSIsImtleWJvYXJkQ2xvc2UiLCJlbnRlckFuaW1hdGlvbiIsImxlYXZlQW5pbWF0aW9uIiwiaGFuZGxlIiwiY29tcG9uZW50IiwiY29tcG9uZW50UHJvcHMiLCJjc3NDbGFzcyIsImJhY2tkcm9wRGlzbWlzcyIsInNob3dCYWNrZHJvcCIsImFuaW1hdGVkIiwiaHRtbEF0dHJpYnV0ZXMiLCJ0cmlnZ2VyIiwia2VlcENvbnRlbnRzTW91bnRlZCIsIm9uSXNPcGVuQ2hhbmdlIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsInRyaWdnZXJDaGFuZ2VkIiwiYWRkQ2xpY2tMaXN0ZW5lciIsImJyZWFrcG9pbnRzQ2hhbmdlZCIsInNvcnRlZEJyZWFrcG9pbnRzIiwic29ydCIsImNvbm5lY3RlZENhbGxiYWNrIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJyZW1vdmVDbGlja0xpc3RlbmVyIiwiY29tcG9uZW50V2lsbExvYWQiLCJtb2RhbElkIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiaW5jbHVkZXMiLCJjb21wb25lbnREaWRMb2FkIiwiZ2V0RGVsZWdhdGUiLCJmb3JjZSIsIndvcmtpbmdEZWxlZ2F0ZSIsInBhcmVudEVsIiwicGFyZW50Tm9kZSIsImNoZWNrQ2FuRGlzbWlzcyIsImRhdGEiLCJyb2xlIiwiX3RoaXMiLCJfdGhpczIiLCJjdXJyZW50VHJhbnNpdGlvbiIsImtleWJvYXJkT3BlbkNhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsImluaXRTaGVldEdlc3R1cmUiLCJpbml0U3dpcGVUb0Nsb3NlIiwiX3RoaXMzIiwiYW5pbWF0aW9uQnVpbGRlciIsImdldCIsInNoZWV0T25EaXNtaXNzIiwiZW1pdCIsIl90aGlzNCIsIl90aGlzNSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbnRlcmluZ0FuaW1hdGlvbiIsImRpc21pc3NlZCIsImRlc3Ryb3kiLCJmb3JFYWNoIiwib25EaWREaXNtaXNzIiwib25XaWxsRGlzbWlzcyIsInNldEN1cnJlbnRCcmVha3BvaW50IiwiX3RoaXM2IiwiX3RoaXM3IiwiX3RoaXM4IiwiYWxsb3dlZEJyZWFrcG9pbnRzIiwiY3VycmVudEJyZWFrcG9pbnRJbmRleCIsImluZGV4T2YiLCJuZXh0QnJlYWtwb2ludEluZGV4IiwibmV4dEJyZWFrcG9pbnQiLCJyZW5kZXIiLCJzaG93SGFuZGxlIiwibW9kZSIsImlzQ2FyZE1vZGFsIiwiaXNIYW5kbGVDeWNsZSIsIk9iamVjdCIsImFzc2lnbiIsInRhYmluZGV4IiwiekluZGV4IiwiY2xhc3MiLCJvbklvbkJhY2tkcm9wVGFwIiwib25Jb25Nb2RhbERpZFByZXNlbnQiLCJvbklvbk1vZGFsV2lsbFByZXNlbnQiLCJvbklvbk1vZGFsV2lsbERpc21pc3MiLCJvbklvbk1vZGFsRGlkRGlzbWlzcyIsInJlZiIsInZpc2libGUiLCJ0YXBwYWJsZSIsInBhcnQiLCJ0YWJJbmRleCIsIm9uQ2xpY2siLCJ3YXRjaGVycyIsImlvbk1vZGFsRGlkUHJlc2VudCIsImlvbk1vZGFsV2lsbFByZXNlbnQiLCJpb25Nb2RhbFdpbGxEaXNtaXNzIiwiaW9uTW9kYWxEaWREaXNtaXNzIiwiaW9zIiwibWQiLCJpb25fbW9kYWwiLCJob3N0Q29udGV4dCIsInNlbGVjdG9yIiwiY3JlYXRlQ29sb3JDbGFzc2VzIiwiY29sb3IiLCJjc3NDbGFzc01hcCIsImdldENsYXNzTGlzdCIsImNsYXNzZXMiLCJhcnJheSIsImlzQXJyYXkiLCJzcGxpdCIsIm1hcCIsInRyaW0iLCJTQ0hFTUUiLCJvcGVuVVJMIiwidXJsIiwidGVzdCIsInJvdXRlciIsInByZXZlbnREZWZhdWx0IiwicHVzaCIsIl94MyIsIl94NCIsIm8iXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMV19