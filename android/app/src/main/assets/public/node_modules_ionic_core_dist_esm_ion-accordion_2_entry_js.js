"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-accordion_2_entry_js"],{

/***/ 79:
/*!********************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-accordion_2.entry.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_accordion": () => (/* binding */ Accordion),
/* harmony export */   "ion_accordion_group": () => (/* binding */ AccordionGroup)
/* harmony export */ });
/* harmony import */ var _Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 1670);
/* harmony import */ var _index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-be218d70.js */ 9866);
/* harmony import */ var _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index-393bc14a.js */ 8697);
/* harmony import */ var _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ionic-global-3b28a225.js */ 3053);
/* harmony import */ var _helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers-5eb6364d.js */ 9364);
/* harmony import */ var _index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-e86f0117.js */ 7584);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */





const accordionIosCss = ":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}";
const accordionMdCss = ":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-expanding) #content-wrapper{overflow:auto}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}";
const Accordion = class {
  constructor(hostRef) {
    var _this = this;
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.updateListener = () => this.updateState(false);
    this.setItemDefaults = () => {
      const ionItem = this.getSlottedHeaderIonItem();
      if (!ionItem) {
        return;
      }
      /**
       * For a11y purposes, we make
       * the ion-item a button so users
       * can tab to it and use keyboard
       * navigation to get around.
       */
      ionItem.button = true;
      ionItem.detail = false;
      /**
       * By default, the lines in an
       * item should be full here, but
       * only do that if a user has
       * not explicitly overridden them
       */
      if (ionItem.lines === undefined) {
        ionItem.lines = 'full';
      }
    };
    this.getSlottedHeaderIonItem = () => {
      const {
        headerEl
      } = this;
      if (!headerEl) {
        return;
      }
      /**
       * Get the first ion-item
       * slotted in the header slot
       */
      const slot = headerEl.querySelector('slot');
      if (!slot) {
        return;
      }
      // This is not defined in unit tests
      if (slot.assignedElements === undefined) return;
      return slot.assignedElements().find(el => el.tagName === 'ION-ITEM');
    };
    this.setAria = (expanded = false) => {
      const ionItem = this.getSlottedHeaderIonItem();
      if (!ionItem) {
        return;
      }
      /**
       * Get the native <button> element inside of
       * ion-item because that is what will be focused
       */
      const root = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.g)(ionItem);
      const button = root.querySelector('button');
      if (!button) {
        return;
      }
      button.setAttribute('aria-expanded', `${expanded}`);
    };
    this.slotToggleIcon = () => {
      const ionItem = this.getSlottedHeaderIonItem();
      if (!ionItem) {
        return;
      }
      const {
        toggleIconSlot,
        toggleIcon
      } = this;
      /**
       * Check if there already is a toggle icon.
       * If so, do not add another one.
       */
      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');
      if (existingToggleIcon) {
        return;
      }
      const iconEl = document.createElement('ion-icon');
      iconEl.slot = toggleIconSlot;
      iconEl.lazy = false;
      iconEl.classList.add('ion-accordion-toggle-icon');
      iconEl.icon = toggleIcon;
      iconEl.setAttribute('aria-hidden', 'true');
      ionItem.appendChild(iconEl);
    };
    this.expandAccordion = (initialUpdate = false) => {
      const {
        contentEl,
        contentElWrapper
      } = this;
      if (initialUpdate || contentEl === undefined || contentElWrapper === undefined) {
        this.state = 4 /* AccordionState.Expanded */;
        return;
      }
      if (this.state === 4 /* AccordionState.Expanded */) {
        return;
      }
      if (this.currentRaf !== undefined) {
        cancelAnimationFrame(this.currentRaf);
      }
      if (this.shouldAnimate()) {
        (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)(() => {
          this.state = 8 /* AccordionState.Expanding */;
          this.currentRaf = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)( /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
            const contentHeight = contentElWrapper.offsetHeight;
            const waitForTransition = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.t)(contentEl, 2000);
            contentEl.style.setProperty('max-height', `${contentHeight}px`);
            yield waitForTransition;
            _this.state = 4 /* AccordionState.Expanded */;
            contentEl.style.removeProperty('max-height');
          }));
        });
      } else {
        this.state = 4 /* AccordionState.Expanded */;
      }
    };

    this.collapseAccordion = (initialUpdate = false) => {
      const {
        contentEl
      } = this;
      if (initialUpdate || contentEl === undefined) {
        this.state = 1 /* AccordionState.Collapsed */;
        return;
      }
      if (this.state === 1 /* AccordionState.Collapsed */) {
        return;
      }
      if (this.currentRaf !== undefined) {
        cancelAnimationFrame(this.currentRaf);
      }
      if (this.shouldAnimate()) {
        this.currentRaf = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)( /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
          const contentHeight = contentEl.offsetHeight;
          contentEl.style.setProperty('max-height', `${contentHeight}px`);
          (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)( /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
            const waitForTransition = (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.t)(contentEl, 2000);
            _this.state = 2 /* AccordionState.Collapsing */;
            yield waitForTransition;
            _this.state = 1 /* AccordionState.Collapsed */;
            contentEl.style.removeProperty('max-height');
          }));
        }));
      } else {
        this.state = 1 /* AccordionState.Collapsed */;
      }
    };
    /**
     * Helper function to determine if
     * something should animate.
     * If prefers-reduced-motion is set
     * then we should not animate, regardless
     * of what is set in the config.
     */
    this.shouldAnimate = () => {
      if (typeof window === 'undefined') {
        return false;
      }
      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;
      if (prefersReducedMotion) {
        return false;
      }
      const animated = _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_3__.c.get('animated', true);
      if (!animated) {
        return false;
      }
      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {
        return false;
      }
      return true;
    };
    this.updateState = /*#__PURE__*/(0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (initialUpdate = false) {
      const accordionGroup = _this.accordionGroupEl;
      const accordionValue = _this.value;
      if (!accordionGroup) {
        return;
      }
      const value = accordionGroup.value;
      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;
      if (shouldExpand) {
        _this.expandAccordion(initialUpdate);
        _this.isNext = _this.isPrevious = false;
      } else {
        _this.collapseAccordion(initialUpdate);
        /**
         * When using popout or inset,
         * the collapsed accordion items
         * may need additional border radius
         * applied. Check to see if the
         * next or previous accordion is selected.
         */
        const nextAccordion = _this.getNextSibling();
        const nextAccordionValue = nextAccordion === null || nextAccordion === void 0 ? void 0 : nextAccordion.value;
        if (nextAccordionValue !== undefined) {
          _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;
        }
        const previousAccordion = _this.getPreviousSibling();
        const previousAccordionValue = previousAccordion === null || previousAccordion === void 0 ? void 0 : previousAccordion.value;
        if (previousAccordionValue !== undefined) {
          _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;
        }
      }
    });
    this.getNextSibling = () => {
      if (!this.el) {
        return;
      }
      const nextSibling = this.el.nextElementSibling;
      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {
        return;
      }
      return nextSibling;
    };
    this.getPreviousSibling = () => {
      if (!this.el) {
        return;
      }
      const previousSibling = this.el.previousElementSibling;
      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {
        return;
      }
      return previousSibling;
    };
    this.state = 1 /* AccordionState.Collapsed */;
    this.isNext = false;
    this.isPrevious = false;
    this.value = `ion-accordion-${accordionIds++}`;
    this.disabled = false;
    this.readonly = false;
    this.toggleIcon = _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_2__.l;
    this.toggleIconSlot = 'end';
  }
  connectedCallback() {
    var _a;
    const accordionGroupEl = this.accordionGroupEl = (_a = this.el) === null || _a === void 0 ? void 0 : _a.closest('ion-accordion-group');
    if (accordionGroupEl) {
      this.updateState(true);
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.a)(accordionGroupEl, 'ionValueChange', this.updateListener);
    }
  }
  disconnectedCallback() {
    const accordionGroupEl = this.accordionGroupEl;
    if (accordionGroupEl) {
      (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.b)(accordionGroupEl, 'ionValueChange', this.updateListener);
    }
  }
  componentDidLoad() {
    this.setItemDefaults();
    this.slotToggleIcon();
    /**
     * We need to wait a tick because we
     * just set ionItem.button = true and
     * the button has not have been rendered yet.
     */
    (0,_helpers_5eb6364d_js__WEBPACK_IMPORTED_MODULE_4__.r)(() => {
      /**
       * Set aria label on button inside of ion-item
       * once the inner content has been rendered.
       */
      const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;
      this.setAria(expanded);
    });
  }
  toggleExpanded() {
    const {
      accordionGroupEl,
      value,
      state
    } = this;
    if (accordionGroupEl) {
      /**
       * Because the accordion group may or may
       * not allow multiple accordions open, we
       * need to request the toggling of this
       * accordion and the accordion group will
       * make the decision on whether or not
       * to allow it.
       */
      const expand = state === 1 /* AccordionState.Collapsed */ || state === 2 /* AccordionState.Collapsing */;
      accordionGroupEl.requestAccordionToggle(value, expand);
    }
  }
  render() {
    const {
      disabled,
      readonly
    } = this;
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_3__.b)(this);
    const expanded = this.state === 4 /* AccordionState.Expanded */ || this.state === 8 /* AccordionState.Expanding */;
    const headerPart = expanded ? 'header expanded' : 'header';
    const contentPart = expanded ? 'content expanded' : 'content';
    this.setAria(expanded);
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        'accordion-expanding': this.state === 8 /* AccordionState.Expanding */,
        'accordion-expanded': this.state === 4 /* AccordionState.Expanded */,
        'accordion-collapsing': this.state === 2 /* AccordionState.Collapsing */,
        'accordion-collapsed': this.state === 1 /* AccordionState.Collapsed */,
        'accordion-next': this.isNext,
        'accordion-previous': this.isPrevious,
        'accordion-disabled': disabled,
        'accordion-readonly': readonly,
        'accordion-animated': _ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_3__.c.getBoolean('animated', true)
      }
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      onClick: () => this.toggleExpanded(),
      id: "header",
      part: headerPart,
      "aria-controls": "content",
      ref: headerEl => this.headerEl = headerEl
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "header"
    })), (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      id: "content",
      part: contentPart,
      role: "region",
      "aria-labelledby": "header",
      ref: contentEl => this.contentEl = contentEl
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      id: "content-wrapper",
      ref: contentElWrapper => this.contentElWrapper = contentElWrapper
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "content"
    }))));
  }
  static get delegatesFocus() {
    return true;
  }
  get el() {
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
let accordionIds = 0;
Accordion.style = {
  ios: accordionIosCss,
  md: accordionMdCss
};
const accordionGroupIosCss = ":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}";
const accordionGroupMdCss = ":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}";
const AccordionGroup = class {
  constructor(hostRef) {
    (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionChange = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionChange", 7);
    this.ionValueChange = (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionValueChange", 7);
    this.animated = true;
    this.multiple = undefined;
    this.value = undefined;
    this.disabled = false;
    this.readonly = false;
    this.expand = 'compact';
  }
  valueChanged() {
    const {
      value,
      multiple
    } = this;
    if (!multiple && Array.isArray(value)) {
      /**
       * We do some processing on the `value` array so
       * that it looks more like an array when logged to
       * the console.
       * Example given ['a', 'b']
       * Default toString() behavior: a,b
       * Custom behavior: ['a', 'b']
       */
      (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__.p)(`ion-accordion-group was passed an array of values, but multiple="false". This is incorrect usage and may result in unexpected behaviors. To dismiss this warning, pass a string to the "value" property when multiple="false".

  Value Passed: [${value.map(v => `'${v}'`).join(', ')}]
`, this.el);
    }
    /**
     * Do not use `value` here as that will be
     * not account for the adjustment we make above.
     */
    this.ionValueChange.emit({
      value: this.value
    });
  }
  disabledChanged() {
    var _this2 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        disabled
      } = _this2;
      const accordions = yield _this2.getAccordions();
      for (const accordion of accordions) {
        accordion.disabled = disabled;
      }
    })();
  }
  readonlyChanged() {
    var _this3 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        readonly
      } = _this3;
      const accordions = yield _this3.getAccordions();
      for (const accordion of accordions) {
        accordion.readonly = readonly;
      }
    })();
  }
  onKeydown(ev) {
    var _this4 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const activeElement = document.activeElement;
      if (!activeElement) {
        return;
      }
      /**
       * Make sure focus is in the header, not the body, of the accordion. This ensures
       * that if there are any interactable elements in the body, their keyboard
       * interaction doesn't get stolen by the accordion. Example: using up/down keys
       * in ion-textarea.
       */
      const activeAccordionHeader = activeElement.closest('ion-accordion [slot="header"]');
      if (!activeAccordionHeader) {
        return;
      }
      const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');
      if (!accordionEl) {
        return;
      }
      const closestGroup = accordionEl.closest('ion-accordion-group');
      if (closestGroup !== _this4.el) {
        return;
      }
      // If the active accordion is not in the current array of accordions, do not do anything
      const accordions = yield _this4.getAccordions();
      const startingIndex = accordions.findIndex(a => a === accordionEl);
      if (startingIndex === -1) {
        return;
      }
      let accordion;
      if (ev.key === 'ArrowDown') {
        accordion = _this4.findNextAccordion(accordions, startingIndex);
      } else if (ev.key === 'ArrowUp') {
        accordion = _this4.findPreviousAccordion(accordions, startingIndex);
      } else if (ev.key === 'Home') {
        accordion = accordions[0];
      } else if (ev.key === 'End') {
        accordion = accordions[accordions.length - 1];
      }
      if (accordion !== undefined && accordion !== activeElement) {
        accordion.focus();
      }
    })();
  }
  componentDidLoad() {
    var _this5 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this5.disabled) {
        _this5.disabledChanged();
      }
      if (_this5.readonly) {
        _this5.readonlyChanged();
      }
    })();
  }
  /**
   * Sets the value property and emits ionChange.
   * This should only be called when the user interacts
   * with the accordion and not for any update
   * to the value property. The exception is when
   * the app sets the value of a single-select
   * accordion group to an array.
   */
  setValue(accordionValue) {
    const value = this.value = accordionValue;
    this.ionChange.emit({
      value
    });
  }
  /**
   * This method is used to ensure that the value
   * of ion-accordion-group is being set in a valid
   * way. This method should only be called in
   * response to a user generated action.
   * @internal
   */
  requestAccordionToggle(accordionValue, accordionExpand) {
    var _this6 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        multiple,
        value,
        readonly,
        disabled
      } = _this6;
      if (readonly || disabled) {
        return;
      }
      if (accordionExpand) {
        /**
         * If group accepts multiple values
         * check to see if value is already in
         * in values array. If not, add it
         * to the array.
         */
        if (multiple) {
          const groupValue = value !== null && value !== void 0 ? value : [];
          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];
          const valueExists = processedValue.find(v => v === accordionValue);
          if (valueExists === undefined && accordionValue !== undefined) {
            _this6.setValue([...processedValue, accordionValue]);
          }
        } else {
          _this6.setValue(accordionValue);
        }
      } else {
        /**
         * If collapsing accordion, either filter the value
         * out of the values array or unset the value.
         */
        if (multiple) {
          const groupValue = value !== null && value !== void 0 ? value : [];
          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];
          _this6.setValue(processedValue.filter(v => v !== accordionValue));
        } else {
          _this6.setValue(undefined);
        }
      }
    })();
  }
  findNextAccordion(accordions, startingIndex) {
    const nextAccordion = accordions[startingIndex + 1];
    if (nextAccordion === undefined) {
      return accordions[0];
    }
    return nextAccordion;
  }
  findPreviousAccordion(accordions, startingIndex) {
    const prevAccordion = accordions[startingIndex - 1];
    if (prevAccordion === undefined) {
      return accordions[accordions.length - 1];
    }
    return prevAccordion;
  }
  /**
   * @internal
   */
  getAccordions() {
    var _this7 = this;
    return (0,_Users_ohrionmartin_dev_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return Array.from(_this7.el.querySelectorAll(':scope > ion-accordion'));
    })();
  }
  render() {
    const {
      disabled,
      readonly,
      expand
    } = this;
    const mode = (0,_ionic_global_3b28a225_js__WEBPACK_IMPORTED_MODULE_3__.b)(this);
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: {
        [mode]: true,
        'accordion-group-disabled': disabled,
        'accordion-group-readonly': readonly,
        [`accordion-group-expand-${expand}`]: true
      },
      role: "presentation"
    }, (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }
  get el() {
    return (0,_index_be218d70_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "value": ["valueChanged"],
      "disabled": ["disabledChanged"],
      "readonly": ["readonlyChanged"]
    };
  }
};
AccordionGroup.style = {
  ios: accordionGroupIosCss,
  md: accordionGroupMdCss
};


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLWFjY29yZGlvbl8yX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUM2RztBQUN0RDtBQUNtQjtBQUNzRTtBQUNyRjtBQUUzRCxNQUFNeUIsZUFBZSxHQUFHLHF4Q0FBcXhDO0FBRTd5QyxNQUFNQyxjQUFjLEdBQUcsd3JDQUF3ckM7QUFFL3NDLE1BQU1DLFNBQVMsR0FBRyxNQUFNO0VBQ3RCQyxXQUFXQSxDQUFDQyxPQUFPLEVBQUU7SUFBQSxJQUFBQyxLQUFBO0lBQ25CN0IscURBQWdCLENBQUMsSUFBSSxFQUFFNEIsT0FBTyxDQUFDO0lBQy9CLElBQUksQ0FBQ0UsY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDQyxXQUFXLENBQUMsS0FBSyxDQUFDO0lBQ25ELElBQUksQ0FBQ0MsZUFBZSxHQUFHLE1BQU07TUFDM0IsTUFBTUMsT0FBTyxHQUFHLElBQUksQ0FBQ0MsdUJBQXVCLEVBQUU7TUFDOUMsSUFBSSxDQUFDRCxPQUFPLEVBQUU7UUFDWjtNQUNGO01BQ0E7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO01BQ01BLE9BQU8sQ0FBQ0UsTUFBTSxHQUFHLElBQUk7TUFDckJGLE9BQU8sQ0FBQ0csTUFBTSxHQUFHLEtBQUs7TUFDdEI7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO01BQ00sSUFBSUgsT0FBTyxDQUFDSSxLQUFLLEtBQUtDLFNBQVMsRUFBRTtRQUMvQkwsT0FBTyxDQUFDSSxLQUFLLEdBQUcsTUFBTTtNQUN4QjtJQUNGLENBQUM7SUFDRCxJQUFJLENBQUNILHVCQUF1QixHQUFHLE1BQU07TUFDbkMsTUFBTTtRQUFFSztNQUFTLENBQUMsR0FBRyxJQUFJO01BQ3pCLElBQUksQ0FBQ0EsUUFBUSxFQUFFO1FBQ2I7TUFDRjtNQUNBO0FBQ047QUFDQTtBQUNBO01BQ00sTUFBTUMsSUFBSSxHQUFHRCxRQUFRLENBQUNFLGFBQWEs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V3lLLFFBQVFBLENBQUEsRUFBRztJQUFFLE9BQU87TUFDN0IsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO01BQ3pCLFVBQVUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO01BQy9CLFVBQVUsRUFBRSxDQUFDLGlCQUFpQjtJQUNoQyxDQUFDO0VBQUU7QUFDTCxDQUFDO0FBQ0QxQyxjQUFjLENBQUMxRCxLQUFLLEdBQUc7RUFDckJzRCxHQUFHLEVBQUVFLG9CQUFvQjtFQUN6QkQsRUFBRSxFQUFFRTtBQUNOLENBQUMiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1hY2NvcmRpb25fMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBoLCBIIGFzIEhvc3QsIGYgYXMgZ2V0RWxlbWVudCwgZCBhcyBjcmVhdGVFdmVudCB9IGZyb20gJy4vaW5kZXgtYmUyMThkNzAuanMnO1xuaW1wb3J0IHsgbCBhcyBjaGV2cm9uRG93biB9IGZyb20gJy4vaW5kZXgtMzkzYmMxNGEuanMnO1xuaW1wb3J0IHsgYyBhcyBjb25maWcsIGIgYXMgZ2V0SW9uTW9kZSB9IGZyb20gJy4vaW9uaWMtZ2xvYmFsLTNiMjhhMjI1LmpzJztcbmltcG9ydCB7IHIgYXMgcmFmLCB0IGFzIHRyYW5zaXRpb25FbmRBc3luYywgYSBhcyBhZGRFdmVudExpc3RlbmVyLCBiIGFzIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGcgYXMgZ2V0RWxlbWVudFJvb3QgfSBmcm9tICcuL2hlbHBlcnMtNWViNjM2NGQuanMnO1xuaW1wb3J0IHsgcCBhcyBwcmludElvbldhcm5pbmcgfSBmcm9tICcuL2luZGV4LWU4NmYwMTE3LmpzJztcblxuY29uc3QgYWNjb3JkaW9uSW9zQ3NzID0gXCI6aG9zdHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZmZmZik7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6MH06aG9zdCguYWNjb3JkaW9uLWV4cGFuZGluZykgOjpzbG90dGVkKGlvbi1pdGVtW3Nsb3Q9aGVhZGVyXSksOmhvc3QoLmFjY29yZGlvbi1leHBhbmRlZCkgOjpzbG90dGVkKGlvbi1pdGVtW3Nsb3Q9aGVhZGVyXSl7LS1ib3JkZXItd2lkdGg6MHB4fTpob3N0KC5hY2NvcmRpb24tYW5pbWF0ZWQpey13ZWJraXQtdHJhbnNpdGlvbjphbGwgMzAwbXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuOCwgMC41LCAxKTt0cmFuc2l0aW9uOmFsbCAzMDBtcyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjUsIDEpfTpob3N0KC5hY2NvcmRpb24tYW5pbWF0ZWQpICNjb250ZW50ey13ZWJraXQtdHJhbnNpdGlvbjptYXgtaGVpZ2h0IDMwMG1zIGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuNSwgMSk7dHJhbnNpdGlvbjptYXgtaGVpZ2h0IDMwMG1zIGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuNSwgMSl9I2NvbnRlbnR7b3ZlcmZsb3c6aGlkZGVuO3dpbGwtY2hhbmdlOm1heC1oZWlnaHR9Omhvc3QoLmFjY29yZGlvbi1jb2xsYXBzaW5nKSAjY29udGVudHttYXgtaGVpZ2h0OjAgIWltcG9ydGFudH06aG9zdCguYWNjb3JkaW9uLWNvbGxhcHNlZCkgI2NvbnRlbnR7ZGlzcGxheTpub25lfTpob3N0KC5hY2NvcmRpb24tZXhwYW5kaW5nKSAjY29udGVudHttYXgtaGVpZ2h0OjB9Omhvc3QoLmFjY29yZGlvbi1leHBhbmRpbmcpICNjb250ZW50LXdyYXBwZXJ7b3ZlcmZsb3c6YXV0b306aG9zdCguYWNjb3JkaW9uLWRpc2FibGVkKSAjaGVhZGVyLDpob3N0KC5hY2NvcmRpb24tcmVhZG9ubHkpICNoZWFkZXIsOmhvc3QoLmFjY29yZGlvbi1kaXNhYmxlZCkgI2NvbnRlbnQsOmhvc3QoLmFjY29yZGlvbi1yZWFkb25seSkgI2NvbnRlbnR7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguYWNjb3JkaW9uLWRpc2FibGVkKSAjaGVhZGVyLDpob3N0KC5hY2NvcmRpb24tZGlzYWJsZWQpICNjb250ZW50e29wYWNpdHk6MC40fUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKXs6aG9zdCwjY29udGVudHstd2Via2l0LXRyYW5zaXRpb246bm9uZSAhaW1wb3J0YW50O3RyYW5zaXRpb246bm9uZSAhaW1wb3J0YW50fX06aG9zdCguYWNjb3JkaW9uLW5leHQpIDo6c2xvdHRlZChpb24taXRlbVtzbG90PWhlYWRlcl0pey0tYm9yZGVyLXdpZHRoOjAuNTVweCAwcHggMC41NXB4IDBweH1cIjtcblxuY29uc3QgYWNjb3JkaW9uTWRDc3MgPSBcIjpob3N0e2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yLCAjZmZmZmZmKTtvdmVyZmxvdzpoaWRkZW47ei1pbmRleDowfTpob3N0KC5hY2NvcmRpb24tZXhwYW5kaW5nKSA6OnNsb3R0ZWQoaW9uLWl0ZW1bc2xvdD1oZWFkZXJdKSw6aG9zdCguYWNjb3JkaW9uLWV4cGFuZGVkKSA6OnNsb3R0ZWQoaW9uLWl0ZW1bc2xvdD1oZWFkZXJdKXstLWJvcmRlci13aWR0aDowcHh9Omhvc3QoLmFjY29yZGlvbi1hbmltYXRlZCl7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAzMDBtcyBjdWJpYy1iZXppZXIoMC4yNSwgMC44LCAwLjUsIDEpO3RyYW5zaXRpb246YWxsIDMwMG1zIGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuNSwgMSl9Omhvc3QoLmFjY29yZGlvbi1hbmltYXRlZCkgI2NvbnRlbnR7LXdlYmtpdC10cmFuc2l0aW9uOm1heC1oZWlnaHQgMzAwbXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuOCwgMC41LCAxKTt0cmFuc2l0aW9uOm1heC1oZWlnaHQgMzAwbXMgY3ViaWMtYmV6aWVyKDAuMjUsIDAuOCwgMC41LCAxKX0jY29udGVudHtvdmVyZmxvdzpoaWRkZW47d2lsbC1jaGFuZ2U6bWF4LWhlaWdodH06aG9zdCguYWNjb3JkaW9uLWNvbGxhcHNpbmcpICNjb250ZW50e21heC1oZWlnaHQ6MCAhaW1wb3J0YW50fTpob3N0KC5hY2NvcmRpb24tY29sbGFwc2VkKSAjY29udGVudHtkaXNwbGF5Om5vbmV9Omhvc3QoLmFjY29yZGlvbi1leHBhbmRpbmcpICNjb250ZW50e21heC1oZWlnaHQ6MH06aG9zdCguYWNjb3JkaW9uLWV4cGFuZGluZykgI2NvbnRlbnQtd3JhcHBlcntvdmVyZmxvdzphdXRvfTpob3N0KC5hY2NvcmRpb24tZGlzYWJsZWQpICNoZWFkZXIsOmhvc3QoLmFjY29yZGlvbi1yZWFkb25seSkgI2hlYWRlciw6aG9zdCguYWNjb3JkaW9uLWRpc2FibGVkKSAjY29udGVudCw6aG9zdCguYWNjb3JkaW9uLXJlYWRvbmx5KSAjY29udGVudHtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5hY2NvcmRpb24tZGlzYWJsZWQpICNoZWFkZXIsOmhvc3QoLmFjY29yZGlvbi1kaXNhYmxlZCkgI2NvbnRlbnR7b3BhY2l0eTowLjR9QG1lZGlhIChwcmVmZXJzLXJlZHVjZWQtbW90aW9uOiByZWR1Y2Upezpob3N0LCNjb250ZW50ey13ZWJraXQtdHJhbnNpdGlvbjpub25lICFpbXBvcnRhbnQ7dHJhbnNpdGlvbjpub25lICFpbXBvcnRhbnR9fVwiO1xuXG5jb25zdCBBY2NvcmRpb24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMudXBkYXRlTGlzdGVuZXIgPSAoKSA9PiB0aGlzLnVwZGF0ZVN0YXRlKGZhbHNlKTtcbiAgICB0aGlzLnNldEl0ZW1EZWZhdWx0cyA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGlvbkl0ZW0gPSB0aGlzLmdldFNsb3R0ZWRIZWFkZXJJb25JdGVtKCk7XG4gICAgICBpZiAoIWlvbkl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBGb3IgYTExeSBwdXJwb3Nlcywgd2UgbWFrZVxuICAgICAgICogdGhlIGlvbi1pdGVtIGEgYnV0dG9uIHNvIHVzZXJzXG4gICAgICAgKiBjYW4gdGFiIHRvIGl0IGFuZCB1c2Uga2V5Ym9hcmRcbiAgICAgICAqIG5hdmlnYXRpb24gdG8gZ2V0IGFyb3VuZC5cbiAgICAgICAqL1xuICAgICAgaW9uSXRlbS5idXR0b24gPSB0cnVlO1xuICAgICAgaW9uSXRlbS5kZXRhaWwgPSBmYWxzZTtcbiAgICAgIC8qKlxuICAgICAgICogQnkgZGVmYXVsdCwgdGhlIGxpbmVzIGluIGFuXG4gICAgICAgKiBpdGVtIHNob3VsZCBiZSBmdWxsIGhlcmUsIGJ1dFxuICAgICAgICogb25seSBkbyB0aGF0IGlmIGEgdXNlciBoYXNcbiAgICAgICAqIG5vdCBleHBsaWNpdGx5IG92ZXJyaWRkZW4gdGhlbVxuICAgICAgICovXG4gICAgICBpZiAoaW9uSXRlbS5saW5lcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlvbkl0ZW0ubGluZXMgPSAnZnVsbCc7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLmdldFNsb3R0ZWRIZWFkZXJJb25JdGVtID0gKCkgPT4ge1xuICAgICAgY29uc3QgeyBoZWFkZXJFbCB9ID0gdGhpcztcbiAgICAgIGlmICghaGVhZGVyRWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIGZpcnN0IGlvbi1pdGVtXG4gICAgICAgKiBzbG90dGVkIGluIHRoZSBoZWFkZXIgc2xvdFxuICAgICAgICovXG4gICAgICBjb25zdCBzbG90ID0gaGVhZGVyRWwucXVlcnlTZWxlY3Rvcignc2xvdCcpO1xuICAgICAgaWYgKCFzbG90KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFRoaXMgaXMgbm90IGRlZmluZWQgaW4gdW5pdCB0ZXN0c1xuICAgICAgaWYgKHNsb3QuYXNzaWduZWRFbGVtZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgICByZXR1cm4gc2xvdC5hc3NpZ25lZEVsZW1lbnRzKCkuZmluZCgoZWwpID0+IGVsLnRhZ05hbWUgPT09ICdJT04tSVRFTScpO1xuICAgIH07XG4gICAgdGhpcy5zZXRBcmlhID0gKGV4cGFuZGVkID0gZmFsc2UpID0+IHtcbiAgICAgIGNvbnN0IGlvbkl0ZW0gPSB0aGlzLmdldFNsb3R0ZWRIZWFkZXJJb25JdGVtKCk7XG4gICAgICBpZiAoIWlvbkl0ZW0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLyoqXG4gICAgICAgKiBHZXQgdGhlIG5hdGl2ZSA8YnV0dG9uPiBlbGVtZW50IGluc2lkZSBvZlxuICAgICAgICogaW9uLWl0ZW0gYmVjYXVzZSB0aGF0IGlzIHdoYXQgd2lsbCBiZSBmb2N1c2VkXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHJvb3QgPSBnZXRFbGVtZW50Um9vdChpb25JdGVtKTtcbiAgICAgIGNvbnN0IGJ1dHRvbiA9IHJvb3QucXVlcnlTZWxlY3RvcignYnV0dG9uJyk7XG4gICAgICBpZiAoIWJ1dHRvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgYCR7ZXhwYW5kZWR9YCk7XG4gICAgfTtcbiAgICB0aGlzLnNsb3RUb2dnbGVJY29uID0gKCkgPT4ge1xuICAgICAgY29uc3QgaW9uSXRlbSA9IHRoaXMuZ2V0U2xvdHRlZEhlYWRlcklvbkl0ZW0oKTtcbiAgICAgIGlmICghaW9uSXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB7IHRvZ2dsZUljb25TbG90LCB0b2dnbGVJY29uIH0gPSB0aGlzO1xuICAgICAgLyoqXG4gICAgICAgKiBDaGVjayBpZiB0aGVyZSBhbHJlYWR5IGlzIGEgdG9nZ2xlIGljb24uXG4gICAgICAgKiBJZiBzbywgZG8gbm90IGFkZCBhbm90aGVyIG9uZS5cbiAgICAgICAqL1xuICAgICAgY29uc3QgZXhpc3RpbmdUb2dnbGVJY29uID0gaW9uSXRlbS5xdWVyeVNlbGVjdG9yKCcuaW9uLWFjY29yZGlvbi10b2dnbGUtaWNvbicpO1xuICAgICAgaWYgKGV4aXN0aW5nVG9nZ2xlSWNvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBpY29uRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpb24taWNvbicpO1xuICAgICAgaWNvbkVsLnNsb3QgPSB0b2dnbGVJY29uU2xvdDtcbiAgICAgIGljb25FbC5sYXp5ID0gZmFsc2U7XG4gICAgICBpY29uRWwuY2xhc3NMaXN0LmFkZCgnaW9uLWFjY29yZGlvbi10b2dnbGUtaWNvbicpO1xuICAgICAgaWNvbkVsLmljb24gPSB0b2dnbGVJY29uO1xuICAgICAgaWNvbkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgaW9uSXRlbS5hcHBlbmRDaGlsZChpY29uRWwpO1xuICAgIH07XG4gICAgdGhpcy5leHBhbmRBY2NvcmRpb24gPSAoaW5pdGlhbFVwZGF0ZSA9IGZhbHNlKSA9PiB7XG4gICAgICBjb25zdCB7IGNvbnRlbnRFbCwgY29udGVudEVsV3JhcHBlciB9ID0gdGhpcztcbiAgICAgIGlmIChpbml0aWFsVXBkYXRlIHx8IGNvbnRlbnRFbCA9PT0gdW5kZWZpbmVkIHx8IGNvbnRlbnRFbFdyYXBwZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLnN0YXRlID0gNCAvKiBBY2NvcmRpb25TdGF0ZS5FeHBhbmRlZCAqLztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IDQgLyogQWNjb3JkaW9uU3RhdGUuRXhwYW5kZWQgKi8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY3VycmVudFJhZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuY3VycmVudFJhZik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaG91bGRBbmltYXRlKCkpIHtcbiAgICAgICAgcmFmKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnN0YXRlID0gOCAvKiBBY2NvcmRpb25TdGF0ZS5FeHBhbmRpbmcgKi87XG4gICAgICAgICAgdGhpcy5jdXJyZW50UmFmID0gcmFmKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnRIZWlnaHQgPSBjb250ZW50RWxXcmFwcGVyLm9mZnNldEhlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IHdhaXRGb3JUcmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZEFzeW5jKGNvbnRlbnRFbCwgMjAwMCk7XG4gICAgICAgICAgICBjb250ZW50RWwuc3R5bGUuc2V0UHJvcGVydHkoJ21heC1oZWlnaHQnLCBgJHtjb250ZW50SGVpZ2h0fXB4YCk7XG4gICAgICAgICAgICBhd2FpdCB3YWl0Rm9yVHJhbnNpdGlvbjtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSA0IC8qIEFjY29yZGlvblN0YXRlLkV4cGFuZGVkICovO1xuICAgICAgICAgICAgY29udGVudEVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdtYXgtaGVpZ2h0Jyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSA0IC8qIEFjY29yZGlvblN0YXRlLkV4cGFuZGVkICovO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5jb2xsYXBzZUFjY29yZGlvbiA9IChpbml0aWFsVXBkYXRlID0gZmFsc2UpID0+IHtcbiAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgaWYgKGluaXRpYWxVcGRhdGUgfHwgY29udGVudEVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDEgLyogQWNjb3JkaW9uU3RhdGUuQ29sbGFwc2VkICovO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gMSAvKiBBY2NvcmRpb25TdGF0ZS5Db2xsYXBzZWQgKi8pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY3VycmVudFJhZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuY3VycmVudFJhZik7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5zaG91bGRBbmltYXRlKCkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50UmFmID0gcmFmKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBjb25zdCBjb250ZW50SGVpZ2h0ID0gY29udGVudEVsLm9mZnNldEhlaWdodDtcbiAgICAgICAgICBjb250ZW50RWwuc3R5bGUuc2V0UHJvcGVydHkoJ21heC1oZWlnaHQnLCBgJHtjb250ZW50SGVpZ2h0fXB4YCk7XG4gICAgICAgICAgcmFmKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHdhaXRGb3JUcmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZEFzeW5jKGNvbnRlbnRFbCwgMjAwMCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gMiAvKiBBY2NvcmRpb25TdGF0ZS5Db2xsYXBzaW5nICovO1xuICAgICAgICAgICAgYXdhaXQgd2FpdEZvclRyYW5zaXRpb247XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gMSAvKiBBY2NvcmRpb25TdGF0ZS5Db2xsYXBzZWQgKi87XG4gICAgICAgICAgICBjb250ZW50RWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ21heC1oZWlnaHQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IDEgLyogQWNjb3JkaW9uU3RhdGUuQ29sbGFwc2VkICovO1xuICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSBpZlxuICAgICAqIHNvbWV0aGluZyBzaG91bGQgYW5pbWF0ZS5cbiAgICAgKiBJZiBwcmVmZXJzLXJlZHVjZWQtbW90aW9uIGlzIHNldFxuICAgICAqIHRoZW4gd2Ugc2hvdWxkIG5vdCBhbmltYXRlLCByZWdhcmRsZXNzXG4gICAgICogb2Ygd2hhdCBpcyBzZXQgaW4gdGhlIGNvbmZpZy5cbiAgICAgKi9cbiAgICB0aGlzLnNob3VsZEFuaW1hdGUgPSAoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJlZmVyc1JlZHVjZWRNb3Rpb24gPSBtYXRjaE1lZGlhKCcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKScpLm1hdGNoZXM7XG4gICAgICBpZiAocHJlZmVyc1JlZHVjZWRNb3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgYW5pbWF0ZWQgPSBjb25maWcuZ2V0KCdhbmltYXRlZCcsIHRydWUpO1xuICAgICAgaWYgKCFhbmltYXRlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5hY2NvcmRpb25Hcm91cEVsICYmICF0aGlzLmFjY29yZGlvbkdyb3VwRWwuYW5pbWF0ZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICB0aGlzLnVwZGF0ZVN0YXRlID0gYXN5bmMgKGluaXRpYWxVcGRhdGUgPSBmYWxzZSkgPT4ge1xuICAgICAgY29uc3QgYWNjb3JkaW9uR3JvdXAgPSB0aGlzLmFjY29yZGlvbkdyb3VwRWw7XG4gICAgICBjb25zdCBhY2NvcmRpb25WYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICBpZiAoIWFjY29yZGlvbkdyb3VwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHZhbHVlID0gYWNjb3JkaW9uR3JvdXAudmFsdWU7XG4gICAgICBjb25zdCBzaG91bGRFeHBhbmQgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmluY2x1ZGVzKGFjY29yZGlvblZhbHVlKSA6IHZhbHVlID09PSBhY2NvcmRpb25WYWx1ZTtcbiAgICAgIGlmIChzaG91bGRFeHBhbmQpIHtcbiAgICAgICAgdGhpcy5leHBhbmRBY2NvcmRpb24oaW5pdGlhbFVwZGF0ZSk7XG4gICAgICAgIHRoaXMuaXNOZXh0ID0gdGhpcy5pc1ByZXZpb3VzID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5jb2xsYXBzZUFjY29yZGlvbihpbml0aWFsVXBkYXRlKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZW4gdXNpbmcgcG9wb3V0IG9yIGluc2V0LFxuICAgICAgICAgKiB0aGUgY29sbGFwc2VkIGFjY29yZGlvbiBpdGVtc1xuICAgICAgICAgKiBtYXkgbmVlZCBhZGRpdGlvbmFsIGJvcmRlciByYWRpdXNcbiAgICAgICAgICogYXBwbGllZC4gQ2hlY2sgdG8gc2VlIGlmIHRoZVxuICAgICAgICAgKiBuZXh0IG9yIHByZXZpb3VzIGFjY29yZGlvbiBpcyBzZWxlY3RlZC5cbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0IG5leHRBY2NvcmRpb24gPSB0aGlzLmdldE5leHRTaWJsaW5nKCk7XG4gICAgICAgIGNvbnN0IG5leHRBY2NvcmRpb25WYWx1ZSA9IG5leHRBY2NvcmRpb24gPT09IG51bGwgfHwgbmV4dEFjY29yZGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmV4dEFjY29yZGlvbi52YWx1ZTtcbiAgICAgICAgaWYgKG5leHRBY2NvcmRpb25WYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5pc1ByZXZpb3VzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5pbmNsdWRlcyhuZXh0QWNjb3JkaW9uVmFsdWUpIDogdmFsdWUgPT09IG5leHRBY2NvcmRpb25WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcmV2aW91c0FjY29yZGlvbiA9IHRoaXMuZ2V0UHJldmlvdXNTaWJsaW5nKCk7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzQWNjb3JkaW9uVmFsdWUgPSBwcmV2aW91c0FjY29yZGlvbiA9PT0gbnVsbCB8fCBwcmV2aW91c0FjY29yZGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogcHJldmlvdXNBY2NvcmRpb24udmFsdWU7XG4gICAgICAgIGlmIChwcmV2aW91c0FjY29yZGlvblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmlzTmV4dCA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuaW5jbHVkZXMocHJldmlvdXNBY2NvcmRpb25WYWx1ZSkgOiB2YWx1ZSA9PT0gcHJldmlvdXNBY2NvcmRpb25WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5nZXROZXh0U2libGluZyA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBuZXh0U2libGluZyA9IHRoaXMuZWwubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgaWYgKChuZXh0U2libGluZyA9PT0gbnVsbCB8fCBuZXh0U2libGluZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbmV4dFNpYmxpbmcudGFnTmFtZSkgIT09ICdJT04tQUNDT1JESU9OJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV4dFNpYmxpbmc7XG4gICAgfTtcbiAgICB0aGlzLmdldFByZXZpb3VzU2libGluZyA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5lbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwcmV2aW91c1NpYmxpbmcgPSB0aGlzLmVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICBpZiAoKHByZXZpb3VzU2libGluZyA9PT0gbnVsbCB8fCBwcmV2aW91c1NpYmxpbmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZpb3VzU2libGluZy50YWdOYW1lKSAhPT0gJ0lPTi1BQ0NPUkRJT04nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBwcmV2aW91c1NpYmxpbmc7XG4gICAgfTtcbiAgICB0aGlzLnN0YXRlID0gMSAvKiBBY2NvcmRpb25TdGF0ZS5Db2xsYXBzZWQgKi87XG4gICAgdGhpcy5pc05leHQgPSBmYWxzZTtcbiAgICB0aGlzLmlzUHJldmlvdXMgPSBmYWxzZTtcbiAgICB0aGlzLnZhbHVlID0gYGlvbi1hY2NvcmRpb24tJHthY2NvcmRpb25JZHMrK31gO1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlYWRvbmx5ID0gZmFsc2U7XG4gICAgdGhpcy50b2dnbGVJY29uID0gY2hldnJvbkRvd247XG4gICAgdGhpcy50b2dnbGVJY29uU2xvdCA9ICdlbmQnO1xuICB9XG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBhY2NvcmRpb25Hcm91cEVsID0gKHRoaXMuYWNjb3JkaW9uR3JvdXBFbCA9IChfYSA9IHRoaXMuZWwpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZXN0KCdpb24tYWNjb3JkaW9uLWdyb3VwJykpO1xuICAgIGlmIChhY2NvcmRpb25Hcm91cEVsKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YXRlKHRydWUpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihhY2NvcmRpb25Hcm91cEVsLCAnaW9uVmFsdWVDaGFuZ2UnLCB0aGlzLnVwZGF0ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH1cbiAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29uc3QgYWNjb3JkaW9uR3JvdXBFbCA9IHRoaXMuYWNjb3JkaW9uR3JvdXBFbDtcbiAgICBpZiAoYWNjb3JkaW9uR3JvdXBFbCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihhY2NvcmRpb25Hcm91cEVsLCAnaW9uVmFsdWVDaGFuZ2UnLCB0aGlzLnVwZGF0ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH1cbiAgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLnNldEl0ZW1EZWZhdWx0cygpO1xuICAgIHRoaXMuc2xvdFRvZ2dsZUljb24oKTtcbiAgICAvKipcbiAgICAgKiBXZSBuZWVkIHRvIHdhaXQgYSB0aWNrIGJlY2F1c2Ugd2VcbiAgICAgKiBqdXN0IHNldCBpb25JdGVtLmJ1dHRvbiA9IHRydWUgYW5kXG4gICAgICogdGhlIGJ1dHRvbiBoYXMgbm90IGhhdmUgYmVlbiByZW5kZXJlZCB5ZXQuXG4gICAgICovXG4gICAgcmFmKCgpID0+IHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0IGFyaWEgbGFiZWwgb24gYnV0dG9uIGluc2lkZSBvZiBpb24taXRlbVxuICAgICAgICogb25jZSB0aGUgaW5uZXIgY29udGVudCBoYXMgYmVlbiByZW5kZXJlZC5cbiAgICAgICAqL1xuICAgICAgY29uc3QgZXhwYW5kZWQgPSB0aGlzLnN0YXRlID09PSA0IC8qIEFjY29yZGlvblN0YXRlLkV4cGFuZGVkICovIHx8IHRoaXMuc3RhdGUgPT09IDggLyogQWNjb3JkaW9uU3RhdGUuRXhwYW5kaW5nICovO1xuICAgICAgdGhpcy5zZXRBcmlhKGV4cGFuZGVkKTtcbiAgICB9KTtcbiAgfVxuICB0b2dnbGVFeHBhbmRlZCgpIHtcbiAgICBjb25zdCB7IGFjY29yZGlvbkdyb3VwRWwsIHZhbHVlLCBzdGF0ZSB9ID0gdGhpcztcbiAgICBpZiAoYWNjb3JkaW9uR3JvdXBFbCkge1xuICAgICAgLyoqXG4gICAgICAgKiBCZWNhdXNlIHRoZSBhY2NvcmRpb24gZ3JvdXAgbWF5IG9yIG1heVxuICAgICAgICogbm90IGFsbG93IG11bHRpcGxlIGFjY29yZGlvbnMgb3Blbiwgd2VcbiAgICAgICAqIG5lZWQgdG8gcmVxdWVzdCB0aGUgdG9nZ2xpbmcgb2YgdGhpc1xuICAgICAgICogYWNjb3JkaW9uIGFuZCB0aGUgYWNjb3JkaW9uIGdyb3VwIHdpbGxcbiAgICAgICAqIG1ha2UgdGhlIGRlY2lzaW9uIG9uIHdoZXRoZXIgb3Igbm90XG4gICAgICAgKiB0byBhbGxvdyBpdC5cbiAgICAgICAqL1xuICAgICAgY29uc3QgZXhwYW5kID0gc3RhdGUgPT09IDEgLyogQWNjb3JkaW9uU3RhdGUuQ29sbGFwc2VkICovIHx8IHN0YXRlID09PSAyIC8qIEFjY29yZGlvblN0YXRlLkNvbGxhcHNpbmcgKi87XG4gICAgICBhY2NvcmRpb25Hcm91cEVsLnJlcXVlc3RBY2NvcmRpb25Ub2dnbGUodmFsdWUsIGV4cGFuZCk7XG4gICAgfVxuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGRpc2FibGVkLCByZWFkb25seSB9ID0gdGhpcztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBleHBhbmRlZCA9IHRoaXMuc3RhdGUgPT09IDQgLyogQWNjb3JkaW9uU3RhdGUuRXhwYW5kZWQgKi8gfHwgdGhpcy5zdGF0ZSA9PT0gOCAvKiBBY2NvcmRpb25TdGF0ZS5FeHBhbmRpbmcgKi87XG4gICAgY29uc3QgaGVhZGVyUGFydCA9IGV4cGFuZGVkID8gJ2hlYWRlciBleHBhbmRlZCcgOiAnaGVhZGVyJztcbiAgICBjb25zdCBjb250ZW50UGFydCA9IGV4cGFuZGVkID8gJ2NvbnRlbnQgZXhwYW5kZWQnIDogJ2NvbnRlbnQnO1xuICAgIHRoaXMuc2V0QXJpYShleHBhbmRlZCk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgY2xhc3M6IHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAnYWNjb3JkaW9uLWV4cGFuZGluZyc6IHRoaXMuc3RhdGUgPT09IDggLyogQWNjb3JkaW9uU3RhdGUuRXhwYW5kaW5nICovLFxuICAgICAgICAnYWNjb3JkaW9uLWV4cGFuZGVkJzogdGhpcy5zdGF0ZSA9PT0gNCAvKiBBY2NvcmRpb25TdGF0ZS5FeHBhbmRlZCAqLyxcbiAgICAgICAgJ2FjY29yZGlvbi1jb2xsYXBzaW5nJzogdGhpcy5zdGF0ZSA9PT0gMiAvKiBBY2NvcmRpb25TdGF0ZS5Db2xsYXBzaW5nICovLFxuICAgICAgICAnYWNjb3JkaW9uLWNvbGxhcHNlZCc6IHRoaXMuc3RhdGUgPT09IDEgLyogQWNjb3JkaW9uU3RhdGUuQ29sbGFwc2VkICovLFxuICAgICAgICAnYWNjb3JkaW9uLW5leHQnOiB0aGlzLmlzTmV4dCxcbiAgICAgICAgJ2FjY29yZGlvbi1wcmV2aW91cyc6IHRoaXMuaXNQcmV2aW91cyxcbiAgICAgICAgJ2FjY29yZGlvbi1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAnYWNjb3JkaW9uLXJlYWRvbmx5JzogcmVhZG9ubHksXG4gICAgICAgICdhY2NvcmRpb24tYW5pbWF0ZWQnOiBjb25maWcuZ2V0Qm9vbGVhbignYW5pbWF0ZWQnLCB0cnVlKSxcbiAgICAgIH0gfSwgaChcImRpdlwiLCB7IG9uQ2xpY2s6ICgpID0+IHRoaXMudG9nZ2xlRXhwYW5kZWQoKSwgaWQ6IFwiaGVhZGVyXCIsIHBhcnQ6IGhlYWRlclBhcnQsIFwiYXJpYS1jb250cm9sc1wiOiBcImNvbnRlbnRcIiwgcmVmOiAoaGVhZGVyRWwpID0+ICh0aGlzLmhlYWRlckVsID0gaGVhZGVyRWwpIH0sIGgoXCJzbG90XCIsIHsgbmFtZTogXCJoZWFkZXJcIiB9KSksIGgoXCJkaXZcIiwgeyBpZDogXCJjb250ZW50XCIsIHBhcnQ6IGNvbnRlbnRQYXJ0LCByb2xlOiBcInJlZ2lvblwiLCBcImFyaWEtbGFiZWxsZWRieVwiOiBcImhlYWRlclwiLCByZWY6IChjb250ZW50RWwpID0+ICh0aGlzLmNvbnRlbnRFbCA9IGNvbnRlbnRFbCkgfSwgaChcImRpdlwiLCB7IGlkOiBcImNvbnRlbnQtd3JhcHBlclwiLCByZWY6IChjb250ZW50RWxXcmFwcGVyKSA9PiAodGhpcy5jb250ZW50RWxXcmFwcGVyID0gY29udGVudEVsV3JhcHBlcikgfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImNvbnRlbnRcIiB9KSkpKSk7XG4gIH1cbiAgc3RhdGljIGdldCBkZWxlZ2F0ZXNGb2N1cygpIHsgcmV0dXJuIHRydWU7IH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbmxldCBhY2NvcmRpb25JZHMgPSAwO1xuQWNjb3JkaW9uLnN0eWxlID0ge1xuICBpb3M6IGFjY29yZGlvbklvc0NzcyxcbiAgbWQ6IGFjY29yZGlvbk1kQ3NzXG59O1xuXG5jb25zdCBhY2NvcmRpb25Hcm91cElvc0NzcyA9IFwiOmhvc3R7ZGlzcGxheTpibG9ja306aG9zdCguYWNjb3JkaW9uLWdyb3VwLWV4cGFuZC1pbnNldCl7bWFyZ2luLWxlZnQ6MTZweDttYXJnaW4tcmlnaHQ6MTZweDttYXJnaW4tdG9wOjE2cHg7bWFyZ2luLWJvdHRvbToxNnB4fUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7Omhvc3QoLmFjY29yZGlvbi1ncm91cC1leHBhbmQtaW5zZXQpe21hcmdpbi1sZWZ0OnVuc2V0O21hcmdpbi1yaWdodDp1bnNldDstd2Via2l0LW1hcmdpbi1zdGFydDoxNnB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6MTZweDstd2Via2l0LW1hcmdpbi1lbmQ6MTZweDttYXJnaW4taW5saW5lLWVuZDoxNnB4fX06aG9zdCguYWNjb3JkaW9uLWdyb3VwLWV4cGFuZC1pbnNldCkgOjpzbG90dGVkKGlvbi1hY2NvcmRpb24uYWNjb3JkaW9uLWV4cGFuZGluZyksOmhvc3QoLmFjY29yZGlvbi1ncm91cC1leHBhbmQtaW5zZXQpIDo6c2xvdHRlZChpb24tYWNjb3JkaW9uLmFjY29yZGlvbi1leHBhbmRlZCl7Ym9yZGVyLWJvdHRvbTpub25lfVwiO1xuXG5jb25zdCBhY2NvcmRpb25Hcm91cE1kQ3NzID0gXCI6aG9zdHtkaXNwbGF5OmJsb2NrfTpob3N0KC5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0KXttYXJnaW4tbGVmdDoxNnB4O21hcmdpbi1yaWdodDoxNnB4O21hcmdpbi10b3A6MTZweDttYXJnaW4tYm90dG9tOjE2cHh9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCguYWNjb3JkaW9uLWdyb3VwLWV4cGFuZC1pbnNldCl7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OjE2cHg7bWFyZ2luLWlubGluZS1zdGFydDoxNnB4Oy13ZWJraXQtbWFyZ2luLWVuZDoxNnB4O21hcmdpbi1pbmxpbmUtZW5kOjE2cHh9fTpob3N0KC5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0KSA6OnNsb3R0ZWQoaW9uLWFjY29yZGlvbil7LXdlYmtpdC1ib3gtc2hhZG93OjBweCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLCAwcHggMnB4IDJweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE0KSwgMHB4IDFweCA1cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xMik7Ym94LXNoYWRvdzowcHggM3B4IDFweCAtMnB4IHJnYmEoMCwgMCwgMCwgMC4yKSwgMHB4IDJweCAycHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNCksIDBweCAxcHggNXB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTIpfTpob3N0KC5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0KSA6OnNsb3R0ZWQoaW9uLWFjY29yZGlvbi5hY2NvcmRpb24tZXhwYW5kaW5nKSw6aG9zdCguYWNjb3JkaW9uLWdyb3VwLWV4cGFuZC1pbnNldCkgOjpzbG90dGVkKGlvbi1hY2NvcmRpb24uYWNjb3JkaW9uLWV4cGFuZGVkKXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MTZweDttYXJnaW4tYm90dG9tOjE2cHg7Ym9yZGVyLXJhZGl1czo2cHh9Omhvc3QoLmFjY29yZGlvbi1ncm91cC1leHBhbmQtaW5zZXQpIDo6c2xvdHRlZChpb24tYWNjb3JkaW9uLmFjY29yZGlvbi1wcmV2aW91cyl7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6NnB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NnB4fTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0KSA6OnNsb3R0ZWQoaW9uLWFjY29yZGlvbi5hY2NvcmRpb24tcHJldmlvdXMpLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0IDo6c2xvdHRlZChpb24tYWNjb3JkaW9uLmFjY29yZGlvbi1wcmV2aW91cyl7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6NnB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6NnB4fTpob3N0KC5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0KSA6OnNsb3R0ZWQoaW9uLWFjY29yZGlvbi5hY2NvcmRpb24tbmV4dCl7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czo2cHg7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6NnB4fTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5hY2NvcmRpb24tZ3JvdXAtZXhwYW5kLWluc2V0KSA6OnNsb3R0ZWQoaW9uLWFjY29yZGlvbi5hY2NvcmRpb24tbmV4dCksOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLmFjY29yZGlvbi1ncm91cC1leHBhbmQtaW5zZXQgOjpzbG90dGVkKGlvbi1hY2NvcmRpb24uYWNjb3JkaW9uLW5leHQpe2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NnB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjZweH06aG9zdCguYWNjb3JkaW9uLWdyb3VwLWV4cGFuZC1pbnNldCkgOjpzbG90dGVkKGlvbi1hY2NvcmRpb24pOmZpcnN0LW9mLXR5cGV7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowfVwiO1xuXG5jb25zdCBBY2NvcmRpb25Hcm91cCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmlvblZhbHVlQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25WYWx1ZUNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmFuaW1hdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm11bHRpcGxlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMucmVhZG9ubHkgPSBmYWxzZTtcbiAgICB0aGlzLmV4cGFuZCA9ICdjb21wYWN0JztcbiAgfVxuICB2YWx1ZUNoYW5nZWQoKSB7XG4gICAgY29uc3QgeyB2YWx1ZSwgbXVsdGlwbGUgfSA9IHRoaXM7XG4gICAgaWYgKCFtdWx0aXBsZSAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBXZSBkbyBzb21lIHByb2Nlc3Npbmcgb24gdGhlIGB2YWx1ZWAgYXJyYXkgc29cbiAgICAgICAqIHRoYXQgaXQgbG9va3MgbW9yZSBsaWtlIGFuIGFycmF5IHdoZW4gbG9nZ2VkIHRvXG4gICAgICAgKiB0aGUgY29uc29sZS5cbiAgICAgICAqIEV4YW1wbGUgZ2l2ZW4gWydhJywgJ2InXVxuICAgICAgICogRGVmYXVsdCB0b1N0cmluZygpIGJlaGF2aW9yOiBhLGJcbiAgICAgICAqIEN1c3RvbSBiZWhhdmlvcjogWydhJywgJ2InXVxuICAgICAgICovXG4gICAgICBwcmludElvbldhcm5pbmcoYGlvbi1hY2NvcmRpb24tZ3JvdXAgd2FzIHBhc3NlZCBhbiBhcnJheSBvZiB2YWx1ZXMsIGJ1dCBtdWx0aXBsZT1cImZhbHNlXCIuIFRoaXMgaXMgaW5jb3JyZWN0IHVzYWdlIGFuZCBtYXkgcmVzdWx0IGluIHVuZXhwZWN0ZWQgYmVoYXZpb3JzLiBUbyBkaXNtaXNzIHRoaXMgd2FybmluZywgcGFzcyBhIHN0cmluZyB0byB0aGUgXCJ2YWx1ZVwiIHByb3BlcnR5IHdoZW4gbXVsdGlwbGU9XCJmYWxzZVwiLlxuXG4gIFZhbHVlIFBhc3NlZDogWyR7dmFsdWUubWFwKCh2KSA9PiBgJyR7dn0nYCkuam9pbignLCAnKX1dXG5gLCB0aGlzLmVsKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRG8gbm90IHVzZSBgdmFsdWVgIGhlcmUgYXMgdGhhdCB3aWxsIGJlXG4gICAgICogbm90IGFjY291bnQgZm9yIHRoZSBhZGp1c3RtZW50IHdlIG1ha2UgYWJvdmUuXG4gICAgICovXG4gICAgdGhpcy5pb25WYWx1ZUNoYW5nZS5lbWl0KHsgdmFsdWU6IHRoaXMudmFsdWUgfSk7XG4gIH1cbiAgYXN5bmMgZGlzYWJsZWRDaGFuZ2VkKCkge1xuICAgIGNvbnN0IHsgZGlzYWJsZWQgfSA9IHRoaXM7XG4gICAgY29uc3QgYWNjb3JkaW9ucyA9IGF3YWl0IHRoaXMuZ2V0QWNjb3JkaW9ucygpO1xuICAgIGZvciAoY29uc3QgYWNjb3JkaW9uIG9mIGFjY29yZGlvbnMpIHtcbiAgICAgIGFjY29yZGlvbi5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICAgIH1cbiAgfVxuICBhc3luYyByZWFkb25seUNoYW5nZWQoKSB7XG4gICAgY29uc3QgeyByZWFkb25seSB9ID0gdGhpcztcbiAgICBjb25zdCBhY2NvcmRpb25zID0gYXdhaXQgdGhpcy5nZXRBY2NvcmRpb25zKCk7XG4gICAgZm9yIChjb25zdCBhY2NvcmRpb24gb2YgYWNjb3JkaW9ucykge1xuICAgICAgYWNjb3JkaW9uLnJlYWRvbmx5ID0gcmVhZG9ubHk7XG4gICAgfVxuICB9XG4gIGFzeW5jIG9uS2V5ZG93bihldikge1xuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgZm9jdXMgaXMgaW4gdGhlIGhlYWRlciwgbm90IHRoZSBib2R5LCBvZiB0aGUgYWNjb3JkaW9uLiBUaGlzIGVuc3VyZXNcbiAgICAgKiB0aGF0IGlmIHRoZXJlIGFyZSBhbnkgaW50ZXJhY3RhYmxlIGVsZW1lbnRzIGluIHRoZSBib2R5LCB0aGVpciBrZXlib2FyZFxuICAgICAqIGludGVyYWN0aW9uIGRvZXNuJ3QgZ2V0IHN0b2xlbiBieSB0aGUgYWNjb3JkaW9uLiBFeGFtcGxlOiB1c2luZyB1cC9kb3duIGtleXNcbiAgICAgKiBpbiBpb24tdGV4dGFyZWEuXG4gICAgICovXG4gICAgY29uc3QgYWN0aXZlQWNjb3JkaW9uSGVhZGVyID0gYWN0aXZlRWxlbWVudC5jbG9zZXN0KCdpb24tYWNjb3JkaW9uIFtzbG90PVwiaGVhZGVyXCJdJyk7XG4gICAgaWYgKCFhY3RpdmVBY2NvcmRpb25IZWFkZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYWNjb3JkaW9uRWwgPSBhY3RpdmVFbGVtZW50LnRhZ05hbWUgPT09ICdJT04tQUNDT1JESU9OJyA/IGFjdGl2ZUVsZW1lbnQgOiBhY3RpdmVFbGVtZW50LmNsb3Nlc3QoJ2lvbi1hY2NvcmRpb24nKTtcbiAgICBpZiAoIWFjY29yZGlvbkVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNsb3Nlc3RHcm91cCA9IGFjY29yZGlvbkVsLmNsb3Nlc3QoJ2lvbi1hY2NvcmRpb24tZ3JvdXAnKTtcbiAgICBpZiAoY2xvc2VzdEdyb3VwICE9PSB0aGlzLmVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHRoZSBhY3RpdmUgYWNjb3JkaW9uIGlzIG5vdCBpbiB0aGUgY3VycmVudCBhcnJheSBvZiBhY2NvcmRpb25zLCBkbyBub3QgZG8gYW55dGhpbmdcbiAgICBjb25zdCBhY2NvcmRpb25zID0gYXdhaXQgdGhpcy5nZXRBY2NvcmRpb25zKCk7XG4gICAgY29uc3Qgc3RhcnRpbmdJbmRleCA9IGFjY29yZGlvbnMuZmluZEluZGV4KChhKSA9PiBhID09PSBhY2NvcmRpb25FbCk7XG4gICAgaWYgKHN0YXJ0aW5nSW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBhY2NvcmRpb247XG4gICAgaWYgKGV2LmtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIGFjY29yZGlvbiA9IHRoaXMuZmluZE5leHRBY2NvcmRpb24oYWNjb3JkaW9ucywgc3RhcnRpbmdJbmRleCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2LmtleSA9PT0gJ0Fycm93VXAnKSB7XG4gICAgICBhY2NvcmRpb24gPSB0aGlzLmZpbmRQcmV2aW91c0FjY29yZGlvbihhY2NvcmRpb25zLCBzdGFydGluZ0luZGV4KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZXYua2V5ID09PSAnSG9tZScpIHtcbiAgICAgIGFjY29yZGlvbiA9IGFjY29yZGlvbnNbMF07XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2LmtleSA9PT0gJ0VuZCcpIHtcbiAgICAgIGFjY29yZGlvbiA9IGFjY29yZGlvbnNbYWNjb3JkaW9ucy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgaWYgKGFjY29yZGlvbiAhPT0gdW5kZWZpbmVkICYmIGFjY29yZGlvbiAhPT0gYWN0aXZlRWxlbWVudCkge1xuICAgICAgYWNjb3JkaW9uLmZvY3VzKCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGNvbXBvbmVudERpZExvYWQoKSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZGlzYWJsZWRDaGFuZ2VkKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJlYWRvbmx5KSB7XG4gICAgICB0aGlzLnJlYWRvbmx5Q2hhbmdlZCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgcHJvcGVydHkgYW5kIGVtaXRzIGlvbkNoYW5nZS5cbiAgICogVGhpcyBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlbiB0aGUgdXNlciBpbnRlcmFjdHNcbiAgICogd2l0aCB0aGUgYWNjb3JkaW9uIGFuZCBub3QgZm9yIGFueSB1cGRhdGVcbiAgICogdG8gdGhlIHZhbHVlIHByb3BlcnR5LiBUaGUgZXhjZXB0aW9uIGlzIHdoZW5cbiAgICogdGhlIGFwcCBzZXRzIHRoZSB2YWx1ZSBvZiBhIHNpbmdsZS1zZWxlY3RcbiAgICogYWNjb3JkaW9uIGdyb3VwIHRvIGFuIGFycmF5LlxuICAgKi9cbiAgc2V0VmFsdWUoYWNjb3JkaW9uVmFsdWUpIHtcbiAgICBjb25zdCB2YWx1ZSA9ICh0aGlzLnZhbHVlID0gYWNjb3JkaW9uVmFsdWUpO1xuICAgIHRoaXMuaW9uQ2hhbmdlLmVtaXQoeyB2YWx1ZSB9KTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgdXNlZCB0byBlbnN1cmUgdGhhdCB0aGUgdmFsdWVcbiAgICogb2YgaW9uLWFjY29yZGlvbi1ncm91cCBpcyBiZWluZyBzZXQgaW4gYSB2YWxpZFxuICAgKiB3YXkuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBpblxuICAgKiByZXNwb25zZSB0byBhIHVzZXIgZ2VuZXJhdGVkIGFjdGlvbi5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyByZXF1ZXN0QWNjb3JkaW9uVG9nZ2xlKGFjY29yZGlvblZhbHVlLCBhY2NvcmRpb25FeHBhbmQpIHtcbiAgICBjb25zdCB7IG11bHRpcGxlLCB2YWx1ZSwgcmVhZG9ubHksIGRpc2FibGVkIH0gPSB0aGlzO1xuICAgIGlmIChyZWFkb25seSB8fCBkaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYWNjb3JkaW9uRXhwYW5kKSB7XG4gICAgICAvKipcbiAgICAgICAqIElmIGdyb3VwIGFjY2VwdHMgbXVsdGlwbGUgdmFsdWVzXG4gICAgICAgKiBjaGVjayB0byBzZWUgaWYgdmFsdWUgaXMgYWxyZWFkeSBpblxuICAgICAgICogaW4gdmFsdWVzIGFycmF5LiBJZiBub3QsIGFkZCBpdFxuICAgICAgICogdG8gdGhlIGFycmF5LlxuICAgICAgICovXG4gICAgICBpZiAobXVsdGlwbGUpIHtcbiAgICAgICAgY29uc3QgZ3JvdXBWYWx1ZSA9IHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB2b2lkIDAgPyB2YWx1ZSA6IFtdO1xuICAgICAgICBjb25zdCBwcm9jZXNzZWRWYWx1ZSA9IEFycmF5LmlzQXJyYXkoZ3JvdXBWYWx1ZSkgPyBncm91cFZhbHVlIDogW2dyb3VwVmFsdWVdO1xuICAgICAgICBjb25zdCB2YWx1ZUV4aXN0cyA9IHByb2Nlc3NlZFZhbHVlLmZpbmQoKHYpID0+IHYgPT09IGFjY29yZGlvblZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlRXhpc3RzID09PSB1bmRlZmluZWQgJiYgYWNjb3JkaW9uVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuc2V0VmFsdWUoWy4uLnByb2Nlc3NlZFZhbHVlLCBhY2NvcmRpb25WYWx1ZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShhY2NvcmRpb25WYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgLyoqXG4gICAgICAgKiBJZiBjb2xsYXBzaW5nIGFjY29yZGlvbiwgZWl0aGVyIGZpbHRlciB0aGUgdmFsdWVcbiAgICAgICAqIG91dCBvZiB0aGUgdmFsdWVzIGFycmF5IG9yIHVuc2V0IHRoZSB2YWx1ZS5cbiAgICAgICAqL1xuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwVmFsdWUgPSB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwID8gdmFsdWUgOiBbXTtcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkVmFsdWUgPSBBcnJheS5pc0FycmF5KGdyb3VwVmFsdWUpID8gZ3JvdXBWYWx1ZSA6IFtncm91cFZhbHVlXTtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZShwcm9jZXNzZWRWYWx1ZS5maWx0ZXIoKHYpID0+IHYgIT09IGFjY29yZGlvblZhbHVlKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSh1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmaW5kTmV4dEFjY29yZGlvbihhY2NvcmRpb25zLCBzdGFydGluZ0luZGV4KSB7XG4gICAgY29uc3QgbmV4dEFjY29yZGlvbiA9IGFjY29yZGlvbnNbc3RhcnRpbmdJbmRleCArIDFdO1xuICAgIGlmIChuZXh0QWNjb3JkaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBhY2NvcmRpb25zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dEFjY29yZGlvbjtcbiAgfVxuICBmaW5kUHJldmlvdXNBY2NvcmRpb24oYWNjb3JkaW9ucywgc3RhcnRpbmdJbmRleCkge1xuICAgIGNvbnN0IHByZXZBY2NvcmRpb24gPSBhY2NvcmRpb25zW3N0YXJ0aW5nSW5kZXggLSAxXTtcbiAgICBpZiAocHJldkFjY29yZGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYWNjb3JkaW9uc1thY2NvcmRpb25zLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gcHJldkFjY29yZGlvbjtcbiAgfVxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBhc3luYyBnZXRBY2NvcmRpb25zKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gaW9uLWFjY29yZGlvbicpKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBkaXNhYmxlZCwgcmVhZG9ubHksIGV4cGFuZCB9ID0gdGhpcztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICByZXR1cm4gKGgoSG9zdCwgeyBjbGFzczoge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICdhY2NvcmRpb24tZ3JvdXAtZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgJ2FjY29yZGlvbi1ncm91cC1yZWFkb25seSc6IHJlYWRvbmx5LFxuICAgICAgICBbYGFjY29yZGlvbi1ncm91cC1leHBhbmQtJHtleHBhbmR9YF06IHRydWUsXG4gICAgICB9LCByb2xlOiBcInByZXNlbnRhdGlvblwiIH0sIGgoXCJzbG90XCIsIG51bGwpKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxuICBzdGF0aWMgZ2V0IHdhdGNoZXJzKCkgeyByZXR1cm4ge1xuICAgIFwidmFsdWVcIjogW1widmFsdWVDaGFuZ2VkXCJdLFxuICAgIFwiZGlzYWJsZWRcIjogW1wiZGlzYWJsZWRDaGFuZ2VkXCJdLFxuICAgIFwicmVhZG9ubHlcIjogW1wicmVhZG9ubHlDaGFuZ2VkXCJdXG4gIH07IH1cbn07XG5BY2NvcmRpb25Hcm91cC5zdHlsZSA9IHtcbiAgaW9zOiBhY2NvcmRpb25Hcm91cElvc0NzcyxcbiAgbWQ6IGFjY29yZGlvbkdyb3VwTWRDc3Ncbn07XG5cbmV4cG9ydCB7IEFjY29yZGlvbiBhcyBpb25fYWNjb3JkaW9uLCBBY2NvcmRpb25Hcm91cCBhcyBpb25fYWNjb3JkaW9uX2dyb3VwIH07XG4iXSwibmFtZXMiOlsiciIsInJlZ2lzdGVySW5zdGFuY2UiLCJoIiwiSCIsIkhvc3QiLCJmIiwiZ2V0RWxlbWVudCIsImQiLCJjcmVhdGVFdmVudCIsImwiLCJjaGV2cm9uRG93biIsImMiLCJjb25maWciLCJiIiwiZ2V0SW9uTW9kZSIsInJhZiIsInQiLCJ0cmFuc2l0aW9uRW5kQXN5bmMiLCJhIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnIiwiZ2V0RWxlbWVudFJvb3QiLCJwIiwicHJpbnRJb25XYXJuaW5nIiwiYWNjb3JkaW9uSW9zQ3NzIiwiYWNjb3JkaW9uTWRDc3MiLCJBY2NvcmRpb24iLCJjb25zdHJ1Y3RvciIsImhvc3RSZWYiLCJfdGhpcyIsInVwZGF0ZUxpc3RlbmVyIiwidXBkYXRlU3RhdGUiLCJzZXRJdGVtRGVmYXVsdHMiLCJpb25JdGVtIiwiZ2V0U2xvdHRlZEhlYWRlcklvbkl0ZW0iLCJidXR0b24iLCJkZXRhaWwiLCJsaW5lcyIsInVuZGVmaW5lZCIsImhlYWRlckVsIiwic2xvdCIsInF1ZXJ5U2VsZWN0b3IiLCJhc3NpZ25lZEVsZW1lbnRzIiwiZmluZCIsImVsIiwidGFnTmFtZSIsInNldEFyaWEiLCJleHBhbmRlZCIsInJvb3QiLCJzZXRBdHRyaWJ1dGUiLCJzbG90VG9nZ2xlSWNvbiIsInRvZ2dsZUljb25TbG90IiwidG9nZ2xlSWNvbiIsImV4aXN0aW5nVG9nZ2xlSWNvbiIsImljb25FbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImxhenkiLCJjbGFzc0xpc3QiLCJhZGQiLCJpY29uIiwiYXBwZW5kQ2hpbGQiLCJleHBhbmRBY2NvcmRpb24iLCJpbml0aWFsVXBkYXRlIiwiY29udGVudEVsIiwiY29udGVudEVsV3JhcHBlciIsInN0YXRlIiwiY3VycmVudFJhZiIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2hvdWxkQW5pbWF0ZSIsIl9hc3luY1RvR2VuZXJhdG9yIiwiY29udGVudEhlaWdodCIsIm9mZnNldEhlaWdodCIsIndhaXRGb3JUcmFuc2l0aW9uIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInJlbW92ZVByb3BlcnR5IiwiY29sbGFwc2VBY2NvcmRpb24iLCJ3aW5kb3ciLCJwcmVmZXJzUmVkdWNlZE1vdGlvbiIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiYW5pbWF0ZWQiLCJnZXQiLCJhY2NvcmRpb25Hcm91cEVsIiwiYWNjb3JkaW9uR3JvdXAiLCJhY2NvcmRpb25WYWx1ZSIsInZhbHVlIiwic2hvdWxkRXhwYW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5jbHVkZXMiLCJpc05leHQiLCJpc1ByZXZpb3VzIiwibmV4dEFjY29yZGlvbiIsImdldE5leHRTaWJsaW5nIiwibmV4dEFjY29yZGlvblZhbHVlIiwicHJldmlvdXNBY2NvcmRpb24iLCJnZXRQcmV2aW91c1NpYmxpbmciLCJwcmV2aW91c0FjY29yZGlvblZhbHVlIiwibmV4dFNpYmxpbmciLCJuZXh0RWxlbWVudFNpYmxpbmciLCJwcmV2aW91c1NpYmxpbmciLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiYWNjb3JkaW9uSWRzIiwiZGlzYWJsZWQiLCJyZWFkb25seSIsImNvbm5lY3RlZENhbGxiYWNrIiwiX2EiLCJjbG9zZXN0IiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJjb21wb25lbnREaWRMb2FkIiwidG9nZ2xlRXhwYW5kZWQiLCJleHBhbmQiLCJyZXF1ZXN0QWNjb3JkaW9uVG9nZ2xlIiwicmVuZGVyIiwibW9kZSIsImhlYWRlclBhcnQiLCJjb250ZW50UGFydCIsImNsYXNzIiwiZ2V0Qm9vbGVhbiIsIm9uQ2xpY2siLCJpZCIsInBhcnQiLCJyZWYiLCJuYW1lIiwicm9sZSIsImRlbGVnYXRlc0ZvY3VzIiwiaW9zIiwibWQiLCJhY2NvcmRpb25Hcm91cElvc0NzcyIsImFjY29yZGlvbkdyb3VwTWRDc3MiLCJBY2NvcmRpb25Hcm91cCIsImlvbkNoYW5nZSIsImlvblZhbHVlQ2hhbmdlIiwibXVsdGlwbGUiLCJ2YWx1ZUNoYW5nZWQiLCJtYXAiLCJ2Iiwiam9pbiIsImVtaXQiLCJkaXNhYmxlZENoYW5nZWQiLCJfdGhpczIiLCJhY2NvcmRpb25zIiwiZ2V0QWNjb3JkaW9ucyIsImFjY29yZGlvbiIsInJlYWRvbmx5Q2hhbmdlZCIsIl90aGlzMyIsIm9uS2V5ZG93biIsImV2IiwiX3RoaXM0IiwiYWN0aXZlRWxlbWVudCIsImFjdGl2ZUFjY29yZGlvbkhlYWRlciIsImFjY29yZGlvbkVsIiwiY2xvc2VzdEdyb3VwIiwic3RhcnRpbmdJbmRleCIsImZpbmRJbmRleCIsImtleSIsImZpbmROZXh0QWNjb3JkaW9uIiwiZmluZFByZXZpb3VzQWNjb3JkaW9uIiwibGVuZ3RoIiwiZm9jdXMiLCJfdGhpczUiLCJzZXRWYWx1ZSIsImFjY29yZGlvbkV4cGFuZCIsIl90aGlzNiIsImdyb3VwVmFsdWUiLCJwcm9jZXNzZWRWYWx1ZSIsInZhbHVlRXhpc3RzIiwiZmlsdGVyIiwicHJldkFjY29yZGlvbiIsIl90aGlzNyIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwid2F0Y2hlcnMiLCJpb25fYWNjb3JkaW9uIiwiaW9uX2FjY29yZGlvbl9ncm91cCJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMF19