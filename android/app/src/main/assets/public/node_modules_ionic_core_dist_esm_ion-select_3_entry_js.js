"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-select_3_entry_js"],{

/***/ 8704:
/*!***********************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/form-controller-6cd7ebd1.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createLegacyFormController)
/* harmony export */ });
/* harmony import */ var _helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers-f586db1c.js */ 75272);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */


/**
 * Creates a controller that tracks whether a form control is using the legacy or modern syntax. This should be removed when the legacy form control syntax is removed.
 *
 * @internal
 * @prop el: The Ionic form component to reference
 */
const createLegacyFormController = el => {
  const controlEl = el;
  let legacyControl;
  const hasLegacyControl = () => {
    if (legacyControl === undefined) {
      /**
       * Detect if developers are using the legacy form control syntax
       * so a deprecation warning is logged. This warning can be disabled
       * by either using the new `label` property or setting `aria-label`
       * on the control.
       * Alternatively, components that use a slot for the label
       * can check to see if the component has slotted text
       * in the light DOM.
       */
      const hasLabelProp = controlEl.label !== undefined || hasLabelSlot(controlEl);
      const hasAriaLabelAttribute = controlEl.hasAttribute('aria-label') ||
      // Shadow DOM form controls cannot use aria-labelledby
      controlEl.hasAttribute('aria-labelledby') && controlEl.shadowRoot === null;
      const legacyItemLabel = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_0__.h)(controlEl);
      /**
       * Developers can manually opt-out of the modern form markup
       * by setting `legacy="true"` on components.
       */
      legacyControl = controlEl.legacy === true || !hasLabelProp && !hasAriaLabelAttribute && legacyItemLabel !== null;
    }
    return legacyControl;
  };
  return {
    hasLegacyControl
  };
};
const hasLabelSlot = controlEl => {
  const root = controlEl.shadowRoot;
  if (root === null) {
    return false;
  }
  /**
   * Components that have a named label slot
   * also have other slots, so we need to query for
   * anything that is explicitly passed to slot="label"
   */
  if (NAMED_LABEL_SLOT_COMPONENTS.includes(controlEl.tagName) && controlEl.querySelector('[slot="label"]') !== null) {
    return true;
  }
  /**
   * Components that have an unnamed slot for the label
   * have no other slots, so we can check the textContent
   * of the element.
   */
  if (UNNAMED_LABEL_SLOT_COMPONENTS.includes(controlEl.tagName) && controlEl.textContent !== '') {
    return true;
  }
  return false;
};
const NAMED_LABEL_SLOT_COMPONENTS = ['ION-RANGE'];
const UNNAMED_LABEL_SLOT_COMPONENTS = ['ION-TOGGLE', 'ION-CHECKBOX', 'ION-RADIO'];


/***/ }),

/***/ 49870:
/*!*****************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-select_3.entry.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ion_select: () => (/* binding */ Select),
/* harmony export */   ion_select_option: () => (/* binding */ SelectOption),
/* harmony export */   ion_select_popover: () => (/* binding */ SelectPopover)
/* harmony export */ });
/* harmony import */ var C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-36a5fd75.js */ 78705);
/* harmony import */ var _form_controller_6cd7ebd1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./form-controller-6cd7ebd1.js */ 8704);
/* harmony import */ var _notch_controller_cfcb8c01_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notch-controller-cfcb8c01.js */ 63510);
/* harmony import */ var _helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers-f586db1c.js */ 75272);
/* harmony import */ var _index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./index-e86f0117.js */ 50123);
/* harmony import */ var _overlays_4101c476_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./overlays-4101c476.js */ 18426);
/* harmony import */ var _dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dir-e8b767a8.js */ 65094);
/* harmony import */ var _theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./theme-7670341c.js */ 51257);
/* harmony import */ var _watch_options_4d421847_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./watch-options-4d421847.js */ 90370);
/* harmony import */ var _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index-393bc14a.js */ 7654);
/* harmony import */ var _ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ionic-global-a9abd569.js */ 74771);
/* harmony import */ var _index_b32cad98_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./index-b32cad98.js */ 38815);
/* harmony import */ var _framework_delegate_6a45ed30_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./framework-delegate-6a45ed30.js */ 78098);
/* harmony import */ var _hardware_back_button_490df115_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./hardware-back-button-490df115.js */ 46832);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */














const selectIosCss = ":host{--padding-top:0px;--padding-end:0px;--padding-bottom:0px;--padding-start:0px;--placeholder-color:currentColor;--placeholder-opacity:0.6;--background:transparent;--border-style:solid;--highlight-color-focused:var(--ion-color-primary, #3880ff);--highlight-color-valid:var(--ion-color-success, #2dd36f);--highlight-color-invalid:var(--ion-color-danger, #eb445a);--highlight-color:var(--highlight-color-focused);display:block;position:relative;font-family:var(--ion-font-family, inherit);white-space:nowrap;cursor:pointer;z-index:2}:host(:not(.legacy-select)){width:100%}:host(.ion-color){--highlight-color-focused:var(--ion-color-base)}:host(.legacy-select){-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;overflow:hidden}:host(.in-item.legacy-select){position:static;max-width:45%}:host(.select-disabled){pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}:host([slot=start]:not(.legacy-select)),:host([slot=end]:not(.legacy-select)){width:auto}.select-placeholder{color:var(--placeholder-color);opacity:var(--placeholder-opacity)}:host(.legacy-select) label{top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}@supports (inset-inline-start: 0){:host(.legacy-select) label{inset-inline-start:0}}@supports not (inset-inline-start: 0){:host(.legacy-select) label{left:0}:host-context([dir=rtl]):host(.legacy-select) label,:host-context([dir=rtl]).legacy-select label{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){:host(.legacy-select) label:dir(rtl){left:unset;right:unset;right:0}}}:host(.legacy-select) label::-moz-focus-inner{border:0}button{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.select-icon{-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:0;margin-inline-end:0;margin-top:0;margin-bottom:0;position:relative}:host(.in-item-color) .select-icon{color:inherit}:host(.select-label-placement-stacked) .select-icon,:host(.select-label-placement-floating) .select-icon{position:absolute;height:100%}:host(.select-ltr.select-label-placement-stacked) .select-icon,:host(.select-ltr.select-label-placement-floating) .select-icon{right:var(--padding-end, 0)}:host(.select-rtl.select-label-placement-stacked) .select-icon,:host(.select-rtl.select-label-placement-floating) .select-icon{left:var(--padding-start, 0)}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:inherit;overflow:hidden}.select-wrapper{-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;height:inherit;min-height:inherit;-webkit-transition:background-color 15ms linear;transition:background-color 15ms linear;background:var(--background);line-height:normal;cursor:inherit;-webkit-box-sizing:border-box;box-sizing:border-box}.select-wrapper .select-placeholder{-webkit-transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}:host(.ion-touched.ion-invalid){--highlight-color:var(--highlight-color-invalid)}:host(.ion-valid){--highlight-color:var(--highlight-color-valid)}.label-text-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;max-width:200px;-webkit-transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 150ms cubic-bezier(0.4, 0, 0.2, 1);pointer-events:none}.label-text,::slotted([slot=label]){text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.label-text-wrapper-hidden,.select-outline-notch-hidden{display:none}.native-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-webkit-transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);overflow:hidden}:host(.select-justify-space-between) .select-wrapper{-ms-flex-pack:justify;justify-content:space-between}:host(.select-justify-start) .select-wrapper{-ms-flex-pack:start;justify-content:start}:host(.select-justify-end) .select-wrapper{-ms-flex-pack:end;justify-content:end}:host(.select-label-placement-start) .select-wrapper{-ms-flex-direction:row;flex-direction:row}:host(.select-label-placement-start) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:0;margin-bottom:0}:host(.select-label-placement-end) .select-wrapper{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.select-label-placement-end) .label-text-wrapper{-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:0;margin-inline-end:0;margin-top:0;margin-bottom:0}:host(.select-label-placement-fixed) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:0;margin-bottom:0}:host(.select-label-placement-fixed) .label-text-wrapper{-ms-flex:0 0 100px;flex:0 0 100px;width:100px;min-width:100px;max-width:200px}:host(.select-label-placement-stacked) .select-wrapper,:host(.select-label-placement-floating) .select-wrapper{-ms-flex-direction:column;flex-direction:column;-ms-flex-align:start;align-items:start}:host(.select-label-placement-stacked) .label-text-wrapper,:host(.select-label-placement-floating) .label-text-wrapper{max-width:100%}:host(.select-ltr.select-label-placement-stacked) .label-text-wrapper,:host(.select-ltr.select-label-placement-floating) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host(.select-rtl.select-label-placement-stacked) .label-text-wrapper,:host(.select-rtl.select-label-placement-floating) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}:host(.select-label-placement-stacked) .native-wrapper,:host(.select-label-placement-floating) .native-wrapper{margin-left:0;margin-right:0;margin-top:1px;margin-bottom:0;-ms-flex-positive:1;flex-grow:1;width:100%}:host(.select-label-placement-floating) .label-text-wrapper{-webkit-transform:translateY(100%) scale(1);transform:translateY(100%) scale(1)}:host(.select-label-placement-floating) .native-wrapper .select-placeholder{opacity:0}:host(.select-expanded.select-label-placement-floating) .native-wrapper .select-placeholder,:host(.ion-focused.select-label-placement-floating) .native-wrapper .select-placeholder,:host(.has-value.select-label-placement-floating) .native-wrapper .select-placeholder{opacity:1}:host(.select-label-placement-stacked) .label-text-wrapper,:host(.select-expanded.select-label-placement-floating) .label-text-wrapper,:host(.ion-focused.select-label-placement-floating) .label-text-wrapper,:host(.has-value.select-label-placement-floating) .label-text-wrapper{-webkit-transform:translateY(50%) scale(0.75);transform:translateY(50%) scale(0.75);max-width:calc(100% / 0.75)}:host(.legacy-select){--padding-top:10px;--padding-end:8px;--padding-bottom:10px;--padding-start:16px}:host(:not(.legacy-select)){min-height:44px}:host(.select-label-placement-floating),:host(.select-label-placement-stacked){min-height:56px}.select-icon{width:18px;height:18px;color:var(--ion-color-step-650, #595959)}:host(.select-label-placement-stacked) .native-wrapper,:host(.select-label-placement-floating) .native-wrapper{width:calc(100% - 18px - 4px)}:host(.select-disabled){opacity:0.3}";
const selectMdCss = ":host{--padding-top:0px;--padding-end:0px;--padding-bottom:0px;--padding-start:0px;--placeholder-color:currentColor;--placeholder-opacity:0.6;--background:transparent;--border-style:solid;--highlight-color-focused:var(--ion-color-primary, #3880ff);--highlight-color-valid:var(--ion-color-success, #2dd36f);--highlight-color-invalid:var(--ion-color-danger, #eb445a);--highlight-color:var(--highlight-color-focused);display:block;position:relative;font-family:var(--ion-font-family, inherit);white-space:nowrap;cursor:pointer;z-index:2}:host(:not(.legacy-select)){width:100%}:host(.ion-color){--highlight-color-focused:var(--ion-color-base)}:host(.legacy-select){-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;overflow:hidden}:host(.in-item.legacy-select){position:static;max-width:45%}:host(.select-disabled){pointer-events:none}:host(.ion-focused) button{border:2px solid #5e9ed6}:host([slot=start]:not(.legacy-select)),:host([slot=end]:not(.legacy-select)){width:auto}.select-placeholder{color:var(--placeholder-color);opacity:var(--placeholder-opacity)}:host(.legacy-select) label{top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none;display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;opacity:0}@supports (inset-inline-start: 0){:host(.legacy-select) label{inset-inline-start:0}}@supports not (inset-inline-start: 0){:host(.legacy-select) label{left:0}:host-context([dir=rtl]):host(.legacy-select) label,:host-context([dir=rtl]).legacy-select label{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){:host(.legacy-select) label:dir(rtl){left:unset;right:unset;right:0}}}:host(.legacy-select) label::-moz-focus-inner{border:0}button{position:absolute;top:0;left:0;right:0;bottom:0;width:100%;height:100%;margin:0;padding:0;border:0;outline:0;clip:rect(0 0 0 0);opacity:0;overflow:hidden;-webkit-appearance:none;-moz-appearance:none}.select-icon{-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:0;margin-inline-end:0;margin-top:0;margin-bottom:0;position:relative}:host(.in-item-color) .select-icon{color:inherit}:host(.select-label-placement-stacked) .select-icon,:host(.select-label-placement-floating) .select-icon{position:absolute;height:100%}:host(.select-ltr.select-label-placement-stacked) .select-icon,:host(.select-ltr.select-label-placement-floating) .select-icon{right:var(--padding-end, 0)}:host(.select-rtl.select-label-placement-stacked) .select-icon,:host(.select-rtl.select-label-placement-floating) .select-icon{left:var(--padding-start, 0)}.select-text{-ms-flex:1;flex:1;min-width:16px;font-size:inherit;text-overflow:ellipsis;white-space:inherit;overflow:hidden}.select-wrapper{-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;height:inherit;min-height:inherit;-webkit-transition:background-color 15ms linear;transition:background-color 15ms linear;background:var(--background);line-height:normal;cursor:inherit;-webkit-box-sizing:border-box;box-sizing:border-box}.select-wrapper .select-placeholder{-webkit-transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1)}:host(.ion-touched.ion-invalid){--highlight-color:var(--highlight-color-invalid)}:host(.ion-valid){--highlight-color:var(--highlight-color-valid)}.label-text-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;max-width:200px;-webkit-transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 150ms cubic-bezier(0.4, 0, 0.2, 1);pointer-events:none}.label-text,::slotted([slot=label]){text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.label-text-wrapper-hidden,.select-outline-notch-hidden{display:none}.native-wrapper{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-webkit-transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);overflow:hidden}:host(.select-justify-space-between) .select-wrapper{-ms-flex-pack:justify;justify-content:space-between}:host(.select-justify-start) .select-wrapper{-ms-flex-pack:start;justify-content:start}:host(.select-justify-end) .select-wrapper{-ms-flex-pack:end;justify-content:end}:host(.select-label-placement-start) .select-wrapper{-ms-flex-direction:row;flex-direction:row}:host(.select-label-placement-start) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:0;margin-bottom:0}:host(.select-label-placement-end) .select-wrapper{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.select-label-placement-end) .label-text-wrapper{-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:0;margin-inline-end:0;margin-top:0;margin-bottom:0}:host(.select-label-placement-fixed) .label-text-wrapper{-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:16px;margin-inline-end:16px;margin-top:0;margin-bottom:0}:host(.select-label-placement-fixed) .label-text-wrapper{-ms-flex:0 0 100px;flex:0 0 100px;width:100px;min-width:100px;max-width:200px}:host(.select-label-placement-stacked) .select-wrapper,:host(.select-label-placement-floating) .select-wrapper{-ms-flex-direction:column;flex-direction:column;-ms-flex-align:start;align-items:start}:host(.select-label-placement-stacked) .label-text-wrapper,:host(.select-label-placement-floating) .label-text-wrapper{max-width:100%}:host(.select-ltr.select-label-placement-stacked) .label-text-wrapper,:host(.select-ltr.select-label-placement-floating) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host(.select-rtl.select-label-placement-stacked) .label-text-wrapper,:host(.select-rtl.select-label-placement-floating) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}:host(.select-label-placement-stacked) .native-wrapper,:host(.select-label-placement-floating) .native-wrapper{margin-left:0;margin-right:0;margin-top:1px;margin-bottom:0;-ms-flex-positive:1;flex-grow:1;width:100%}:host(.select-label-placement-floating) .label-text-wrapper{-webkit-transform:translateY(100%) scale(1);transform:translateY(100%) scale(1)}:host(.select-label-placement-floating) .native-wrapper .select-placeholder{opacity:0}:host(.select-expanded.select-label-placement-floating) .native-wrapper .select-placeholder,:host(.ion-focused.select-label-placement-floating) .native-wrapper .select-placeholder,:host(.has-value.select-label-placement-floating) .native-wrapper .select-placeholder{opacity:1}:host(.select-label-placement-stacked) .label-text-wrapper,:host(.select-expanded.select-label-placement-floating) .label-text-wrapper,:host(.ion-focused.select-label-placement-floating) .label-text-wrapper,:host(.has-value.select-label-placement-floating) .label-text-wrapper{-webkit-transform:translateY(50%) scale(0.75);transform:translateY(50%) scale(0.75);max-width:calc(100% / 0.75)}:host(.select-fill-solid){--background:var(--ion-color-step-50, #f2f2f2);--border-color:var(--ion-color-step-500, gray);--border-radius:4px;--padding-start:16px;--padding-end:16px}:host(.select-fill-solid) .select-wrapper{border-bottom:var(--border-width) var(--border-style) var(--border-color)}:host(.has-focus.select-fill-solid.ion-valid),:host(.select-fill-solid.ion-touched.ion-invalid){--border-color:var(--highlight-color)}:host(.select-fill-solid) .select-bottom{border-top:none}@media (any-hover: hover){:host(.select-fill-solid:hover){--background:var(--ion-color-step-100, #e6e6e6);--border-color:var(--ion-color-step-750, #404040)}}:host(.select-fill-solid.select-expanded),:host(.select-fill-solid.ion-focused){--background:var(--ion-color-step-150, #d9d9d9);--border-color:var(--ion-color-step-750, #404040)}:host(.select-fill-solid) .select-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0px;border-bottom-left-radius:0px}:host-context([dir=rtl]):host(.select-fill-solid) .select-wrapper,:host-context([dir=rtl]).select-fill-solid .select-wrapper{border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0px;border-bottom-left-radius:0px}@supports selector(:dir(rtl)){:host(.select-fill-solid) .select-wrapper:dir(rtl){border-top-left-radius:var(--border-radius);border-top-right-radius:var(--border-radius);border-bottom-right-radius:0px;border-bottom-left-radius:0px}}:host(.select-fill-solid.select-label-placement-stacked) .label-text-wrapper,:host(.select-expanded.select-fill-solid.select-label-placement-floating) .label-text-wrapper,:host(.ion-focused.select-fill-solid.select-label-placement-floating) .label-text-wrapper,:host(.has-value.select-fill-solid.select-label-placement-floating) .label-text-wrapper{max-width:calc(100% / 0.75)}:host(.select-fill-outline){--border-color:var(--ion-color-step-300, #b3b3b3);--border-radius:4px;--padding-start:16px;--padding-end:16px}:host(.select-fill-outline.select-shape-round){--border-radius:28px;--padding-start:32px;--padding-end:32px}:host(.has-focus.select-fill-outline.ion-valid),:host(.select-fill-outline.ion-touched.ion-invalid){--border-color:var(--highlight-color)}@media (any-hover: hover){:host(.select-fill-outline:hover){--border-color:var(--ion-color-step-750, #404040)}}:host(.select-fill-outline.select-expanded),:host(.select-fill-outline.ion-focused){--border-width:2px;--border-color:var(--highlight-color)}:host(.select-fill-outline) .select-bottom{border-top:none}:host(.select-fill-outline) .select-wrapper{border-bottom:none}:host(.select-ltr.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,:host(.select-ltr.select-fill-outline.select-label-placement-floating) .label-text-wrapper{-webkit-transform-origin:left top;transform-origin:left top}:host(.select-rtl.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,:host(.select-rtl.select-fill-outline.select-label-placement-floating) .label-text-wrapper{-webkit-transform-origin:right top;transform-origin:right top}:host(.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,:host(.select-fill-outline.select-label-placement-floating) .label-text-wrapper{position:absolute;max-width:calc(100% - var(--padding-start) - var(--padding-end))}:host(.select-fill-outline) .label-text-wrapper{position:relative;z-index:1}:host(.select-expanded.select-fill-outline.select-label-placement-floating) .label-text-wrapper,:host(.ion-focused.select-fill-outline.select-label-placement-floating) .label-text-wrapper,:host(.has-value.select-fill-outline.select-label-placement-floating) .label-text-wrapper,:host(.select-fill-outline.select-label-placement-stacked) .label-text-wrapper{-webkit-transform:translateY(-32%) scale(0.75);transform:translateY(-32%) scale(0.75);margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;max-width:calc((100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75)}:host(.select-fill-outline.select-label-placement-stacked) select,:host(.select-fill-outline.select-label-placement-floating) select{margin-left:0;margin-right:0;margin-top:6px;margin-bottom:6px}:host(.select-fill-outline) .select-outline-container{left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;width:100%;height:100%}:host(.select-fill-outline) .select-outline-start,:host(.select-fill-outline) .select-outline-end{pointer-events:none}:host(.select-fill-outline) .select-outline-start,:host(.select-fill-outline) .select-outline-notch,:host(.select-fill-outline) .select-outline-end{border-top:var(--border-width) var(--border-style) var(--border-color);border-bottom:var(--border-width) var(--border-style) var(--border-color);-webkit-box-sizing:border-box;box-sizing:border-box}:host(.select-fill-outline) .select-outline-notch{max-width:calc(100% - var(--padding-start) - var(--padding-end))}:host(.select-fill-outline) .notch-spacer{-webkit-padding-end:8px;padding-inline-end:8px;font-size:calc(1em * 0.75);opacity:0;pointer-events:none}:host(.select-ltr.select-fill-outline) .select-outline-start{border-left:var(--border-width) var(--border-style) var(--border-color);border-radius:var(--border-radius) 0px 0px var(--border-radius)}:host(.select-rtl.select-fill-outline) .select-outline-start{border-right:var(--border-width) var(--border-style) var(--border-color);border-radius:0px var(--border-radius) var(--border-radius) 0px}:host(.select-fill-outline) .select-outline-start{width:calc(var(--padding-start) - 4px)}:host(.select-ltr.select-fill-outline) .select-outline-end{border-right:var(--border-width) var(--border-style) var(--border-color);border-radius:0px var(--border-radius) var(--border-radius) 0px}:host(.select-rtl.select-fill-outline) .select-outline-end{border-left:var(--border-width) var(--border-style) var(--border-color);border-radius:var(--border-radius) 0px 0px var(--border-radius)}:host(.select-fill-outline) .select-outline-end{-ms-flex-positive:1;flex-grow:1}:host(.select-expanded.select-fill-outline.select-label-placement-floating) .select-outline-notch,:host(.ion-focused.select-fill-outline.select-label-placement-floating) .select-outline-notch,:host(.has-value.select-fill-outline.select-label-placement-floating) .select-outline-notch,:host(.select-fill-outline.select-label-placement-stacked) .select-outline-notch{border-top:none}:host{--border-width:1px;--border-color:var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, rgba(0, 0, 0, 0.13))))}:host(.legacy-select){--padding-top:10px;--padding-end:0;--padding-bottom:10px;--padding-start:16px}:host(:not(.legacy-select)){min-height:56px}.select-icon{width:13px;-webkit-transition:-webkit-transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);transition:-webkit-transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);transition:transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);transition:transform 0.15s cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);color:var(--ion-color-step-500, gray)}:host(.select-label-placement-floating.select-expanded) .label-text-wrapper,:host(.select-label-placement-floating.ion-focused) .label-text-wrapper,:host(.select-label-placement-stacked.select-expanded) .label-text-wrapper,:host(.select-label-placement-stacked.ion-focused) .label-text-wrapper{color:var(--highlight-color)}:host(.has-focus.select-label-placement-floating.ion-valid) .label-text-wrapper,:host(.select-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,:host(.has-focus.select-label-placement-stacked.ion-valid) .label-text-wrapper,:host(.select-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper{color:var(--highlight-color)}.select-highlight{bottom:-1px;position:absolute;width:100%;height:2px;-webkit-transform:scale(0);transform:scale(0);-webkit-transition:-webkit-transform 200ms;transition:-webkit-transform 200ms;transition:transform 200ms;transition:transform 200ms, -webkit-transform 200ms;background:var(--highlight-color)}@supports (inset-inline-start: 0){.select-highlight{inset-inline-start:0}}@supports not (inset-inline-start: 0){.select-highlight{left:0}:host-context([dir=rtl]) .select-highlight{left:unset;right:unset;right:0}[dir=rtl] .select-highlight{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){.select-highlight:dir(rtl){left:unset;right:unset;right:0}}}:host(.select-expanded) .select-highlight,:host(.ion-focused) .select-highlight{-webkit-transform:scale(1);transform:scale(1)}:host(.in-item) .select-highlight{bottom:0}@supports (inset-inline-start: 0){:host(.in-item) .select-highlight{inset-inline-start:0}}@supports not (inset-inline-start: 0){:host(.in-item) .select-highlight{left:0}:host-context([dir=rtl]):host(.in-item) .select-highlight,:host-context([dir=rtl]).in-item .select-highlight{left:unset;right:unset;right:0}@supports selector(:dir(rtl)){:host(.in-item) .select-highlight:dir(rtl){left:unset;right:unset;right:0}}}:host(.select-expanded:not(.legacy-select):not(.has-expanded-icon)) .select-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}:host(.select-expanded) .select-wrapper .select-icon,:host(.has-focus.ion-valid) .select-wrapper .select-icon,:host(.ion-touched.ion-invalid) .select-wrapper .select-icon,:host(.ion-focused) .select-wrapper .select-icon{color:var(--highlight-color)}:host-context(.item-label-stacked) .select-icon,:host-context(.item-label-floating:not(.item-fill-outline)) .select-icon,:host-context(.item-label-floating.item-fill-outline){-webkit-transform:translate3d(0,  -9px,  0);transform:translate3d(0,  -9px,  0)}:host-context(.item-has-focus):host(:not(.has-expanded-icon)) .select-icon{-webkit-transform:rotate(180deg);transform:rotate(180deg)}:host-context(.item-has-focus.item-label-stacked):host(:not(.has-expanded-icon)) .select-icon,:host-context(.item-has-focus.item-label-floating:not(.item-fill-outline)):host(:not(.has-expanded-icon)) .select-icon{-webkit-transform:translate3d(0,  -9px,  0) rotate(180deg);transform:translate3d(0,  -9px,  0) rotate(180deg)}:host(.select-shape-round){--border-radius:16px}:host(.select-label-placement-stacked) .native-wrapper,:host(.select-label-placement-floating) .native-wrapper{width:calc(100% - 13px - 4px)}:host(.select-disabled){opacity:0.38}";
const Select = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionChange = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionChange", 7);
    this.ionCancel = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionCancel", 7);
    this.ionDismiss = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionDismiss", 7);
    this.ionFocus = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionFocus", 7);
    this.ionBlur = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionBlur", 7);
    this.ionStyle = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionStyle", 7);
    this.inputId = `ion-sel-${selectIds++}`;
    this.inheritedAttributes = {};
    // This flag ensures we log the deprecation warning at most once.
    this.hasLoggedDeprecationWarning = false;
    this.onClick = ev => {
      this.setFocus();
      this.open(ev);
    };
    this.onFocus = () => {
      this.ionFocus.emit();
    };
    this.onBlur = () => {
      this.ionBlur.emit();
    };
    this.isExpanded = false;
    this.cancelText = 'Cancel';
    this.color = undefined;
    this.compareWith = undefined;
    this.disabled = false;
    this.fill = undefined;
    this.interface = 'alert';
    this.interfaceOptions = {};
    this.justify = 'space-between';
    this.label = undefined;
    this.labelPlacement = 'start';
    this.legacy = undefined;
    this.multiple = false;
    this.name = this.inputId;
    this.okText = 'OK';
    this.placeholder = undefined;
    this.selectedText = undefined;
    this.toggleIcon = undefined;
    this.expandedIcon = undefined;
    this.shape = undefined;
    this.value = undefined;
  }
  styleChanged() {
    this.emitStyle();
  }
  setValue(value) {
    this.value = value;
    this.ionChange.emit({
      value
    });
  }
  componentWillLoad() {
    this.inheritedAttributes = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.k)(this.el, ['aria-label']);
  }
  connectedCallback() {
    var _this = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        el
      } = _this;
      _this.legacyFormController = (0,_form_controller_6cd7ebd1_js__WEBPACK_IMPORTED_MODULE_2__.c)(el);
      _this.notchController = (0,_notch_controller_cfcb8c01_js__WEBPACK_IMPORTED_MODULE_3__.c)(el, () => _this.notchSpacerEl, () => _this.labelSlot);
      _this.updateOverlayOptions();
      _this.emitStyle();
      _this.mutationO = (0,_watch_options_4d421847_js__WEBPACK_IMPORTED_MODULE_9__.w)(_this.el, 'ion-select-option', /*#__PURE__*/(0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
        _this.updateOverlayOptions();
        /**
         * We need to re-render the component
         * because one of the new ion-select-option
         * elements may match the value. In this case,
         * the rendered selected text should be updated.
         */
        (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.i)(_this);
      }));
    })();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
    if (this.notchController) {
      this.notchController.destroy();
      this.notchController = undefined;
    }
  }
  /**
   * Open the select overlay. The overlay is either an alert, action sheet, or popover,
   * depending on the `interface` property on the `ion-select`.
   *
   * @param event The user interface event that called the open.
   */
  open(event) {
    var _this2 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this2.disabled || _this2.isExpanded) {
        return undefined;
      }
      _this2.isExpanded = true;
      const overlay = _this2.overlay = yield _this2.createOverlay(event);
      overlay.onDidDismiss().then(() => {
        _this2.overlay = undefined;
        _this2.isExpanded = false;
        _this2.ionDismiss.emit();
        _this2.setFocus();
      });
      yield overlay.present();
      // focus selected option for popovers
      if (_this2.interface === 'popover') {
        let indexOfSelected = _this2.childOpts.map(o => o.value).indexOf(_this2.value);
        indexOfSelected = indexOfSelected > -1 ? indexOfSelected : 0; // default to first option if nothing selected
        const selectedItem = overlay.querySelector(`.select-interface-option:nth-child(${indexOfSelected + 1})`);
        if (selectedItem) {
          (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.f)(selectedItem);
          /**
           * Browsers such as Firefox do not
           * correctly delegate focus when manually
           * focusing an element with delegatesFocus.
           * We work around this by manually focusing
           * the interactive element.
           * ion-radio and ion-checkbox are the only
           * elements that ion-select-popover uses, so
           * we only need to worry about those two components
           * when focusing.
           */
          const interactiveEl = selectedItem.querySelector('ion-radio, ion-checkbox');
          if (interactiveEl) {
            interactiveEl.focus();
          }
        }
      }
      return overlay;
    })();
  }
  createOverlay(ev) {
    let selectInterface = this.interface;
    if (selectInterface === 'action-sheet' && this.multiple) {
      console.warn(`Select interface cannot be "${selectInterface}" with a multi-value select. Using the "alert" interface instead.`);
      selectInterface = 'alert';
    }
    if (selectInterface === 'popover' && !ev) {
      console.warn(`Select interface cannot be a "${selectInterface}" without passing an event. Using the "alert" interface instead.`);
      selectInterface = 'alert';
    }
    if (selectInterface === 'action-sheet') {
      return this.openActionSheet();
    }
    if (selectInterface === 'popover') {
      return this.openPopover(ev);
    }
    return this.openAlert();
  }
  updateOverlayOptions() {
    const overlay = this.overlay;
    if (!overlay) {
      return;
    }
    const childOpts = this.childOpts;
    const value = this.value;
    switch (this.interface) {
      case 'action-sheet':
        overlay.buttons = this.createActionSheetButtons(childOpts, value);
        break;
      case 'popover':
        const popover = overlay.querySelector('ion-select-popover');
        if (popover) {
          popover.options = this.createPopoverOptions(childOpts, value);
        }
        break;
      case 'alert':
        const inputType = this.multiple ? 'checkbox' : 'radio';
        overlay.inputs = this.createAlertInputs(childOpts, inputType, value);
        break;
    }
  }
  createActionSheetButtons(data, selectValue) {
    const actionSheetButtons = data.map(option => {
      const value = getOptionValue(option);
      // Remove hydrated before copying over classes
      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');
      const optClass = `${OPTION_CLASS} ${copyClasses}`;
      return {
        role: isOptionSelected(selectValue, value, this.compareWith) ? 'selected' : '',
        text: option.textContent,
        cssClass: optClass,
        handler: () => {
          this.setValue(value);
        }
      };
    });
    // Add "cancel" button
    actionSheetButtons.push({
      text: this.cancelText,
      role: 'cancel',
      handler: () => {
        this.ionCancel.emit();
      }
    });
    return actionSheetButtons;
  }
  createAlertInputs(data, inputType, selectValue) {
    const alertInputs = data.map(option => {
      const value = getOptionValue(option);
      // Remove hydrated before copying over classes
      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');
      const optClass = `${OPTION_CLASS} ${copyClasses}`;
      return {
        type: inputType,
        cssClass: optClass,
        label: option.textContent || '',
        value,
        checked: isOptionSelected(selectValue, value, this.compareWith),
        disabled: option.disabled
      };
    });
    return alertInputs;
  }
  createPopoverOptions(data, selectValue) {
    const popoverOptions = data.map(option => {
      const value = getOptionValue(option);
      // Remove hydrated before copying over classes
      const copyClasses = Array.from(option.classList).filter(cls => cls !== 'hydrated').join(' ');
      const optClass = `${OPTION_CLASS} ${copyClasses}`;
      return {
        text: option.textContent || '',
        cssClass: optClass,
        value,
        checked: isOptionSelected(selectValue, value, this.compareWith),
        disabled: option.disabled,
        handler: selected => {
          this.setValue(selected);
          if (!this.multiple) {
            this.close();
          }
        }
      };
    });
    return popoverOptions;
  }
  openPopover(ev) {
    var _this3 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const {
        fill,
        labelPlacement
      } = _this3;
      const interfaceOptions = _this3.interfaceOptions;
      const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(_this3);
      const showBackdrop = mode === 'md' ? false : true;
      const multiple = _this3.multiple;
      const value = _this3.value;
      let event = ev;
      let size = 'auto';
      if (_this3.legacyFormController.hasLegacyControl()) {
        const item = _this3.el.closest('ion-item');
        // If the select is inside of an item containing a floating
        // or stacked label then the popover should take up the
        // full width of the item when it presents
        if (item && (item.classList.contains('item-label-floating') || item.classList.contains('item-label-stacked'))) {
          event = Object.assign(Object.assign({}, ev), {
            detail: {
              ionShadowTarget: item
            }
          });
          size = 'cover';
        }
      } else {
        const hasFloatingOrStackedLabel = labelPlacement === 'floating' || labelPlacement === 'stacked';
        /**
         * The popover should take up the full width
         * when using a fill in MD mode or if the
         * label is floating/stacked.
         */
        if (hasFloatingOrStackedLabel || mode === 'md' && fill !== undefined) {
          size = 'cover';
          /**
           * Otherwise the popover
           * should be positioned relative
           * to the native element.
           */
        } else {
          event = Object.assign(Object.assign({}, ev), {
            detail: {
              ionShadowTarget: _this3.nativeWrapperEl
            }
          });
        }
      }
      const popoverOpts = Object.assign(Object.assign({
        mode,
        event,
        alignment: 'center',
        size,
        showBackdrop
      }, interfaceOptions), {
        component: 'ion-select-popover',
        cssClass: ['select-popover', interfaceOptions.cssClass],
        componentProps: {
          header: interfaceOptions.header,
          subHeader: interfaceOptions.subHeader,
          message: interfaceOptions.message,
          multiple,
          value,
          options: _this3.createPopoverOptions(_this3.childOpts, value)
        }
      });
      return _overlays_4101c476_js__WEBPACK_IMPORTED_MODULE_6__.c.create(popoverOpts);
    })();
  }
  openActionSheet() {
    var _this4 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(_this4);
      const interfaceOptions = _this4.interfaceOptions;
      const actionSheetOpts = Object.assign(Object.assign({
        mode
      }, interfaceOptions), {
        buttons: _this4.createActionSheetButtons(_this4.childOpts, _this4.value),
        cssClass: ['select-action-sheet', interfaceOptions.cssClass]
      });
      return _overlays_4101c476_js__WEBPACK_IMPORTED_MODULE_6__.b.create(actionSheetOpts);
    })();
  }
  openAlert() {
    var _this5 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      /**
       * TODO FW-3194
       * Remove legacyFormController logic.
       * Remove label and labelText vars
       * Pass `this.labelText` instead of `labelText`
       * when setting the header.
       */
      let label;
      let labelText;
      if (_this5.legacyFormController.hasLegacyControl()) {
        label = _this5.getLabel();
        labelText = label ? label.textContent : null;
      } else {
        labelText = _this5.labelText;
      }
      const interfaceOptions = _this5.interfaceOptions;
      const inputType = _this5.multiple ? 'checkbox' : 'radio';
      const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(_this5);
      const alertOpts = Object.assign(Object.assign({
        mode
      }, interfaceOptions), {
        header: interfaceOptions.header ? interfaceOptions.header : labelText,
        inputs: _this5.createAlertInputs(_this5.childOpts, inputType, _this5.value),
        buttons: [{
          text: _this5.cancelText,
          role: 'cancel',
          handler: () => {
            _this5.ionCancel.emit();
          }
        }, {
          text: _this5.okText,
          handler: selectedValues => {
            _this5.setValue(selectedValues);
          }
        }],
        cssClass: ['select-alert', interfaceOptions.cssClass, _this5.multiple ? 'multiple-select-alert' : 'single-select-alert']
      });
      return _overlays_4101c476_js__WEBPACK_IMPORTED_MODULE_6__.a.create(alertOpts);
    })();
  }
  /**
   * Close the select interface.
   */
  close() {
    if (!this.overlay) {
      return Promise.resolve(false);
    }
    return this.overlay.dismiss();
  }
  // TODO FW-3194 Remove this
  getLabel() {
    return (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.h)(this.el);
  }
  hasValue() {
    return this.getText() !== '';
  }
  get childOpts() {
    return Array.from(this.el.querySelectorAll('ion-select-option'));
  }
  /**
   * Returns any plaintext associated with
   * the label (either prop or slot).
   * Note: This will not return any custom
   * HTML. Use the `hasLabel` getter if you
   * want to know if any slotted label content
   * was passed.
   */
  get labelText() {
    const {
      label
    } = this;
    if (label !== undefined) {
      return label;
    }
    const {
      labelSlot
    } = this;
    if (labelSlot !== null) {
      return labelSlot.textContent;
    }
    return;
  }
  getText() {
    const selectedText = this.selectedText;
    if (selectedText != null && selectedText !== '') {
      return selectedText;
    }
    return generateText(this.childOpts, this.value, this.compareWith);
  }
  setFocus() {
    if (this.focusEl) {
      this.focusEl.focus();
    }
  }
  emitStyle() {
    const {
      disabled
    } = this;
    const style = {
      'interactive-disabled': disabled
    };
    if (this.legacyFormController.hasLegacyControl()) {
      style['interactive'] = true;
      style['select'] = true;
      style['select-disabled'] = disabled;
      style['has-placeholder'] = this.placeholder !== undefined;
      style['has-value'] = this.hasValue();
      style['has-focus'] = this.isExpanded;
    }
    this.ionStyle.emit(style);
  }
  renderLabel() {
    const {
      label
    } = this;
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: {
        'label-text-wrapper': true,
        'label-text-wrapper-hidden': !this.hasLabel
      },
      part: "label"
    }, label === undefined ? (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "label"
    }) : (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "label-text"
    }, label));
  }
  componentDidRender() {
    var _a;
    (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();
  }
  /**
   * Gets any content passed into the `label` slot,
   * not the <slot> definition.
   */
  get labelSlot() {
    return this.el.querySelector('[slot="label"]');
  }
  /**
   * Returns `true` if label content is provided
   * either by a prop or a content. If you want
   * to get the plaintext value of the label use
   * the `labelText` getter instead.
   */
  get hasLabel() {
    return this.label !== undefined || this.labelSlot !== null;
  }
  /**
   * Renders the border container
   * when fill="outline".
   */
  renderLabelContainer() {
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(this);
    const hasOutlineFill = mode === 'md' && this.fill === 'outline';
    if (hasOutlineFill) {
      /**
       * The outline fill has a special outline
       * that appears around the select and the label.
       * Certain stacked and floating label placements cause the
       * label to translate up and create a "cut out"
       * inside of that border by using the notch-spacer element.
       */
      return [(0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "select-outline-container"
      }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "select-outline-start"
      }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: {
          'select-outline-notch': true,
          'select-outline-notch-hidden': !this.hasLabel
        }
      }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "notch-spacer",
        "aria-hidden": "true",
        ref: el => this.notchSpacerEl = el
      }, this.label)), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: "select-outline-end"
      })), this.renderLabel()];
    }
    /**
     * If not using the outline style,
     * we can render just the label.
     */
    return this.renderLabel();
  }
  renderSelect() {
    const {
      disabled,
      el,
      isExpanded,
      expandedIcon,
      labelPlacement,
      justify,
      placeholder,
      fill,
      shape,
      name,
      value
    } = this;
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(this);
    const hasFloatingOrStackedLabel = labelPlacement === 'floating' || labelPlacement === 'stacked';
    const justifyEnabled = !hasFloatingOrStackedLabel;
    const rtl = (0,_dir_e8b767a8_js__WEBPACK_IMPORTED_MODULE_7__.i)(el) ? 'rtl' : 'ltr';
    const inItem = (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.h)('ion-item', this.el);
    const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;
    (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.d)(true, el, name, parseValue(value), disabled);
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.c)(this.color, {
        [mode]: true,
        'in-item': inItem,
        'in-item-color': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.h)('ion-item.ion-color', el),
        'select-disabled': disabled,
        'select-expanded': isExpanded,
        'has-expanded-icon': expandedIcon !== undefined,
        'has-value': this.hasValue(),
        'has-placeholder': placeholder !== undefined,
        'ion-focusable': true,
        [`select-${rtl}`]: true,
        [`select-fill-${fill}`]: fill !== undefined,
        [`select-justify-${justify}`]: justifyEnabled,
        [`select-shape-${shape}`]: shape !== undefined,
        [`select-label-placement-${labelPlacement}`]: true
      })
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("label", {
      class: "select-wrapper",
      id: "select-label"
    }, this.renderLabelContainer(), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "native-wrapper",
      ref: el => this.nativeWrapperEl = el,
      part: "container"
    }, this.renderSelectText(), !hasFloatingOrStackedLabel && this.renderSelectIcon(), this.renderListbox()), hasFloatingOrStackedLabel && this.renderSelectIcon(), shouldRenderHighlight && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "select-highlight"
    })));
  }
  // TODO FW-3194 - Remove this
  renderLegacySelect() {
    if (!this.hasLoggedDeprecationWarning) {
      (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__.p)(`ion-select now requires providing a label with either the "label" property or the "aria-label" attribute. To migrate, remove any usage of "ion-label" and pass the label text to either the "label" property or the "aria-label" attribute.

Example: <ion-select label="Favorite Color">...</ion-select>
Example with aria-label: <ion-select aria-label="Favorite Color">...</ion-select>

Developers can use the "legacy" property to continue using the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.`, this.el);
      if (this.legacy) {
        (0,_index_e86f0117_js__WEBPACK_IMPORTED_MODULE_5__.p)(`ion-select is being used with the "legacy" property enabled which will forcibly enable the legacy form markup. This property will be removed in an upcoming major release of Ionic where this form control will use the modern form markup.
    Developers can dismiss this warning by removing their usage of the "legacy" property and using the new select syntax.`, this.el);
      }
      this.hasLoggedDeprecationWarning = true;
    }
    const {
      disabled,
      el,
      inputId,
      isExpanded,
      expandedIcon,
      name,
      placeholder,
      value
    } = this;
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(this);
    const {
      labelText,
      labelId
    } = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.e)(el, inputId);
    (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.d)(true, el, name, parseValue(value), disabled);
    const displayValue = this.getText();
    let selectText = displayValue;
    if (selectText === '' && placeholder !== undefined) {
      selectText = placeholder;
    }
    // If there is a label then we need to concatenate it with the
    // current value (or placeholder) and a comma so it separates
    // nicely when the screen reader announces it, otherwise just
    // announce the value / placeholder
    const displayLabel = labelText !== undefined ? selectText !== '' ? `${selectText}, ${labelText}` : labelText : selectText;
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onClick: this.onClick,
      role: "button",
      "aria-haspopup": "listbox",
      "aria-disabled": disabled ? 'true' : null,
      "aria-label": displayLabel,
      class: {
        [mode]: true,
        'in-item': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.h)('ion-item', el),
        'in-item-color': (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.h)('ion-item.ion-color', el),
        'select-disabled': disabled,
        'select-expanded': isExpanded,
        'has-expanded-icon': expandedIcon !== undefined,
        'legacy-select': true
      }
    }, this.renderSelectText(), this.renderSelectIcon(), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("label", {
      id: labelId
    }, displayLabel), this.renderListbox());
  }
  /**
   * Renders either the placeholder
   * or the selected values based on
   * the state of the select.
   */
  renderSelectText() {
    const {
      placeholder
    } = this;
    const displayValue = this.getText();
    let addPlaceholderClass = false;
    let selectText = displayValue;
    if (selectText === '' && placeholder !== undefined) {
      selectText = placeholder;
      addPlaceholderClass = true;
    }
    const selectTextClasses = {
      'select-text': true,
      'select-placeholder': addPlaceholderClass
    };
    const textPart = addPlaceholderClass ? 'placeholder' : 'text';
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      "aria-hidden": "true",
      class: selectTextClasses,
      part: textPart
    }, selectText);
  }
  /**
   * Renders the chevron icon
   * next to the select text.
   */
  renderSelectIcon() {
    const mode = (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(this);
    const {
      isExpanded,
      toggleIcon,
      expandedIcon
    } = this;
    let icon;
    if (isExpanded && expandedIcon !== undefined) {
      icon = expandedIcon;
    } else {
      const defaultIcon = mode === 'ios' ? _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_10__.w : _index_393bc14a_js__WEBPACK_IMPORTED_MODULE_10__.q;
      icon = toggleIcon !== null && toggleIcon !== void 0 ? toggleIcon : defaultIcon;
    }
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-icon", {
      class: "select-icon",
      part: "icon",
      "aria-hidden": "true",
      icon: icon
    });
  }
  get ariaLabel() {
    var _a, _b;
    const {
      placeholder,
      el,
      inputId,
      inheritedAttributes
    } = this;
    const displayValue = this.getText();
    const {
      labelText
    } = (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_4__.e)(el, inputId);
    const definedLabel = (_b = (_a = this.labelText) !== null && _a !== void 0 ? _a : inheritedAttributes['aria-label']) !== null && _b !== void 0 ? _b : labelText;
    /**
     * If developer has specified a placeholder
     * and there is nothing selected, the selectText
     * should have the placeholder value.
     */
    let renderedLabel = displayValue;
    if (renderedLabel === '' && placeholder !== undefined) {
      renderedLabel = placeholder;
    }
    /**
     * If there is a developer-defined label,
     * then we need to concatenate the developer label
     * string with the current current value.
     * The label for the control should be read
     * before the values of the control.
     */
    if (definedLabel !== undefined) {
      renderedLabel = renderedLabel === '' ? definedLabel : `${definedLabel}, ${renderedLabel}`;
    }
    return renderedLabel;
  }
  renderListbox() {
    const {
      disabled,
      inputId,
      isExpanded
    } = this;
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("button", {
      disabled: disabled,
      id: inputId,
      "aria-label": this.ariaLabel,
      "aria-haspopup": "listbox",
      "aria-expanded": `${isExpanded}`,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      ref: focusEl => this.focusEl = focusEl
    });
  }
  render() {
    const {
      legacyFormController
    } = this;
    return legacyFormController.hasLegacyControl() ? this.renderLegacySelect() : this.renderSelect();
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "disabled": ["styleChanged"],
      "isExpanded": ["styleChanged"],
      "placeholder": ["styleChanged"],
      "value": ["styleChanged"]
    };
  }
};
const isOptionSelected = (currentValue, compareValue, compareWith) => {
  if (currentValue === undefined) {
    return false;
  }
  if (Array.isArray(currentValue)) {
    return currentValue.some(val => compareOptions(val, compareValue, compareWith));
  } else {
    return compareOptions(currentValue, compareValue, compareWith);
  }
};
const getOptionValue = el => {
  const value = el.value;
  return value === undefined ? el.textContent || '' : value;
};
const parseValue = value => {
  if (value == null) {
    return undefined;
  }
  if (Array.isArray(value)) {
    return value.join(',');
  }
  return value.toString();
};
const compareOptions = (currentValue, compareValue, compareWith) => {
  if (typeof compareWith === 'function') {
    return compareWith(currentValue, compareValue);
  } else if (typeof compareWith === 'string') {
    return currentValue[compareWith] === compareValue[compareWith];
  } else {
    return Array.isArray(compareValue) ? compareValue.includes(currentValue) : currentValue === compareValue;
  }
};
const generateText = (opts, value, compareWith) => {
  if (value === undefined) {
    return '';
  }
  if (Array.isArray(value)) {
    return value.map(v => textForValue(opts, v, compareWith)).filter(opt => opt !== null).join(', ');
  } else {
    return textForValue(opts, value, compareWith) || '';
  }
};
const textForValue = (opts, value, compareWith) => {
  const selectOpt = opts.find(opt => {
    return compareOptions(value, getOptionValue(opt), compareWith);
  });
  return selectOpt ? selectOpt.textContent : null;
};
let selectIds = 0;
const OPTION_CLASS = 'select-interface-option';
Select.style = {
  ios: selectIosCss,
  md: selectMdCss
};
const selectOptionCss = ":host{display:none}";
const SelectOption = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.inputId = `ion-selopt-${selectOptionIds++}`;
    this.disabled = false;
    this.value = undefined;
  }
  render() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "option",
      id: this.inputId,
      class: (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(this)
    });
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
let selectOptionIds = 0;
SelectOption.style = selectOptionCss;
const selectPopoverIosCss = ".sc-ion-select-popover-ios-h ion-list.sc-ion-select-popover-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}ion-list-header.sc-ion-select-popover-ios,ion-label.sc-ion-select-popover-ios{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}";
const selectPopoverMdCss = ".sc-ion-select-popover-md-h ion-list.sc-ion-select-popover-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}ion-list-header.sc-ion-select-popover-md,ion-label.sc-ion-select-popover-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}ion-list.sc-ion-select-popover-md ion-radio.sc-ion-select-popover-md{opacity:0}ion-item.sc-ion-select-popover-md{--inner-border-width:0}.item-radio-checked.sc-ion-select-popover-md{--background:rgba(var(--ion-color-primary-rgb, 56, 128, 255), 0.08);--background-focused:var(--ion-color-primary, #3880ff);--background-focused-opacity:0.2;--background-hover:var(--ion-color-primary, #3880ff);--background-hover-opacity:0.12}.item-checkbox-checked.sc-ion-select-popover-md{--background-activated:var(--ion-item-color, var(--ion-text-color, #000));--background-focused:var(--ion-item-color, var(--ion-text-color, #000));--background-hover:var(--ion-item-color, var(--ion-text-color, #000));--color:var(--ion-color-primary, #3880ff)}";
const SelectPopover = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.header = undefined;
    this.subHeader = undefined;
    this.message = undefined;
    this.multiple = undefined;
    this.options = [];
  }
  findOptionFromEvent(ev) {
    const {
      options
    } = this;
    return options.find(o => o.value === ev.target.value);
  }
  /**
   * When an option is selected we need to get the value(s)
   * of the selected option(s) and return it in the option
   * handler
   */
  callOptionHandler(ev) {
    const option = this.findOptionFromEvent(ev);
    const values = this.getValues(ev);
    if (option === null || option === void 0 ? void 0 : option.handler) {
      (0,_overlays_4101c476_js__WEBPACK_IMPORTED_MODULE_6__.s)(option.handler, values);
    }
  }
  /**
   * Dismisses the host popover that the `ion-select-popover`
   * is rendered within.
   */
  dismissParentPopover() {
    const popover = this.el.closest('ion-popover');
    if (popover) {
      popover.dismiss();
    }
  }
  setChecked(ev) {
    const {
      multiple
    } = this;
    const option = this.findOptionFromEvent(ev);
    // this is a popover with checkboxes (multiple value select)
    // we need to set the checked value for this option
    if (multiple && option) {
      option.checked = ev.detail.checked;
    }
  }
  getValues(ev) {
    const {
      multiple,
      options
    } = this;
    if (multiple) {
      // this is a popover with checkboxes (multiple value select)
      // return an array of all the checked values
      return options.filter(o => o.checked).map(o => o.value);
    }
    // this is a popover with radio buttons (single value select)
    // return the value that was clicked, otherwise undefined
    const option = this.findOptionFromEvent(ev);
    return option ? option.value : undefined;
  }
  renderOptions(options) {
    const {
      multiple
    } = this;
    switch (multiple) {
      case true:
        return this.renderCheckboxOptions(options);
      default:
        return this.renderRadioOptions(options);
    }
  }
  renderCheckboxOptions(options) {
    return options.map(option => (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", {
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.g)(option.cssClass)
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-checkbox", {
      slot: "start",
      value: option.value,
      disabled: option.disabled,
      checked: option.checked,
      legacy: true,
      onIonChange: ev => {
        this.setChecked(ev);
        this.callOptionHandler(ev);
      }
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", null, option.text)));
  }
  renderRadioOptions(options) {
    const checked = options.filter(o => o.checked).map(o => o.value)[0];
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-radio-group", {
      value: checked,
      onIonChange: ev => this.callOptionHandler(ev)
    }, options.map(option => (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", {
      class: (0,_theme_7670341c_js__WEBPACK_IMPORTED_MODULE_8__.g)(option.cssClass)
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", null, option.text), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-radio", {
      value: option.value,
      disabled: option.disabled,
      legacy: true,
      onClick: () => this.dismissParentPopover(),
      onKeyUp: ev => {
        if (ev.key === ' ') {
          /**
           * Selecting a radio option with keyboard navigation,
           * either through the Enter or Space keys, should
           * dismiss the popover.
           */
          this.dismissParentPopover();
        }
      }
    }))));
  }
  render() {
    const {
      header,
      message,
      options,
      subHeader
    } = this;
    const hasSubHeaderOrMessage = subHeader !== undefined || message !== undefined;
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      class: (0,_ionic_global_a9abd569_js__WEBPACK_IMPORTED_MODULE_11__.b)(this)
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-list", null, header !== undefined && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-list-header", null, header), hasSubHeaderOrMessage && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-item", null, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("ion-label", {
      class: "ion-text-wrap"
    }, subHeader !== undefined && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("h3", null, subHeader), message !== undefined && (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("p", null, message))), this.renderOptions(options)));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
SelectPopover.style = {
  ios: selectPopoverIosCss,
  md: selectPopoverMdCss
};


/***/ }),

/***/ 63510:
/*!************************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/notch-controller-cfcb8c01.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createNotchController)
/* harmony export */ });
/* harmony import */ var _index_b32cad98_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-b32cad98.js */ 38815);
/* harmony import */ var _helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers-f586db1c.js */ 75272);
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */



/**
 * A utility to calculate the size of an outline notch
 * width relative to the content passed. This is used in
 * components such as `ion-select` with `fill="outline"`
 * where we need to pass slotted HTML content. This is not
 * needed when rendering plaintext content because we can
 * render the plaintext again hidden with `opacity: 0` inside
 * of the notch. As a result we can rely on the intrinsic size
 * of the element to correctly compute the notch width. We
 * cannot do this with slotted content because we cannot project
 * it into 2 places at once.
 *
 * @internal
 * @param el: The host element
 * @param getNotchSpacerEl: A function that returns a reference to the notch spacer element inside of the component template.
 * @param getLabelSlot: A function that returns a reference to the slotted content.
 */
const createNotchController = (el, getNotchSpacerEl, getLabelSlot) => {
  let notchVisibilityIO;
  const needsExplicitNotchWidth = () => {
    const notchSpacerEl = getNotchSpacerEl();
    if (
    /**
     * If the notch is not being used
     * then we do not need to set the notch width.
     */
    notchSpacerEl === undefined ||
    /**
     * If either the label property is being
     * used or the label slot is not defined,
     * then we do not need to estimate the notch width.
     */
    el.label !== undefined || getLabelSlot() === null) {
      return false;
    }
    return true;
  };
  const calculateNotchWidth = () => {
    if (needsExplicitNotchWidth()) {
      /**
       * Run this the frame after
       * the browser has re-painted the host element.
       * Otherwise, the label element may have a width
       * of 0 and the IntersectionObserver will be used.
       */
      (0,_helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_1__.r)(() => {
        setNotchWidth();
      });
    }
  };
  /**
   * When using a label prop we can render
   * the label value inside of the notch and
   * let the browser calculate the size of the notch.
   * However, we cannot render the label slot in multiple
   * places so we need to manually calculate the notch dimension
   * based on the size of the slotted content.
   *
   * This function should only be used to set the notch width
   * on slotted label content. The notch width for label prop
   * content is automatically calculated based on the
   * intrinsic size of the label text.
   */
  const setNotchWidth = () => {
    const notchSpacerEl = getNotchSpacerEl();
    if (notchSpacerEl === undefined) {
      return;
    }
    if (!needsExplicitNotchWidth()) {
      notchSpacerEl.style.removeProperty('width');
      return;
    }
    const width = getLabelSlot().scrollWidth;
    if (
    /**
     * If the computed width of the label is 0
     * and notchSpacerEl's offsetParent is null
     * then that means the element is hidden.
     * As a result, we need to wait for the element
     * to become visible before setting the notch width.
     *
     * We do not check el.offsetParent because
     * that can be null if the host element has
     * position: fixed applied to it.
     * notchSpacerEl does not have position: fixed.
     */
    width === 0 && notchSpacerEl.offsetParent === null && _index_b32cad98_js__WEBPACK_IMPORTED_MODULE_0__.w !== undefined && "IntersectionObserver" in _index_b32cad98_js__WEBPACK_IMPORTED_MODULE_0__.w) {
      /**
       * If there is an IO already attached
       * then that will update the notch
       * once the element becomes visible.
       * As a result, there is no need to create
       * another one.
       */
      if (notchVisibilityIO !== undefined) {
        return;
      }
      const io = notchVisibilityIO = new IntersectionObserver(ev => {
        /**
         * If the element is visible then we
         * can try setting the notch width again.
         */
        if (ev[0].intersectionRatio === 1) {
          setNotchWidth();
          io.disconnect();
          notchVisibilityIO = undefined;
        }
      },
      /**
       * Set the root to be the host element
       * This causes the IO callback
       * to be fired in WebKit as soon as the element
       * is visible. If we used the default root value
       * then WebKit would only fire the IO callback
       * after any animations (such as a modal transition)
       * finished, and there would potentially be a flicker.
       */
      {
        threshold: 0.01,
        root: el
      });
      io.observe(notchSpacerEl);
      return;
    }
    /**
     * If the element is visible then we can set the notch width.
     * The notch is only visible when the label is scaled,
     * which is why we multiply the width by 0.75 as this is
     * the same amount the label element is scaled by in the host CSS.
     * (For ion-select, see $select-floating-label-scale in select.vars.scss).
     */
    notchSpacerEl.style.setProperty('width', `${width * 0.75}px`);
  };
  const destroy = () => {
    if (notchVisibilityIO) {
      notchVisibilityIO.disconnect();
      notchVisibilityIO = undefined;
    }
  };
  return {
    calculateNotchWidth,
    destroy
  };
};


/***/ }),

/***/ 51257:
/*!*************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/theme-7670341c.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   c: () => (/* binding */ createColorClasses),
/* harmony export */   g: () => (/* binding */ getClassMap),
/* harmony export */   h: () => (/* binding */ hostContext),
/* harmony export */   o: () => (/* binding */ openURL)
/* harmony export */ });
/* harmony import */ var C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */
const hostContext = (selector, el) => {
  return el.closest(selector) !== null;
};
/**
 * Create the mode and color classes for the component based on the classes passed in
 */
const createColorClasses = (color, cssClassMap) => {
  return typeof color === 'string' && color.length > 0 ? Object.assign({
    'ion-color': true,
    [`ion-color-${color}`]: true
  }, cssClassMap) : cssClassMap;
};
const getClassList = classes => {
  if (classes !== undefined) {
    const array = Array.isArray(classes) ? classes : classes.split(' ');
    return array.filter(c => c != null).map(c => c.trim()).filter(c => c !== '');
  }
  return [];
};
const getClassMap = classes => {
  const map = {};
  getClassList(classes).forEach(c => map[c] = true);
  return map;
};
const SCHEME = /^[a-z][a-z0-9+\-.]*:/;
const openURL = /*#__PURE__*/function () {
  var _ref = (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* (url, ev, direction, animation) {
    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {
      const router = document.querySelector('ion-router');
      if (router) {
        if (ev != null) {
          ev.preventDefault();
        }
        return router.push(url, direction, animation);
      }
    }
    return false;
  });
  return function openURL(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXNlbGVjdF8zX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQzJEOztBQUUzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNRSwwQkFBMEIsR0FBSUMsRUFBRSxJQUFLO0VBQ3pDLE1BQU1DLFNBQVMsR0FBR0QsRUFBRTtFQUNwQixJQUFJRSxhQUFhO0VBQ2pCLE1BQU1DLGdCQUFnQixHQUFHQSxDQUFBLEtBQU07SUFDN0IsSUFBSUQsYUFBYSxLQUFLRSxTQUFTLEVBQUU7TUFDL0I7QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO01BQ00sTUFBTUMsWUFBWSxHQUFHSixTQUFTLENBQUNLLEtBQUssS0FBS0YsU0FBUyxJQUFJRyxZQUFZLENBQUNOLFNBQVMsQ0FBQztNQUM3RSxNQUFNTyxxQkFBcUIsR0FBR1AsU0FBUyxDQUFDUSxZQUFZLENBQUMsWUFBWSxDQUFDO01BQ2hFO01BQ0NSLFNBQVMsQ0FBQ1EsWUFBWSxDQUFDLGlCQUFpQixDQUFDLElBQUlSLFNBQVMsQ0FBQ1MsVUFBVSxLQUFLLElBQUs7TUFDOUUsTUFBTUMsZUFBZSxHQUFHYix1REFBYSxDQUFDRyxTQUFTLENBQUM7TUFDaEQ7QUFDTjtBQUNBO0FBQ0E7TUFDTUMsYUFBYSxHQUNYRCxTQUFTLENBQUNXLE1BQU0sS0FBSyxJQUFJLElBQUssQ0FBQ1AsWUFBWSxJQUFJLENBQUNHLHFCQUFxQixJQUFJRyxlQUFlLEtBQUssSUFBSztJQUN0RztJQUNBLE9BQU9ULGFBQWE7RUFDdEIsQ0FBQztFQUNELE9BQU87SUFBRUM7RUFBaUIsQ0FBQztBQUM3QixDQUFDO0FBQ0QsTUFBTUksWUFBWSxHQUFJTixTQUFTLElBQUs7RUFDbEMsTUFBTVksSUFBSSxHQUFHWixTQUFTLENBQUNTLFVBQVU7RUFDakMsSUFBSUcsSUFBSSxLQUFLLElBQUksRUFBRTtJ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SUFBSSxFQUFFO1VBQ2RBLEVBQUUsQ0FBQ21QLGNBQWMsQ0FBQyxDQUFDO1FBQ3JCO1FBQ0EsT0FBT0YsTUFBTSxDQUFDeEosSUFBSSxDQUFDb0osR0FBRyxFQUFFQyxTQUFTLEVBQUVDLFNBQVMsQ0FBQztNQUMvQztJQUNGO0lBQ0EsT0FBTyxLQUFLO0VBQ2QsQ0FBQztFQUFBLGdCQVhLSixPQUFPQSxDQUFBUyxFQUFBLEVBQUFDLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxHQUFBO0lBQUEsT0FBQVgsSUFBQSxDQUFBWSxLQUFBLE9BQUFDLFNBQUE7RUFBQTtBQUFBLEdBV1oiLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2Zvcm0tY29udHJvbGxlci02Y2Q3ZWJkMS5qcyIsIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi1zZWxlY3RfMy5lbnRyeS5qcyIsIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL25vdGNoLWNvbnRyb2xsZXItY2ZjYjhjMDEuanMiLCIuL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9kaXN0L2VzbS90aGVtZS03NjcwMzQxYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgaCBhcyBmaW5kSXRlbUxhYmVsIH0gZnJvbSAnLi9oZWxwZXJzLWY1ODZkYjFjLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29udHJvbGxlciB0aGF0IHRyYWNrcyB3aGV0aGVyIGEgZm9ybSBjb250cm9sIGlzIHVzaW5nIHRoZSBsZWdhY3kgb3IgbW9kZXJuIHN5bnRheC4gVGhpcyBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHRoZSBsZWdhY3kgZm9ybSBjb250cm9sIHN5bnRheCBpcyByZW1vdmVkLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHByb3AgZWw6IFRoZSBJb25pYyBmb3JtIGNvbXBvbmVudCB0byByZWZlcmVuY2VcbiAqL1xuY29uc3QgY3JlYXRlTGVnYWN5Rm9ybUNvbnRyb2xsZXIgPSAoZWwpID0+IHtcbiAgY29uc3QgY29udHJvbEVsID0gZWw7XG4gIGxldCBsZWdhY3lDb250cm9sO1xuICBjb25zdCBoYXNMZWdhY3lDb250cm9sID0gKCkgPT4ge1xuICAgIGlmIChsZWdhY3lDb250cm9sID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8qKlxuICAgICAgICogRGV0ZWN0IGlmIGRldmVsb3BlcnMgYXJlIHVzaW5nIHRoZSBsZWdhY3kgZm9ybSBjb250cm9sIHN5bnRheFxuICAgICAgICogc28gYSBkZXByZWNhdGlvbiB3YXJuaW5nIGlzIGxvZ2dlZC4gVGhpcyB3YXJuaW5nIGNhbiBiZSBkaXNhYmxlZFxuICAgICAgICogYnkgZWl0aGVyIHVzaW5nIHRoZSBuZXcgYGxhYmVsYCBwcm9wZXJ0eSBvciBzZXR0aW5nIGBhcmlhLWxhYmVsYFxuICAgICAgICogb24gdGhlIGNvbnRyb2wuXG4gICAgICAgKiBBbHRlcm5hdGl2ZWx5LCBjb21wb25lbnRzIHRoYXQgdXNlIGEgc2xvdCBmb3IgdGhlIGxhYmVsXG4gICAgICAgKiBjYW4gY2hlY2sgdG8gc2VlIGlmIHRoZSBjb21wb25lbnQgaGFzIHNsb3R0ZWQgdGV4dFxuICAgICAgICogaW4gdGhlIGxpZ2h0IERPTS5cbiAgICAgICAqL1xuICAgICAgY29uc3QgaGFzTGFiZWxQcm9wID0gY29udHJvbEVsLmxhYmVsICE9PSB1bmRlZmluZWQgfHwgaGFzTGFiZWxTbG90KGNvbnRyb2xFbCk7XG4gICAgICBjb25zdCBoYXNBcmlhTGFiZWxBdHRyaWJ1dGUgPSBjb250cm9sRWwuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsJykgfHxcbiAgICAgICAgLy8gU2hhZG93IERPTSBmb3JtIGNvbnRyb2xzIGNhbm5vdCB1c2UgYXJpYS1sYWJlbGxlZGJ5XG4gICAgICAgIChjb250cm9sRWwuaGFzQXR0cmlidXRlKCdhcmlhLWxhYmVsbGVkYnknKSAmJiBjb250cm9sRWwuc2hhZG93Um9vdCA9PT0gbnVsbCk7XG4gICAgICBjb25zdCBsZWdhY3lJdGVtTGFiZWwgPSBmaW5kSXRlbUxhYmVsKGNvbnRyb2xFbCk7XG4gICAgICAvKipcbiAgICAgICAqIERldmVsb3BlcnMgY2FuIG1hbnVhbGx5IG9wdC1vdXQgb2YgdGhlIG1vZGVybiBmb3JtIG1hcmt1cFxuICAgICAgICogYnkgc2V0dGluZyBgbGVnYWN5PVwidHJ1ZVwiYCBvbiBjb21wb25lbnRzLlxuICAgICAgICovXG4gICAgICBsZWdhY3lDb250cm9sID1cbiAgICAgICAgY29udHJvbEVsLmxlZ2FjeSA9PT0gdHJ1ZSB8fCAoIWhhc0xhYmVsUHJvcCAmJiAhaGFzQXJpYUxhYmVsQXR0cmlidXRlICYmIGxlZ2FjeUl0ZW1MYWJlbCAhPT0gbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiBsZWdhY3lDb250cm9sO1xuICB9O1xuICByZXR1cm4geyBoYXNMZWdhY3lDb250cm9sIH07XG59O1xuY29uc3QgaGFzTGFiZWxTbG90ID0gKGNvbnRyb2xFbCkgPT4ge1xuICBjb25zdCByb290ID0gY29udHJvbEVsLnNoYWRvd1Jvb3Q7XG4gIGlmIChyb290ID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBDb21wb25lbnRzIHRoYXQgaGF2ZSBhIG5hbWVkIGxhYmVsIHNsb3RcbiAgICogYWxzbyBoYXZlIG90aGVyIHNsb3RzLCBzbyB3ZSBuZWVkIHRvIHF1ZXJ5IGZvclxuICAgKiBhbnl0aGluZyB0aGF0IGlzIGV4cGxpY2l0bHkgcGFzc2VkIHRvIHNsb3Q9XCJsYWJlbFwiXG4gICAqL1xuICBpZiAoTkFNRURfTEFCRUxfU0xPVF9DT01QT05FTlRTLmluY2x1ZGVzKGNvbnRyb2xFbC50YWdOYW1lKSAmJiBjb250cm9sRWwucXVlcnlTZWxlY3RvcignW3Nsb3Q9XCJsYWJlbFwiXScpICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIENvbXBvbmVudHMgdGhhdCBoYXZlIGFuIHVubmFtZWQgc2xvdCBmb3IgdGhlIGxhYmVsXG4gICAqIGhhdmUgbm8gb3RoZXIgc2xvdHMsIHNvIHdlIGNhbiBjaGVjayB0aGUgdGV4dENvbnRlbnRcbiAgICogb2YgdGhlIGVsZW1lbnQuXG4gICAqL1xuICBpZiAoVU5OQU1FRF9MQUJFTF9TTE9UX0NPTVBPTkVOVFMuaW5jbHVkZXMoY29udHJvbEVsLnRhZ05hbWUpICYmIGNvbnRyb2xFbC50ZXh0Q29udGVudCAhPT0gJycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuY29uc3QgTkFNRURfTEFCRUxfU0xPVF9DT01QT05FTlRTID0gWydJT04tUkFOR0UnXTtcbmNvbnN0IFVOTkFNRURfTEFCRUxfU0xPVF9DT01QT05FTlRTID0gWydJT04tVE9HR0xFJywgJ0lPTi1DSEVDS0JPWCcsICdJT04tUkFESU8nXTtcblxuZXhwb3J0IHsgY3JlYXRlTGVnYWN5Rm9ybUNvbnRyb2xsZXIgYXMgYyB9O1xuIiwiLyohXG4gKiAoQykgSW9uaWMgaHR0cDovL2lvbmljZnJhbWV3b3JrLmNvbSAtIE1JVCBMaWNlbnNlXG4gKi9cbmltcG9ydCB7IHIgYXMgcmVnaXN0ZXJJbnN0YW5jZSwgZCBhcyBjcmVhdGVFdmVudCwgaCwgSCBhcyBIb3N0LCBmIGFzIGdldEVsZW1lbnQsIGkgYXMgZm9yY2VVcGRhdGUgfSBmcm9tICcuL2luZGV4LTM2YTVmZDc1LmpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlTGVnYWN5Rm9ybUNvbnRyb2xsZXIgfSBmcm9tICcuL2Zvcm0tY29udHJvbGxlci02Y2Q3ZWJkMS5qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZU5vdGNoQ29udHJvbGxlciB9IGZyb20gJy4vbm90Y2gtY29udHJvbGxlci1jZmNiOGMwMS5qcyc7XG5pbXBvcnQgeyBrIGFzIGluaGVyaXRBdHRyaWJ1dGVzLCBmIGFzIGZvY3VzRWxlbWVudCwgaCBhcyBmaW5kSXRlbUxhYmVsLCBkIGFzIHJlbmRlckhpZGRlbklucHV0LCBlIGFzIGdldEFyaWFMYWJlbCB9IGZyb20gJy4vaGVscGVycy1mNTg2ZGIxYy5qcyc7XG5pbXBvcnQgeyBwIGFzIHByaW50SW9uV2FybmluZyB9IGZyb20gJy4vaW5kZXgtZTg2ZjAxMTcuanMnO1xuaW1wb3J0IHsgYyBhcyBwb3BvdmVyQ29udHJvbGxlciwgYiBhcyBhY3Rpb25TaGVldENvbnRyb2xsZXIsIGEgYXMgYWxlcnRDb250cm9sbGVyLCBzIGFzIHNhZmVDYWxsIH0gZnJvbSAnLi9vdmVybGF5cy00MTAxYzQ3Ni5qcyc7XG5pbXBvcnQgeyBpIGFzIGlzUlRMIH0gZnJvbSAnLi9kaXItZThiNzY3YTguanMnO1xuaW1wb3J0IHsgaCBhcyBob3N0Q29udGV4dCwgYyBhcyBjcmVhdGVDb2xvckNsYXNzZXMsIGcgYXMgZ2V0Q2xhc3NNYXAgfSBmcm9tICcuL3RoZW1lLTc2NzAzNDFjLmpzJztcbmltcG9ydCB7IHcgYXMgd2F0Y2hGb3JPcHRpb25zIH0gZnJvbSAnLi93YXRjaC1vcHRpb25zLTRkNDIxODQ3LmpzJztcbmltcG9ydCB7IHcgYXMgY2hldnJvbkV4cGFuZCwgcSBhcyBjYXJldERvd25TaGFycCB9IGZyb20gJy4vaW5kZXgtMzkzYmMxNGEuanMnO1xuaW1wb3J0IHsgYiBhcyBnZXRJb25Nb2RlIH0gZnJvbSAnLi9pb25pYy1nbG9iYWwtYTlhYmQ1NjkuanMnO1xuaW1wb3J0ICcuL2luZGV4LWIzMmNhZDk4LmpzJztcbmltcG9ydCAnLi9mcmFtZXdvcmstZGVsZWdhdGUtNmE0NWVkMzAuanMnO1xuaW1wb3J0ICcuL2hhcmR3YXJlLWJhY2stYnV0dG9uLTQ5MGRmMTE1LmpzJztcblxuY29uc3Qgc2VsZWN0SW9zQ3NzID0gXCI6aG9zdHstLXBhZGRpbmctdG9wOjBweDstLXBhZGRpbmctZW5kOjBweDstLXBhZGRpbmctYm90dG9tOjBweDstLXBhZGRpbmctc3RhcnQ6MHB4Oy0tcGxhY2Vob2xkZXItY29sb3I6Y3VycmVudENvbG9yOy0tcGxhY2Vob2xkZXItb3BhY2l0eTowLjY7LS1iYWNrZ3JvdW5kOnRyYW5zcGFyZW50Oy0tYm9yZGVyLXN0eWxlOnNvbGlkOy0taGlnaGxpZ2h0LWNvbG9yLWZvY3VzZWQ6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMzODgwZmYpOy0taGlnaGxpZ2h0LWNvbG9yLXZhbGlkOnZhcigtLWlvbi1jb2xvci1zdWNjZXNzLCAjMmRkMzZmKTstLWhpZ2hsaWdodC1jb2xvci1pbnZhbGlkOnZhcigtLWlvbi1jb2xvci1kYW5nZXIsICNlYjQ0NWEpOy0taGlnaGxpZ2h0LWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvci1mb2N1c2VkKTtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtZmFtaWx5OnZhcigtLWlvbi1mb250LWZhbWlseSwgaW5oZXJpdCk7d2hpdGUtc3BhY2U6bm93cmFwO2N1cnNvcjpwb2ludGVyO3otaW5kZXg6Mn06aG9zdCg6bm90KC5sZWdhY3ktc2VsZWN0KSl7d2lkdGg6MTAwJX06aG9zdCguaW9uLWNvbG9yKXstLWhpZ2hsaWdodC1jb2xvci1mb2N1c2VkOnZhcigtLWlvbi1jb2xvci1iYXNlKX06aG9zdCgubGVnYWN5LXNlbGVjdCl7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO292ZXJmbG93OmhpZGRlbn06aG9zdCguaW4taXRlbS5sZWdhY3ktc2VsZWN0KXtwb3NpdGlvbjpzdGF0aWM7bWF4LXdpZHRoOjQ1JX06aG9zdCguc2VsZWN0LWRpc2FibGVkKXtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5pb24tZm9jdXNlZCkgYnV0dG9ue2JvcmRlcjoycHggc29saWQgIzVlOWVkNn06aG9zdChbc2xvdD1zdGFydF06bm90KC5sZWdhY3ktc2VsZWN0KSksOmhvc3QoW3Nsb3Q9ZW5kXTpub3QoLmxlZ2FjeS1zZWxlY3QpKXt3aWR0aDphdXRvfS5zZWxlY3QtcGxhY2Vob2xkZXJ7Y29sb3I6dmFyKC0tcGxhY2Vob2xkZXItY29sb3IpO29wYWNpdHk6dmFyKC0tcGxhY2Vob2xkZXItb3BhY2l0eSl9Omhvc3QoLmxlZ2FjeS1zZWxlY3QpIGxhYmVse3RvcDowO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO2JvcmRlcjowO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmU7YXBwZWFyYW5jZTpub25lO291dGxpbmU6bm9uZTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO29wYWNpdHk6MH1Ac3VwcG9ydHMgKGluc2V0LWlubGluZS1zdGFydDogMCl7Omhvc3QoLmxlZ2FjeS1zZWxlY3QpIGxhYmVse2luc2V0LWlubGluZS1zdGFydDowfX1Ac3VwcG9ydHMgbm90IChpbnNldC1pbmxpbmUtc3RhcnQ6IDApezpob3N0KC5sZWdhY3ktc2VsZWN0KSBsYWJlbHtsZWZ0OjB9Omhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QoLmxlZ2FjeS1zZWxlY3QpIGxhYmVsLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5sZWdhY3ktc2VsZWN0IGxhYmVse2xlZnQ6dW5zZXQ7cmlnaHQ6dW5zZXQ7cmlnaHQ6MH1Ac3VwcG9ydHMgc2VsZWN0b3IoOmRpcihydGwpKXs6aG9zdCgubGVnYWN5LXNlbGVjdCkgbGFiZWw6ZGlyKHJ0bCl7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfX19Omhvc3QoLmxlZ2FjeS1zZWxlY3QpIGxhYmVsOjotbW96LWZvY3VzLWlubmVye2JvcmRlcjowfWJ1dHRvbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtvdXRsaW5lOjA7Y2xpcDpyZWN0KDAgMCAwIDApO29wYWNpdHk6MDtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7LW1vei1hcHBlYXJhbmNlOm5vbmV9LnNlbGVjdC1pY29uey13ZWJraXQtbWFyZ2luLXN0YXJ0OjRweDttYXJnaW4taW5saW5lLXN0YXJ0OjRweDstd2Via2l0LW1hcmdpbi1lbmQ6MDttYXJnaW4taW5saW5lLWVuZDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7cG9zaXRpb246cmVsYXRpdmV9Omhvc3QoLmluLWl0ZW0tY29sb3IpIC5zZWxlY3QtaWNvbntjb2xvcjppbmhlcml0fTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5zZWxlY3QtaWNvbiw6aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLnNlbGVjdC1pY29ue3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDoxMDAlfTpob3N0KC5zZWxlY3QtbHRyLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLnNlbGVjdC1pY29uLDpob3N0KC5zZWxlY3QtbHRyLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5zZWxlY3QtaWNvbntyaWdodDp2YXIoLS1wYWRkaW5nLWVuZCwgMCl9Omhvc3QoLnNlbGVjdC1ydGwuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAuc2VsZWN0LWljb24sOmhvc3QoLnNlbGVjdC1ydGwuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLnNlbGVjdC1pY29ue2xlZnQ6dmFyKC0tcGFkZGluZy1zdGFydCwgMCl9LnNlbGVjdC10ZXh0ey1tcy1mbGV4OjE7ZmxleDoxO21pbi13aWR0aDoxNnB4O2ZvbnQtc2l6ZTppbmhlcml0O3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6aW5oZXJpdDtvdmVyZmxvdzpoaWRkZW59LnNlbGVjdC13cmFwcGVyey13ZWJraXQtcGFkZGluZy1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLWlubGluZS1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctdG9wOnZhcigtLXBhZGRpbmctdG9wKTtwYWRkaW5nLWJvdHRvbTp2YXIoLS1wYWRkaW5nLWJvdHRvbSk7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1wb3NpdGl2ZToxO2ZsZXgtZ3JvdzoxOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7aGVpZ2h0OmluaGVyaXQ7bWluLWhlaWdodDppbmhlcml0Oy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIDE1bXMgbGluZWFyO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAxNW1zIGxpbmVhcjtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2xpbmUtaGVpZ2h0Om5vcm1hbDtjdXJzb3I6aW5oZXJpdDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3h9LnNlbGVjdC13cmFwcGVyIC5zZWxlY3QtcGxhY2Vob2xkZXJ7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTt0cmFuc2l0aW9uOm9wYWNpdHkgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKX06aG9zdCguaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpey0taGlnaGxpZ2h0LWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvci1pbnZhbGlkKX06aG9zdCguaW9uLXZhbGlkKXstLWhpZ2hsaWdodC1jb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3ItdmFsaWQpfS5sYWJlbC10ZXh0LXdyYXBwZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXgtd2lkdGg6MjAwcHg7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSksIC13ZWJraXQtdHJhbnNmb3JtIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNpdGlvbjpjb2xvciAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpLCAtd2Via2l0LXRyYW5zZm9ybSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246Y29sb3IgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSwgdHJhbnNmb3JtIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNpdGlvbjpjb2xvciAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpLCB0cmFuc2Zvcm0gMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSwgLXdlYmtpdC10cmFuc2Zvcm0gMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtwb2ludGVyLWV2ZW50czpub25lfS5sYWJlbC10ZXh0LDo6c2xvdHRlZChbc2xvdD1sYWJlbF0pe3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbn0ubGFiZWwtdGV4dC13cmFwcGVyLWhpZGRlbiwuc2VsZWN0LW91dGxpbmUtbm90Y2gtaGlkZGVue2Rpc3BsYXk6bm9uZX0ubmF0aXZlLXdyYXBwZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO292ZXJmbG93OmhpZGRlbn06aG9zdCguc2VsZWN0LWp1c3RpZnktc3BhY2UtYmV0d2VlbikgLnNlbGVjdC13cmFwcGVyey1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn06aG9zdCguc2VsZWN0LWp1c3RpZnktc3RhcnQpIC5zZWxlY3Qtd3JhcHBlcnstbXMtZmxleC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpzdGFydH06aG9zdCguc2VsZWN0LWp1c3RpZnktZW5kKSAuc2VsZWN0LXdyYXBwZXJ7LW1zLWZsZXgtcGFjazplbmQ7anVzdGlmeS1jb250ZW50OmVuZH06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFydCkgLnNlbGVjdC13cmFwcGVyey1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YXJ0KSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtbWFyZ2luLXN0YXJ0OjA7bWFyZ2luLWlubGluZS1zdGFydDowOy13ZWJraXQtbWFyZ2luLWVuZDoxNnB4O21hcmdpbi1pbmxpbmUtZW5kOjE2cHg7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1lbmQpIC5zZWxlY3Qtd3JhcHBlcnstbXMtZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2U7ZmxleC1kaXJlY3Rpb246cm93LXJldmVyc2V9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZW5kKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtbWFyZ2luLXN0YXJ0OjE2cHg7bWFyZ2luLWlubGluZS1zdGFydDoxNnB4Oy13ZWJraXQtbWFyZ2luLWVuZDowO21hcmdpbi1pbmxpbmUtZW5kOjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1maXhlZCkgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LW1hcmdpbi1zdGFydDowO21hcmdpbi1pbmxpbmUtc3RhcnQ6MDstd2Via2l0LW1hcmdpbi1lbmQ6MTZweDttYXJnaW4taW5saW5lLWVuZDoxNnB4O21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjB9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZml4ZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LW1zLWZsZXg6MCAwIDEwMHB4O2ZsZXg6MCAwIDEwMHB4O3dpZHRoOjEwMHB4O21pbi13aWR0aDoxMDBweDttYXgtd2lkdGg6MjAwcHh9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLnNlbGVjdC13cmFwcGVyLDpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAuc2VsZWN0LXdyYXBwZXJ7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47LW1zLWZsZXgtYWxpZ246c3RhcnQ7YWxpZ24taXRlbXM6c3RhcnR9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlcnttYXgtd2lkdGg6MTAwJX06aG9zdCguc2VsZWN0LWx0ci5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sdHIuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdCB0b3A7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcH06aG9zdCguc2VsZWN0LXJ0bC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1ydGwuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wO3RyYW5zZm9ybS1vcmlnaW46cmlnaHQgdG9wfTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5uYXRpdmUtd3JhcHBlciw6aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLm5hdGl2ZS13cmFwcGVye21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDoxcHg7bWFyZ2luLWJvdHRvbTowOy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7d2lkdGg6MTAwJX06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlcnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDEwMCUpIHNjYWxlKDEpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDEwMCUpIHNjYWxlKDEpfTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubmF0aXZlLXdyYXBwZXIgLnNlbGVjdC1wbGFjZWhvbGRlcntvcGFjaXR5OjB9Omhvc3QoLnNlbGVjdC1leHBhbmRlZC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubmF0aXZlLXdyYXBwZXIgLnNlbGVjdC1wbGFjZWhvbGRlciw6aG9zdCguaW9uLWZvY3VzZWQuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLm5hdGl2ZS13cmFwcGVyIC5zZWxlY3QtcGxhY2Vob2xkZXIsOmhvc3QoLmhhcy12YWx1ZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubmF0aXZlLXdyYXBwZXIgLnNlbGVjdC1wbGFjZWhvbGRlcntvcGFjaXR5OjF9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguc2VsZWN0LWV4cGFuZGVkLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLmlvbi1mb2N1c2VkLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLmhhcy12YWx1ZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoNTAlKSBzY2FsZSgwLjc1KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSg1MCUpIHNjYWxlKDAuNzUpO21heC13aWR0aDpjYWxjKDEwMCUgLyAwLjc1KX06aG9zdCgubGVnYWN5LXNlbGVjdCl7LS1wYWRkaW5nLXRvcDoxMHB4Oy0tcGFkZGluZy1lbmQ6OHB4Oy0tcGFkZGluZy1ib3R0b206MTBweDstLXBhZGRpbmctc3RhcnQ6MTZweH06aG9zdCg6bm90KC5sZWdhY3ktc2VsZWN0KSl7bWluLWhlaWdodDo0NHB4fTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSw6aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKXttaW4taGVpZ2h0OjU2cHh9LnNlbGVjdC1pY29ue3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNjUwLCAjNTk1OTU5KX06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAubmF0aXZlLXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5uYXRpdmUtd3JhcHBlcnt3aWR0aDpjYWxjKDEwMCUgLSAxOHB4IC0gNHB4KX06aG9zdCguc2VsZWN0LWRpc2FibGVkKXtvcGFjaXR5OjAuM31cIjtcblxuY29uc3Qgc2VsZWN0TWRDc3MgPSBcIjpob3N0ey0tcGFkZGluZy10b3A6MHB4Oy0tcGFkZGluZy1lbmQ6MHB4Oy0tcGFkZGluZy1ib3R0b206MHB4Oy0tcGFkZGluZy1zdGFydDowcHg7LS1wbGFjZWhvbGRlci1jb2xvcjpjdXJyZW50Q29sb3I7LS1wbGFjZWhvbGRlci1vcGFjaXR5OjAuNjstLWJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7LS1ib3JkZXItc3R5bGU6c29saWQ7LS1oaWdobGlnaHQtY29sb3ItZm9jdXNlZDp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZik7LS1oaWdobGlnaHQtY29sb3ItdmFsaWQ6dmFyKC0taW9uLWNvbG9yLXN1Y2Nlc3MsICMyZGQzNmYpOy0taGlnaGxpZ2h0LWNvbG9yLWludmFsaWQ6dmFyKC0taW9uLWNvbG9yLWRhbmdlciwgI2ViNDQ1YSk7LS1oaWdobGlnaHQtY29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yLWZvY3VzZWQpO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7Zm9udC1mYW1pbHk6dmFyKC0taW9uLWZvbnQtZmFtaWx5LCBpbmhlcml0KTt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOnBvaW50ZXI7ei1pbmRleDoyfTpob3N0KDpub3QoLmxlZ2FjeS1zZWxlY3QpKXt3aWR0aDoxMDAlfTpob3N0KC5pb24tY29sb3Ipey0taGlnaGxpZ2h0LWNvbG9yLWZvY3VzZWQ6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0KC5sZWdhY3ktc2VsZWN0KXstd2Via2l0LXBhZGRpbmctc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1pbmxpbmUtc3RhcnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7LXdlYmtpdC1wYWRkaW5nLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy1pbmxpbmUtZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLXRvcDp2YXIoLS1wYWRkaW5nLXRvcCk7cGFkZGluZy1ib3R0b206dmFyKC0tcGFkZGluZy1ib3R0b20pO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7b3ZlcmZsb3c6aGlkZGVufTpob3N0KC5pbi1pdGVtLmxlZ2FjeS1zZWxlY3Qpe3Bvc2l0aW9uOnN0YXRpYzttYXgtd2lkdGg6NDUlfTpob3N0KC5zZWxlY3QtZGlzYWJsZWQpe3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmlvbi1mb2N1c2VkKSBidXR0b257Ym9yZGVyOjJweCBzb2xpZCAjNWU5ZWQ2fTpob3N0KFtzbG90PXN0YXJ0XTpub3QoLmxlZ2FjeS1zZWxlY3QpKSw6aG9zdChbc2xvdD1lbmRdOm5vdCgubGVnYWN5LXNlbGVjdCkpe3dpZHRoOmF1dG99LnNlbGVjdC1wbGFjZWhvbGRlcntjb2xvcjp2YXIoLS1wbGFjZWhvbGRlci1jb2xvcik7b3BhY2l0eTp2YXIoLS1wbGFjZWhvbGRlci1vcGFjaXR5KX06aG9zdCgubGVnYWN5LXNlbGVjdCkgbGFiZWx7dG9wOjA7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjA7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtjdXJzb3I6cG9pbnRlcjstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZTthcHBlYXJhbmNlOm5vbmU7b3V0bGluZTpub25lO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7b3BhY2l0eTowfUBzdXBwb3J0cyAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKXs6aG9zdCgubGVnYWN5LXNlbGVjdCkgbGFiZWx7aW5zZXQtaW5saW5lLXN0YXJ0OjB9fUBzdXBwb3J0cyBub3QgKGluc2V0LWlubGluZS1zdGFydDogMCl7Omhvc3QoLmxlZ2FjeS1zZWxlY3QpIGxhYmVse2xlZnQ6MH06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCgubGVnYWN5LXNlbGVjdCkgbGFiZWwsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLmxlZ2FjeS1zZWxlY3QgbGFiZWx7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfUBzdXBwb3J0cyBzZWxlY3Rvcig6ZGlyKHJ0bCkpezpob3N0KC5sZWdhY3ktc2VsZWN0KSBsYWJlbDpkaXIocnRsKXtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjB9fX06aG9zdCgubGVnYWN5LXNlbGVjdCkgbGFiZWw6Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyOjB9YnV0dG9ue3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7bWFyZ2luOjA7cGFkZGluZzowO2JvcmRlcjowO291dGxpbmU6MDtjbGlwOnJlY3QoMCAwIDAgMCk7b3BhY2l0eTowO292ZXJmbG93OmhpZGRlbjstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTstbW96LWFwcGVhcmFuY2U6bm9uZX0uc2VsZWN0LWljb257LXdlYmtpdC1tYXJnaW4tc3RhcnQ6NHB4O21hcmdpbi1pbmxpbmUtc3RhcnQ6NHB4Oy13ZWJraXQtbWFyZ2luLWVuZDowO21hcmdpbi1pbmxpbmUtZW5kOjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MDtwb3NpdGlvbjpyZWxhdGl2ZX06aG9zdCguaW4taXRlbS1jb2xvcikgLnNlbGVjdC1pY29ue2NvbG9yOmluaGVyaXR9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLnNlbGVjdC1pY29uLDpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAuc2VsZWN0LWljb257cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjEwMCV9Omhvc3QoLnNlbGVjdC1sdHIuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAuc2VsZWN0LWljb24sOmhvc3QoLnNlbGVjdC1sdHIuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLnNlbGVjdC1pY29ue3JpZ2h0OnZhcigtLXBhZGRpbmctZW5kLCAwKX06aG9zdCguc2VsZWN0LXJ0bC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5zZWxlY3QtaWNvbiw6aG9zdCguc2VsZWN0LXJ0bC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAuc2VsZWN0LWljb257bGVmdDp2YXIoLS1wYWRkaW5nLXN0YXJ0LCAwKX0uc2VsZWN0LXRleHR7LW1zLWZsZXg6MTtmbGV4OjE7bWluLXdpZHRoOjE2cHg7Zm9udC1zaXplOmluaGVyaXQ7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTppbmhlcml0O292ZXJmbG93OmhpZGRlbn0uc2VsZWN0LXdyYXBwZXJ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTtib3JkZXItcmFkaXVzOnZhcigtLWJvcmRlci1yYWRpdXMpO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjE7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6aW5oZXJpdDttaW4taGVpZ2h0OmluaGVyaXQ7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgMTVtcyBsaW5lYXI7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIDE1bXMgbGluZWFyO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7bGluZS1oZWlnaHQ6bm9ybWFsO2N1cnNvcjppbmhlcml0Oy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH0uc2VsZWN0LXdyYXBwZXIgLnNlbGVjdC1wbGFjZWhvbGRlcnstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246b3BhY2l0eSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpfTpob3N0KC5pb24tdG91Y2hlZC5pb24taW52YWxpZCl7LS1oaWdobGlnaHQtY29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yLWludmFsaWQpfTpob3N0KC5pb24tdmFsaWQpey0taGlnaGxpZ2h0LWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvci12YWxpZCl9LmxhYmVsLXRleHQtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO21heC13aWR0aDoyMDBweDstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKSwgLXdlYmtpdC10cmFuc2Zvcm0gMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTt0cmFuc2l0aW9uOmNvbG9yIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSksIC13ZWJraXQtdHJhbnNmb3JtIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNpdGlvbjpjb2xvciAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpLCB0cmFuc2Zvcm0gMTUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTt0cmFuc2l0aW9uOmNvbG9yIDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSksIHRyYW5zZm9ybSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpLCAtd2Via2l0LXRyYW5zZm9ybSAxNTBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3BvaW50ZXItZXZlbnRzOm5vbmV9LmxhYmVsLXRleHQsOjpzbG90dGVkKFtzbG90PWxhYmVsXSl7dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVufS5sYWJlbC10ZXh0LXdyYXBwZXItaGlkZGVuLC5zZWxlY3Qtb3V0bGluZS1ub3RjaC1oaWRkZW57ZGlzcGxheTpub25lfS5uYXRpdmUtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7dHJhbnNpdGlvbjpvcGFjaXR5IDE1MG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7b3ZlcmZsb3c6aGlkZGVufTpob3N0KC5zZWxlY3QtanVzdGlmeS1zcGFjZS1iZXR3ZWVuKSAuc2VsZWN0LXdyYXBwZXJ7LW1zLWZsZXgtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufTpob3N0KC5zZWxlY3QtanVzdGlmeS1zdGFydCkgLnNlbGVjdC13cmFwcGVyey1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0fTpob3N0KC5zZWxlY3QtanVzdGlmeS1lbmQpIC5zZWxlY3Qtd3JhcHBlcnstbXMtZmxleC1wYWNrOmVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZW5kfTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YXJ0KSAuc2VsZWN0LXdyYXBwZXJ7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhcnQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjE2cHg7bWFyZ2luLWlubGluZS1lbmQ6MTZweDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowfTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWVuZCkgLnNlbGVjdC13cmFwcGVyey1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZX06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1lbmQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MTZweDttYXJnaW4taW5saW5lLXN0YXJ0OjE2cHg7LXdlYmtpdC1tYXJnaW4tZW5kOjA7bWFyZ2luLWlubGluZS1lbmQ6MDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowfTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZpeGVkKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtbWFyZ2luLXN0YXJ0OjA7bWFyZ2luLWlubGluZS1zdGFydDowOy13ZWJraXQtbWFyZ2luLWVuZDoxNnB4O21hcmdpbi1pbmxpbmUtZW5kOjE2cHg7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1maXhlZCkgLmxhYmVsLXRleHQtd3JhcHBlcnstbXMtZmxleDowIDAgMTAwcHg7ZmxleDowIDAgMTAwcHg7d2lkdGg6MTAwcHg7bWluLXdpZHRoOjEwMHB4O21heC13aWR0aDoyMDBweH06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAuc2VsZWN0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5zZWxlY3Qtd3JhcHBlcnstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjstbXMtZmxleC1hbGlnbjpzdGFydDthbGlnbi1pdGVtczpzdGFydH06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVye21heC13aWR0aDoxMDAlfTpob3N0KC5zZWxlY3QtbHRyLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguc2VsZWN0LWx0ci5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpsZWZ0IHRvcDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wfTpob3N0KC5zZWxlY3QtcnRsLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguc2VsZWN0LXJ0bC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCB0b3A7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCB0b3B9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLm5hdGl2ZS13cmFwcGVyLDpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubmF0aXZlLXdyYXBwZXJ7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjFweDttYXJnaW4tYm90dG9tOjA7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTt3aWR0aDoxMDAlfTpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSkgc2NhbGUoMSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMTAwJSkgc2NhbGUoMSl9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5uYXRpdmUtd3JhcHBlciAuc2VsZWN0LXBsYWNlaG9sZGVye29wYWNpdHk6MH06aG9zdCguc2VsZWN0LWV4cGFuZGVkLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5uYXRpdmUtd3JhcHBlciAuc2VsZWN0LXBsYWNlaG9sZGVyLDpob3N0KC5pb24tZm9jdXNlZC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubmF0aXZlLXdyYXBwZXIgLnNlbGVjdC1wbGFjZWhvbGRlciw6aG9zdCguaGFzLXZhbHVlLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5uYXRpdmUtd3JhcHBlciAuc2VsZWN0LXBsYWNlaG9sZGVye29wYWNpdHk6MX06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0KC5zZWxlY3QtZXhwYW5kZWQuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguaW9uLWZvY3VzZWQuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguaGFzLXZhbHVlLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSg1MCUpIHNjYWxlKDAuNzUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDUwJSkgc2NhbGUoMC43NSk7bWF4LXdpZHRoOmNhbGMoMTAwJSAvIDAuNzUpfTpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZCl7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTUwLCAjZjJmMmYyKTstLWJvcmRlci1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC01MDAsIGdyYXkpOy0tYm9yZGVyLXJhZGl1czo0cHg7LS1wYWRkaW5nLXN0YXJ0OjE2cHg7LS1wYWRkaW5nLWVuZDoxNnB4fTpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZCkgLnNlbGVjdC13cmFwcGVye2JvcmRlci1ib3R0b206dmFyKC0tYm9yZGVyLXdpZHRoKSB2YXIoLS1ib3JkZXItc3R5bGUpIHZhcigtLWJvcmRlci1jb2xvcil9Omhvc3QoLmhhcy1mb2N1cy5zZWxlY3QtZmlsbC1zb2xpZC5pb24tdmFsaWQpLDpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZC5pb24tdG91Y2hlZC5pb24taW52YWxpZCl7LS1ib3JkZXItY29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yKX06aG9zdCguc2VsZWN0LWZpbGwtc29saWQpIC5zZWxlY3QtYm90dG9te2JvcmRlci10b3A6bm9uZX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZDpob3Zlcil7LS1iYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTEwMCwgI2U2ZTZlNik7LS1ib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNzUwLCAjNDA0MDQwKX19Omhvc3QoLnNlbGVjdC1maWxsLXNvbGlkLnNlbGVjdC1leHBhbmRlZCksOmhvc3QoLnNlbGVjdC1maWxsLXNvbGlkLmlvbi1mb2N1c2VkKXstLWJhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCAjZDlkOWQ5KTstLWJvcmRlci1jb2xvcjp2YXIoLS1pb24tY29sb3Itc3RlcC03NTAsICM0MDQwNDApfTpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZCkgLnNlbGVjdC13cmFwcGVye2JvcmRlci10b3AtbGVmdC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MHB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MHB4fTpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZCkgLnNlbGVjdC13cmFwcGVyLDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5zZWxlY3QtZmlsbC1zb2xpZCAuc2VsZWN0LXdyYXBwZXJ7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowcHh9QHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSl7Omhvc3QoLnNlbGVjdC1maWxsLXNvbGlkKSAuc2VsZWN0LXdyYXBwZXI6ZGlyKHJ0bCl7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowcHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowcHh9fTpob3N0KC5zZWxlY3QtZmlsbC1zb2xpZC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1leHBhbmRlZC5zZWxlY3QtZmlsbC1zb2xpZC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0KC5pb24tZm9jdXNlZC5zZWxlY3QtZmlsbC1zb2xpZC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0KC5oYXMtdmFsdWUuc2VsZWN0LWZpbGwtc29saWQuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlcnttYXgtd2lkdGg6Y2FsYygxMDAlIC8gMC43NSl9Omhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUpey0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTMwMCwgI2IzYjNiMyk7LS1ib3JkZXItcmFkaXVzOjRweDstLXBhZGRpbmctc3RhcnQ6MTZweDstLXBhZGRpbmctZW5kOjE2cHh9Omhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUuc2VsZWN0LXNoYXBlLXJvdW5kKXstLWJvcmRlci1yYWRpdXM6MjhweDstLXBhZGRpbmctc3RhcnQ6MzJweDstLXBhZGRpbmctZW5kOjMycHh9Omhvc3QoLmhhcy1mb2N1cy5zZWxlY3QtZmlsbC1vdXRsaW5lLmlvbi12YWxpZCksOmhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUuaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpey0tYm9yZGVyLWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvcil9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZTpob3Zlcil7LS1ib3JkZXItY29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNzUwLCAjNDA0MDQwKX19Omhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUuc2VsZWN0LWV4cGFuZGVkKSw6aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZS5pb24tZm9jdXNlZCl7LS1ib3JkZXItd2lkdGg6MnB4Oy0tYm9yZGVyLWNvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvcil9Omhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUpIC5zZWxlY3QtYm90dG9te2JvcmRlci10b3A6bm9uZX06aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZSkgLnNlbGVjdC13cmFwcGVye2JvcmRlci1ib3R0b206bm9uZX06aG9zdCguc2VsZWN0LWx0ci5zZWxlY3QtZmlsbC1vdXRsaW5lLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguc2VsZWN0LWx0ci5zZWxlY3QtZmlsbC1vdXRsaW5lLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wO3RyYW5zZm9ybS1vcmlnaW46bGVmdCB0b3B9Omhvc3QoLnNlbGVjdC1ydGwuc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1ydGwuc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubGFiZWwtdGV4dC13cmFwcGVyey13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpyaWdodCB0b3A7dHJhbnNmb3JtLW9yaWdpbjpyaWdodCB0b3B9Omhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1zdGFja2VkKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0KC5zZWxlY3QtZmlsbC1vdXRsaW5lLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7cG9zaXRpb246YWJzb2x1dGU7bWF4LXdpZHRoOmNhbGMoMTAwJSAtIHZhcigtLXBhZGRpbmctc3RhcnQpIC0gdmFyKC0tcGFkZGluZy1lbmQpKX06aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZSkgLmxhYmVsLXRleHQtd3JhcHBlcntwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjF9Omhvc3QoLnNlbGVjdC1leHBhbmRlZC5zZWxlY3QtZmlsbC1vdXRsaW5lLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLmlvbi1mb2N1c2VkLnNlbGVjdC1maWxsLW91dGxpbmUuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguaGFzLXZhbHVlLnNlbGVjdC1maWxsLW91dGxpbmUuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZykgLmxhYmVsLXRleHQtd3JhcHBlciw6aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzIlKSBzY2FsZSgwLjc1KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzIlKSBzY2FsZSgwLjc1KTttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjA7bWF4LXdpZHRoOmNhbGMoKDEwMCUgLSB2YXIoLS1wYWRkaW5nLXN0YXJ0KSAtIHZhcigtLXBhZGRpbmctZW5kKSAtIDhweCkgLyAwLjc1KX06aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIHNlbGVjdCw6aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSBzZWxlY3R7bWFyZ2luLWxlZnQ6MDttYXJnaW4tcmlnaHQ6MDttYXJnaW4tdG9wOjZweDttYXJnaW4tYm90dG9tOjZweH06aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZSkgLnNlbGVjdC1vdXRsaW5lLWNvbnRhaW5lcntsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfTpob3N0KC5zZWxlY3QtZmlsbC1vdXRsaW5lKSAuc2VsZWN0LW91dGxpbmUtc3RhcnQsOmhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUpIC5zZWxlY3Qtb3V0bGluZS1lbmR7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZSkgLnNlbGVjdC1vdXRsaW5lLXN0YXJ0LDpob3N0KC5zZWxlY3QtZmlsbC1vdXRsaW5lKSAuc2VsZWN0LW91dGxpbmUtbm90Y2gsOmhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUpIC5zZWxlY3Qtb3V0bGluZS1lbmR7Ym9yZGVyLXRvcDp2YXIoLS1ib3JkZXItd2lkdGgpIHZhcigtLWJvcmRlci1zdHlsZSkgdmFyKC0tYm9yZGVyLWNvbG9yKTtib3JkZXItYm90dG9tOnZhcigtLWJvcmRlci13aWR0aCkgdmFyKC0tYm9yZGVyLXN0eWxlKSB2YXIoLS1ib3JkZXItY29sb3IpOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveH06aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZSkgLnNlbGVjdC1vdXRsaW5lLW5vdGNoe21heC13aWR0aDpjYWxjKDEwMCUgLSB2YXIoLS1wYWRkaW5nLXN0YXJ0KSAtIHZhcigtLXBhZGRpbmctZW5kKSl9Omhvc3QoLnNlbGVjdC1maWxsLW91dGxpbmUpIC5ub3RjaC1zcGFjZXJ7LXdlYmtpdC1wYWRkaW5nLWVuZDo4cHg7cGFkZGluZy1pbmxpbmUtZW5kOjhweDtmb250LXNpemU6Y2FsYygxZW0gKiAwLjc1KTtvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguc2VsZWN0LWx0ci5zZWxlY3QtZmlsbC1vdXRsaW5lKSAuc2VsZWN0LW91dGxpbmUtc3RhcnR7Ym9yZGVyLWxlZnQ6dmFyKC0tYm9yZGVyLXdpZHRoKSB2YXIoLS1ib3JkZXItc3R5bGUpIHZhcigtLWJvcmRlci1jb2xvcik7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKSAwcHggMHB4IHZhcigtLWJvcmRlci1yYWRpdXMpfTpob3N0KC5zZWxlY3QtcnRsLnNlbGVjdC1maWxsLW91dGxpbmUpIC5zZWxlY3Qtb3V0bGluZS1zdGFydHtib3JkZXItcmlnaHQ6dmFyKC0tYm9yZGVyLXdpZHRoKSB2YXIoLS1ib3JkZXItc3R5bGUpIHZhcigtLWJvcmRlci1jb2xvcik7Ym9yZGVyLXJhZGl1czowcHggdmFyKC0tYm9yZGVyLXJhZGl1cykgdmFyKC0tYm9yZGVyLXJhZGl1cykgMHB4fTpob3N0KC5zZWxlY3QtZmlsbC1vdXRsaW5lKSAuc2VsZWN0LW91dGxpbmUtc3RhcnR7d2lkdGg6Y2FsYyh2YXIoLS1wYWRkaW5nLXN0YXJ0KSAtIDRweCl9Omhvc3QoLnNlbGVjdC1sdHIuc2VsZWN0LWZpbGwtb3V0bGluZSkgLnNlbGVjdC1vdXRsaW5lLWVuZHtib3JkZXItcmlnaHQ6dmFyKC0tYm9yZGVyLXdpZHRoKSB2YXIoLS1ib3JkZXItc3R5bGUpIHZhcigtLWJvcmRlci1jb2xvcik7Ym9yZGVyLXJhZGl1czowcHggdmFyKC0tYm9yZGVyLXJhZGl1cykgdmFyKC0tYm9yZGVyLXJhZGl1cykgMHB4fTpob3N0KC5zZWxlY3QtcnRsLnNlbGVjdC1maWxsLW91dGxpbmUpIC5zZWxlY3Qtb3V0bGluZS1lbmR7Ym9yZGVyLWxlZnQ6dmFyKC0tYm9yZGVyLXdpZHRoKSB2YXIoLS1ib3JkZXItc3R5bGUpIHZhcigtLWJvcmRlci1jb2xvcik7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKSAwcHggMHB4IHZhcigtLWJvcmRlci1yYWRpdXMpfTpob3N0KC5zZWxlY3QtZmlsbC1vdXRsaW5lKSAuc2VsZWN0LW91dGxpbmUtZW5key1tcy1mbGV4LXBvc2l0aXZlOjE7ZmxleC1ncm93OjF9Omhvc3QoLnNlbGVjdC1leHBhbmRlZC5zZWxlY3QtZmlsbC1vdXRsaW5lLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5zZWxlY3Qtb3V0bGluZS1ub3RjaCw6aG9zdCguaW9uLWZvY3VzZWQuc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAuc2VsZWN0LW91dGxpbmUtbm90Y2gsOmhvc3QoLmhhcy12YWx1ZS5zZWxlY3QtZmlsbC1vdXRsaW5lLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcpIC5zZWxlY3Qtb3V0bGluZS1ub3RjaCw6aG9zdCguc2VsZWN0LWZpbGwtb3V0bGluZS5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQpIC5zZWxlY3Qtb3V0bGluZS1ub3RjaHtib3JkZXItdG9wOm5vbmV9Omhvc3R7LS1ib3JkZXItd2lkdGg6MXB4Oy0tYm9yZGVyLWNvbG9yOnZhcigtLWlvbi1pdGVtLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWJvcmRlci1jb2xvciwgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMTUwLCByZ2JhKDAsIDAsIDAsIDAuMTMpKSkpfTpob3N0KC5sZWdhY3ktc2VsZWN0KXstLXBhZGRpbmctdG9wOjEwcHg7LS1wYWRkaW5nLWVuZDowOy0tcGFkZGluZy1ib3R0b206MTBweDstLXBhZGRpbmctc3RhcnQ6MTZweH06aG9zdCg6bm90KC5sZWdhY3ktc2VsZWN0KSl7bWluLWhlaWdodDo1NnB4fS5zZWxlY3QtaWNvbnt3aWR0aDoxM3B4Oy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAwLjE1cyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gMC4xNXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTt0cmFuc2l0aW9uOnRyYW5zZm9ybSAwLjE1cyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO3RyYW5zaXRpb246dHJhbnNmb3JtIDAuMTVzIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSksIC13ZWJraXQtdHJhbnNmb3JtIDAuMTVzIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7Y29sb3I6dmFyKC0taW9uLWNvbG9yLXN0ZXAtNTAwLCBncmF5KX06aG9zdCguc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZy5zZWxlY3QtZXhwYW5kZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcuaW9uLWZvY3VzZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5zZWxlY3QtZXhwYW5kZWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZC5pb24tZm9jdXNlZCkgLmxhYmVsLXRleHQtd3JhcHBlcntjb2xvcjp2YXIoLS1oaWdobGlnaHQtY29sb3IpfTpob3N0KC5oYXMtZm9jdXMuc2VsZWN0LWxhYmVsLXBsYWNlbWVudC1mbG9hdGluZy5pb24tdmFsaWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtZmxvYXRpbmcuaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5sYWJlbC10ZXh0LXdyYXBwZXIsOmhvc3QoLmhhcy1mb2N1cy5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQuaW9uLXZhbGlkKSAubGFiZWwtdGV4dC13cmFwcGVyLDpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LXN0YWNrZWQuaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5sYWJlbC10ZXh0LXdyYXBwZXJ7Y29sb3I6dmFyKC0taGlnaGxpZ2h0LWNvbG9yKX0uc2VsZWN0LWhpZ2hsaWdodHtib3R0b206LTFweDtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoycHg7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNmb3JtOnNjYWxlKDApOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAyMDBtczt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDIwMG1zO3RyYW5zaXRpb246dHJhbnNmb3JtIDIwMG1zO3RyYW5zaXRpb246dHJhbnNmb3JtIDIwMG1zLCAtd2Via2l0LXRyYW5zZm9ybSAyMDBtcztiYWNrZ3JvdW5kOnZhcigtLWhpZ2hsaWdodC1jb2xvcil9QHN1cHBvcnRzIChpbnNldC1pbmxpbmUtc3RhcnQ6IDApey5zZWxlY3QtaGlnaGxpZ2h0e2luc2V0LWlubGluZS1zdGFydDowfX1Ac3VwcG9ydHMgbm90IChpbnNldC1pbmxpbmUtc3RhcnQ6IDApey5zZWxlY3QtaGlnaGxpZ2h0e2xlZnQ6MH06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgLnNlbGVjdC1oaWdobGlnaHR7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfVtkaXI9cnRsXSAuc2VsZWN0LWhpZ2hsaWdodHtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjB9QHN1cHBvcnRzIHNlbGVjdG9yKDpkaXIocnRsKSl7LnNlbGVjdC1oaWdobGlnaHQ6ZGlyKHJ0bCl7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfX19Omhvc3QoLnNlbGVjdC1leHBhbmRlZCkgLnNlbGVjdC1oaWdobGlnaHQsOmhvc3QoLmlvbi1mb2N1c2VkKSAuc2VsZWN0LWhpZ2hsaWdodHstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9Omhvc3QoLmluLWl0ZW0pIC5zZWxlY3QtaGlnaGxpZ2h0e2JvdHRvbTowfUBzdXBwb3J0cyAoaW5zZXQtaW5saW5lLXN0YXJ0OiAwKXs6aG9zdCguaW4taXRlbSkgLnNlbGVjdC1oaWdobGlnaHR7aW5zZXQtaW5saW5lLXN0YXJ0OjB9fUBzdXBwb3J0cyBub3QgKGluc2V0LWlubGluZS1zdGFydDogMCl7Omhvc3QoLmluLWl0ZW0pIC5zZWxlY3QtaGlnaGxpZ2h0e2xlZnQ6MH06aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCguaW4taXRlbSkgLnNlbGVjdC1oaWdobGlnaHQsOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLmluLWl0ZW0gLnNlbGVjdC1oaWdobGlnaHR7bGVmdDp1bnNldDtyaWdodDp1bnNldDtyaWdodDowfUBzdXBwb3J0cyBzZWxlY3Rvcig6ZGlyKHJ0bCkpezpob3N0KC5pbi1pdGVtKSAuc2VsZWN0LWhpZ2hsaWdodDpkaXIocnRsKXtsZWZ0OnVuc2V0O3JpZ2h0OnVuc2V0O3JpZ2h0OjB9fX06aG9zdCguc2VsZWN0LWV4cGFuZGVkOm5vdCgubGVnYWN5LXNlbGVjdCk6bm90KC5oYXMtZXhwYW5kZWQtaWNvbikpIC5zZWxlY3QtaWNvbnstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9Omhvc3QoLnNlbGVjdC1leHBhbmRlZCkgLnNlbGVjdC13cmFwcGVyIC5zZWxlY3QtaWNvbiw6aG9zdCguaGFzLWZvY3VzLmlvbi12YWxpZCkgLnNlbGVjdC13cmFwcGVyIC5zZWxlY3QtaWNvbiw6aG9zdCguaW9uLXRvdWNoZWQuaW9uLWludmFsaWQpIC5zZWxlY3Qtd3JhcHBlciAuc2VsZWN0LWljb24sOmhvc3QoLmlvbi1mb2N1c2VkKSAuc2VsZWN0LXdyYXBwZXIgLnNlbGVjdC1pY29ue2NvbG9yOnZhcigtLWhpZ2hsaWdodC1jb2xvcil9Omhvc3QtY29udGV4dCguaXRlbS1sYWJlbC1zdGFja2VkKSAuc2VsZWN0LWljb24sOmhvc3QtY29udGV4dCguaXRlbS1sYWJlbC1mbG9hdGluZzpub3QoLml0ZW0tZmlsbC1vdXRsaW5lKSkgLnNlbGVjdC1pY29uLDpob3N0LWNvbnRleHQoLml0ZW0tbGFiZWwtZmxvYXRpbmcuaXRlbS1maWxsLW91dGxpbmUpey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAtOXB4LCAgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAtOXB4LCAgMCl9Omhvc3QtY29udGV4dCguaXRlbS1oYXMtZm9jdXMpOmhvc3QoOm5vdCguaGFzLWV4cGFuZGVkLWljb24pKSAuc2VsZWN0LWljb257LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTpob3N0LWNvbnRleHQoLml0ZW0taGFzLWZvY3VzLml0ZW0tbGFiZWwtc3RhY2tlZCk6aG9zdCg6bm90KC5oYXMtZXhwYW5kZWQtaWNvbikpIC5zZWxlY3QtaWNvbiw6aG9zdC1jb250ZXh0KC5pdGVtLWhhcy1mb2N1cy5pdGVtLWxhYmVsLWZsb2F0aW5nOm5vdCguaXRlbS1maWxsLW91dGxpbmUpKTpob3N0KDpub3QoLmhhcy1leHBhbmRlZC1pY29uKSkgLnNlbGVjdC1pY29uey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAtOXB4LCAgMCkgcm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAtOXB4LCAgMCkgcm90YXRlKDE4MGRlZyl9Omhvc3QoLnNlbGVjdC1zaGFwZS1yb3VuZCl7LS1ib3JkZXItcmFkaXVzOjE2cHh9Omhvc3QoLnNlbGVjdC1sYWJlbC1wbGFjZW1lbnQtc3RhY2tlZCkgLm5hdGl2ZS13cmFwcGVyLDpob3N0KC5zZWxlY3QtbGFiZWwtcGxhY2VtZW50LWZsb2F0aW5nKSAubmF0aXZlLXdyYXBwZXJ7d2lkdGg6Y2FsYygxMDAlIC0gMTNweCAtIDRweCl9Omhvc3QoLnNlbGVjdC1kaXNhYmxlZCl7b3BhY2l0eTowLjM4fVwiO1xuXG5jb25zdCBTZWxlY3QgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMuaW9uQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25DaGFuZ2VcIiwgNyk7XG4gICAgdGhpcy5pb25DYW5jZWwgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNhbmNlbFwiLCA3KTtcbiAgICB0aGlzLmlvbkRpc21pc3MgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkRpc21pc3NcIiwgNyk7XG4gICAgdGhpcy5pb25Gb2N1cyA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uRm9jdXNcIiwgNyk7XG4gICAgdGhpcy5pb25CbHVyID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25CbHVyXCIsIDcpO1xuICAgIHRoaXMuaW9uU3R5bGUgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblN0eWxlXCIsIDcpO1xuICAgIHRoaXMuaW5wdXRJZCA9IGBpb24tc2VsLSR7c2VsZWN0SWRzKyt9YDtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSB7fTtcbiAgICAvLyBUaGlzIGZsYWcgZW5zdXJlcyB3ZSBsb2cgdGhlIGRlcHJlY2F0aW9uIHdhcm5pbmcgYXQgbW9zdCBvbmNlLlxuICAgIHRoaXMuaGFzTG9nZ2VkRGVwcmVjYXRpb25XYXJuaW5nID0gZmFsc2U7XG4gICAgdGhpcy5vbkNsaWNrID0gKGV2KSA9PiB7XG4gICAgICB0aGlzLnNldEZvY3VzKCk7XG4gICAgICB0aGlzLm9wZW4oZXYpO1xuICAgIH07XG4gICAgdGhpcy5vbkZvY3VzID0gKCkgPT4ge1xuICAgICAgdGhpcy5pb25Gb2N1cy5lbWl0KCk7XG4gICAgfTtcbiAgICB0aGlzLm9uQmx1ciA9ICgpID0+IHtcbiAgICAgIHRoaXMuaW9uQmx1ci5lbWl0KCk7XG4gICAgfTtcbiAgICB0aGlzLmlzRXhwYW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNhbmNlbFRleHQgPSAnQ2FuY2VsJztcbiAgICB0aGlzLmNvbG9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29tcGFyZVdpdGggPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlsbCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmludGVyZmFjZSA9ICdhbGVydCc7XG4gICAgdGhpcy5pbnRlcmZhY2VPcHRpb25zID0ge307XG4gICAgdGhpcy5qdXN0aWZ5ID0gJ3NwYWNlLWJldHdlZW4nO1xuICAgIHRoaXMubGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5sYWJlbFBsYWNlbWVudCA9ICdzdGFydCc7XG4gICAgdGhpcy5sZWdhY3kgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tdWx0aXBsZSA9IGZhbHNlO1xuICAgIHRoaXMubmFtZSA9IHRoaXMuaW5wdXRJZDtcbiAgICB0aGlzLm9rVGV4dCA9ICdPSyc7XG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnNlbGVjdGVkVGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnRvZ2dsZUljb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5leHBhbmRlZEljb24gPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zaGFwZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIHN0eWxlQ2hhbmdlZCgpIHtcbiAgICB0aGlzLmVtaXRTdHlsZSgpO1xuICB9XG4gIHNldFZhbHVlKHZhbHVlKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuaW9uQ2hhbmdlLmVtaXQoeyB2YWx1ZSB9KTtcbiAgfVxuICBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICB0aGlzLmluaGVyaXRlZEF0dHJpYnV0ZXMgPSBpbmhlcml0QXR0cmlidXRlcyh0aGlzLmVsLCBbJ2FyaWEtbGFiZWwnXSk7XG4gIH1cbiAgYXN5bmMgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgY29uc3QgeyBlbCB9ID0gdGhpcztcbiAgICB0aGlzLmxlZ2FjeUZvcm1Db250cm9sbGVyID0gY3JlYXRlTGVnYWN5Rm9ybUNvbnRyb2xsZXIoZWwpO1xuICAgIHRoaXMubm90Y2hDb250cm9sbGVyID0gY3JlYXRlTm90Y2hDb250cm9sbGVyKGVsLCAoKSA9PiB0aGlzLm5vdGNoU3BhY2VyRWwsICgpID0+IHRoaXMubGFiZWxTbG90KTtcbiAgICB0aGlzLnVwZGF0ZU92ZXJsYXlPcHRpb25zKCk7XG4gICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgICB0aGlzLm11dGF0aW9uTyA9IHdhdGNoRm9yT3B0aW9ucyh0aGlzLmVsLCAnaW9uLXNlbGVjdC1vcHRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZU92ZXJsYXlPcHRpb25zKCk7XG4gICAgICAvKipcbiAgICAgICAqIFdlIG5lZWQgdG8gcmUtcmVuZGVyIHRoZSBjb21wb25lbnRcbiAgICAgICAqIGJlY2F1c2Ugb25lIG9mIHRoZSBuZXcgaW9uLXNlbGVjdC1vcHRpb25cbiAgICAgICAqIGVsZW1lbnRzIG1heSBtYXRjaCB0aGUgdmFsdWUuIEluIHRoaXMgY2FzZSxcbiAgICAgICAqIHRoZSByZW5kZXJlZCBzZWxlY3RlZCB0ZXh0IHNob3VsZCBiZSB1cGRhdGVkLlxuICAgICAgICovXG4gICAgICBmb3JjZVVwZGF0ZSh0aGlzKTtcbiAgICB9KTtcbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBpZiAodGhpcy5tdXRhdGlvbk8pIHtcbiAgICAgIHRoaXMubXV0YXRpb25PLmRpc2Nvbm5lY3QoKTtcbiAgICAgIHRoaXMubXV0YXRpb25PID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodGhpcy5ub3RjaENvbnRyb2xsZXIpIHtcbiAgICAgIHRoaXMubm90Y2hDb250cm9sbGVyLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMubm90Y2hDb250cm9sbGVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT3BlbiB0aGUgc2VsZWN0IG92ZXJsYXkuIFRoZSBvdmVybGF5IGlzIGVpdGhlciBhbiBhbGVydCwgYWN0aW9uIHNoZWV0LCBvciBwb3BvdmVyLFxuICAgKiBkZXBlbmRpbmcgb24gdGhlIGBpbnRlcmZhY2VgIHByb3BlcnR5IG9uIHRoZSBgaW9uLXNlbGVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCBUaGUgdXNlciBpbnRlcmZhY2UgZXZlbnQgdGhhdCBjYWxsZWQgdGhlIG9wZW4uXG4gICAqL1xuICBhc3luYyBvcGVuKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5pc0V4cGFuZGVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLmlzRXhwYW5kZWQgPSB0cnVlO1xuICAgIGNvbnN0IG92ZXJsYXkgPSAodGhpcy5vdmVybGF5ID0gYXdhaXQgdGhpcy5jcmVhdGVPdmVybGF5KGV2ZW50KSk7XG4gICAgb3ZlcmxheS5vbkRpZERpc21pc3MoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMub3ZlcmxheSA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuaXNFeHBhbmRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pb25EaXNtaXNzLmVtaXQoKTtcbiAgICAgIHRoaXMuc2V0Rm9jdXMoKTtcbiAgICB9KTtcbiAgICBhd2FpdCBvdmVybGF5LnByZXNlbnQoKTtcbiAgICAvLyBmb2N1cyBzZWxlY3RlZCBvcHRpb24gZm9yIHBvcG92ZXJzXG4gICAgaWYgKHRoaXMuaW50ZXJmYWNlID09PSAncG9wb3ZlcicpIHtcbiAgICAgIGxldCBpbmRleE9mU2VsZWN0ZWQgPSB0aGlzLmNoaWxkT3B0cy5tYXAoKG8pID0+IG8udmFsdWUpLmluZGV4T2YodGhpcy52YWx1ZSk7XG4gICAgICBpbmRleE9mU2VsZWN0ZWQgPSBpbmRleE9mU2VsZWN0ZWQgPiAtMSA/IGluZGV4T2ZTZWxlY3RlZCA6IDA7IC8vIGRlZmF1bHQgdG8gZmlyc3Qgb3B0aW9uIGlmIG5vdGhpbmcgc2VsZWN0ZWRcbiAgICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IG92ZXJsYXkucXVlcnlTZWxlY3RvcihgLnNlbGVjdC1pbnRlcmZhY2Utb3B0aW9uOm50aC1jaGlsZCgke2luZGV4T2ZTZWxlY3RlZCArIDF9KWApO1xuICAgICAgaWYgKHNlbGVjdGVkSXRlbSkge1xuICAgICAgICBmb2N1c0VsZW1lbnQoc2VsZWN0ZWRJdGVtKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJyb3dzZXJzIHN1Y2ggYXMgRmlyZWZveCBkbyBub3RcbiAgICAgICAgICogY29ycmVjdGx5IGRlbGVnYXRlIGZvY3VzIHdoZW4gbWFudWFsbHlcbiAgICAgICAgICogZm9jdXNpbmcgYW4gZWxlbWVudCB3aXRoIGRlbGVnYXRlc0ZvY3VzLlxuICAgICAgICAgKiBXZSB3b3JrIGFyb3VuZCB0aGlzIGJ5IG1hbnVhbGx5IGZvY3VzaW5nXG4gICAgICAgICAqIHRoZSBpbnRlcmFjdGl2ZSBlbGVtZW50LlxuICAgICAgICAgKiBpb24tcmFkaW8gYW5kIGlvbi1jaGVja2JveCBhcmUgdGhlIG9ubHlcbiAgICAgICAgICogZWxlbWVudHMgdGhhdCBpb24tc2VsZWN0LXBvcG92ZXIgdXNlcywgc29cbiAgICAgICAgICogd2Ugb25seSBuZWVkIHRvIHdvcnJ5IGFib3V0IHRob3NlIHR3byBjb21wb25lbnRzXG4gICAgICAgICAqIHdoZW4gZm9jdXNpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdCBpbnRlcmFjdGl2ZUVsID0gc2VsZWN0ZWRJdGVtLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yYWRpbywgaW9uLWNoZWNrYm94Jyk7XG4gICAgICAgIGlmIChpbnRlcmFjdGl2ZUVsKSB7XG4gICAgICAgICAgaW50ZXJhY3RpdmVFbC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdmVybGF5O1xuICB9XG4gIGNyZWF0ZU92ZXJsYXkoZXYpIHtcbiAgICBsZXQgc2VsZWN0SW50ZXJmYWNlID0gdGhpcy5pbnRlcmZhY2U7XG4gICAgaWYgKHNlbGVjdEludGVyZmFjZSA9PT0gJ2FjdGlvbi1zaGVldCcgJiYgdGhpcy5tdWx0aXBsZSkge1xuICAgICAgY29uc29sZS53YXJuKGBTZWxlY3QgaW50ZXJmYWNlIGNhbm5vdCBiZSBcIiR7c2VsZWN0SW50ZXJmYWNlfVwiIHdpdGggYSBtdWx0aS12YWx1ZSBzZWxlY3QuIFVzaW5nIHRoZSBcImFsZXJ0XCIgaW50ZXJmYWNlIGluc3RlYWQuYCk7XG4gICAgICBzZWxlY3RJbnRlcmZhY2UgPSAnYWxlcnQnO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0SW50ZXJmYWNlID09PSAncG9wb3ZlcicgJiYgIWV2KSB7XG4gICAgICBjb25zb2xlLndhcm4oYFNlbGVjdCBpbnRlcmZhY2UgY2Fubm90IGJlIGEgXCIke3NlbGVjdEludGVyZmFjZX1cIiB3aXRob3V0IHBhc3NpbmcgYW4gZXZlbnQuIFVzaW5nIHRoZSBcImFsZXJ0XCIgaW50ZXJmYWNlIGluc3RlYWQuYCk7XG4gICAgICBzZWxlY3RJbnRlcmZhY2UgPSAnYWxlcnQnO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0SW50ZXJmYWNlID09PSAnYWN0aW9uLXNoZWV0Jykge1xuICAgICAgcmV0dXJuIHRoaXMub3BlbkFjdGlvblNoZWV0KCk7XG4gICAgfVxuICAgIGlmIChzZWxlY3RJbnRlcmZhY2UgPT09ICdwb3BvdmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMub3BlblBvcG92ZXIoZXYpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vcGVuQWxlcnQoKTtcbiAgfVxuICB1cGRhdGVPdmVybGF5T3B0aW9ucygpIHtcbiAgICBjb25zdCBvdmVybGF5ID0gdGhpcy5vdmVybGF5O1xuICAgIGlmICghb3ZlcmxheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjaGlsZE9wdHMgPSB0aGlzLmNoaWxkT3B0cztcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgc3dpdGNoICh0aGlzLmludGVyZmFjZSkge1xuICAgICAgY2FzZSAnYWN0aW9uLXNoZWV0JzpcbiAgICAgICAgb3ZlcmxheS5idXR0b25zID0gdGhpcy5jcmVhdGVBY3Rpb25TaGVldEJ1dHRvbnMoY2hpbGRPcHRzLCB2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAncG9wb3Zlcic6XG4gICAgICAgIGNvbnN0IHBvcG92ZXIgPSBvdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1zZWxlY3QtcG9wb3ZlcicpO1xuICAgICAgICBpZiAocG9wb3Zlcikge1xuICAgICAgICAgIHBvcG92ZXIub3B0aW9ucyA9IHRoaXMuY3JlYXRlUG9wb3Zlck9wdGlvbnMoY2hpbGRPcHRzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdhbGVydCc6XG4gICAgICAgIGNvbnN0IGlucHV0VHlwZSA9IHRoaXMubXVsdGlwbGUgPyAnY2hlY2tib3gnIDogJ3JhZGlvJztcbiAgICAgICAgb3ZlcmxheS5pbnB1dHMgPSB0aGlzLmNyZWF0ZUFsZXJ0SW5wdXRzKGNoaWxkT3B0cywgaW5wdXRUeXBlLCB2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBjcmVhdGVBY3Rpb25TaGVldEJ1dHRvbnMoZGF0YSwgc2VsZWN0VmFsdWUpIHtcbiAgICBjb25zdCBhY3Rpb25TaGVldEJ1dHRvbnMgPSBkYXRhLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldE9wdGlvblZhbHVlKG9wdGlvbik7XG4gICAgICAvLyBSZW1vdmUgaHlkcmF0ZWQgYmVmb3JlIGNvcHlpbmcgb3ZlciBjbGFzc2VzXG4gICAgICBjb25zdCBjb3B5Q2xhc3NlcyA9IEFycmF5LmZyb20ob3B0aW9uLmNsYXNzTGlzdClcbiAgICAgICAgLmZpbHRlcigoY2xzKSA9PiBjbHMgIT09ICdoeWRyYXRlZCcpXG4gICAgICAgIC5qb2luKCcgJyk7XG4gICAgICBjb25zdCBvcHRDbGFzcyA9IGAke09QVElPTl9DTEFTU30gJHtjb3B5Q2xhc3Nlc31gO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcm9sZTogaXNPcHRpb25TZWxlY3RlZChzZWxlY3RWYWx1ZSwgdmFsdWUsIHRoaXMuY29tcGFyZVdpdGgpID8gJ3NlbGVjdGVkJyA6ICcnLFxuICAgICAgICB0ZXh0OiBvcHRpb24udGV4dENvbnRlbnQsXG4gICAgICAgIGNzc0NsYXNzOiBvcHRDbGFzcyxcbiAgICAgICAgaGFuZGxlcjogKCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0VmFsdWUodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICAvLyBBZGQgXCJjYW5jZWxcIiBidXR0b25cbiAgICBhY3Rpb25TaGVldEJ1dHRvbnMucHVzaCh7XG4gICAgICB0ZXh0OiB0aGlzLmNhbmNlbFRleHQsXG4gICAgICByb2xlOiAnY2FuY2VsJyxcbiAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgdGhpcy5pb25DYW5jZWwuZW1pdCgpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gYWN0aW9uU2hlZXRCdXR0b25zO1xuICB9XG4gIGNyZWF0ZUFsZXJ0SW5wdXRzKGRhdGEsIGlucHV0VHlwZSwgc2VsZWN0VmFsdWUpIHtcbiAgICBjb25zdCBhbGVydElucHV0cyA9IGRhdGEubWFwKChvcHRpb24pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0T3B0aW9uVmFsdWUob3B0aW9uKTtcbiAgICAgIC8vIFJlbW92ZSBoeWRyYXRlZCBiZWZvcmUgY29weWluZyBvdmVyIGNsYXNzZXNcbiAgICAgIGNvbnN0IGNvcHlDbGFzc2VzID0gQXJyYXkuZnJvbShvcHRpb24uY2xhc3NMaXN0KVxuICAgICAgICAuZmlsdGVyKChjbHMpID0+IGNscyAhPT0gJ2h5ZHJhdGVkJylcbiAgICAgICAgLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IG9wdENsYXNzID0gYCR7T1BUSU9OX0NMQVNTfSAke2NvcHlDbGFzc2VzfWA7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBpbnB1dFR5cGUsXG4gICAgICAgIGNzc0NsYXNzOiBvcHRDbGFzcyxcbiAgICAgICAgbGFiZWw6IG9wdGlvbi50ZXh0Q29udGVudCB8fCAnJyxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGNoZWNrZWQ6IGlzT3B0aW9uU2VsZWN0ZWQoc2VsZWN0VmFsdWUsIHZhbHVlLCB0aGlzLmNvbXBhcmVXaXRoKSxcbiAgICAgICAgZGlzYWJsZWQ6IG9wdGlvbi5kaXNhYmxlZCxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIGFsZXJ0SW5wdXRzO1xuICB9XG4gIGNyZWF0ZVBvcG92ZXJPcHRpb25zKGRhdGEsIHNlbGVjdFZhbHVlKSB7XG4gICAgY29uc3QgcG9wb3Zlck9wdGlvbnMgPSBkYXRhLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldE9wdGlvblZhbHVlKG9wdGlvbik7XG4gICAgICAvLyBSZW1vdmUgaHlkcmF0ZWQgYmVmb3JlIGNvcHlpbmcgb3ZlciBjbGFzc2VzXG4gICAgICBjb25zdCBjb3B5Q2xhc3NlcyA9IEFycmF5LmZyb20ob3B0aW9uLmNsYXNzTGlzdClcbiAgICAgICAgLmZpbHRlcigoY2xzKSA9PiBjbHMgIT09ICdoeWRyYXRlZCcpXG4gICAgICAgIC5qb2luKCcgJyk7XG4gICAgICBjb25zdCBvcHRDbGFzcyA9IGAke09QVElPTl9DTEFTU30gJHtjb3B5Q2xhc3Nlc31gO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGV4dDogb3B0aW9uLnRleHRDb250ZW50IHx8ICcnLFxuICAgICAgICBjc3NDbGFzczogb3B0Q2xhc3MsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjaGVja2VkOiBpc09wdGlvblNlbGVjdGVkKHNlbGVjdFZhbHVlLCB2YWx1ZSwgdGhpcy5jb21wYXJlV2l0aCksXG4gICAgICAgIGRpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsXG4gICAgICAgIGhhbmRsZXI6IChzZWxlY3RlZCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2V0VmFsdWUoc2VsZWN0ZWQpO1xuICAgICAgICAgIGlmICghdGhpcy5tdWx0aXBsZSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHBvcG92ZXJPcHRpb25zO1xuICB9XG4gIGFzeW5jIG9wZW5Qb3BvdmVyKGV2KSB7XG4gICAgY29uc3QgeyBmaWxsLCBsYWJlbFBsYWNlbWVudCB9ID0gdGhpcztcbiAgICBjb25zdCBpbnRlcmZhY2VPcHRpb25zID0gdGhpcy5pbnRlcmZhY2VPcHRpb25zO1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IHNob3dCYWNrZHJvcCA9IG1vZGUgPT09ICdtZCcgPyBmYWxzZSA6IHRydWU7XG4gICAgY29uc3QgbXVsdGlwbGUgPSB0aGlzLm11bHRpcGxlO1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBsZXQgZXZlbnQgPSBldjtcbiAgICBsZXQgc2l6ZSA9ICdhdXRvJztcbiAgICBpZiAodGhpcy5sZWdhY3lGb3JtQ29udHJvbGxlci5oYXNMZWdhY3lDb250cm9sKCkpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLmVsLmNsb3Nlc3QoJ2lvbi1pdGVtJyk7XG4gICAgICAvLyBJZiB0aGUgc2VsZWN0IGlzIGluc2lkZSBvZiBhbiBpdGVtIGNvbnRhaW5pbmcgYSBmbG9hdGluZ1xuICAgICAgLy8gb3Igc3RhY2tlZCBsYWJlbCB0aGVuIHRoZSBwb3BvdmVyIHNob3VsZCB0YWtlIHVwIHRoZVxuICAgICAgLy8gZnVsbCB3aWR0aCBvZiB0aGUgaXRlbSB3aGVuIGl0IHByZXNlbnRzXG4gICAgICBpZiAoaXRlbSAmJiAoaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2l0ZW0tbGFiZWwtZmxvYXRpbmcnKSB8fCBpdGVtLmNsYXNzTGlzdC5jb250YWlucygnaXRlbS1sYWJlbC1zdGFja2VkJykpKSB7XG4gICAgICAgIGV2ZW50ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBldiksIHsgZGV0YWlsOiB7XG4gICAgICAgICAgICBpb25TaGFkb3dUYXJnZXQ6IGl0ZW0sXG4gICAgICAgICAgfSB9KTtcbiAgICAgICAgc2l6ZSA9ICdjb3Zlcic7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc3QgaGFzRmxvYXRpbmdPclN0YWNrZWRMYWJlbCA9IGxhYmVsUGxhY2VtZW50ID09PSAnZmxvYXRpbmcnIHx8IGxhYmVsUGxhY2VtZW50ID09PSAnc3RhY2tlZCc7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBwb3BvdmVyIHNob3VsZCB0YWtlIHVwIHRoZSBmdWxsIHdpZHRoXG4gICAgICAgKiB3aGVuIHVzaW5nIGEgZmlsbCBpbiBNRCBtb2RlIG9yIGlmIHRoZVxuICAgICAgICogbGFiZWwgaXMgZmxvYXRpbmcvc3RhY2tlZC5cbiAgICAgICAqL1xuICAgICAgaWYgKGhhc0Zsb2F0aW5nT3JTdGFja2VkTGFiZWwgfHwgKG1vZGUgPT09ICdtZCcgJiYgZmlsbCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gJ2NvdmVyJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE90aGVyd2lzZSB0aGUgcG9wb3ZlclxuICAgICAgICAgKiBzaG91bGQgYmUgcG9zaXRpb25lZCByZWxhdGl2ZVxuICAgICAgICAgKiB0byB0aGUgbmF0aXZlIGVsZW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGV2ZW50ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBldiksIHsgZGV0YWlsOiB7XG4gICAgICAgICAgICBpb25TaGFkb3dUYXJnZXQ6IHRoaXMubmF0aXZlV3JhcHBlckVsLFxuICAgICAgICAgIH0gfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHBvcG92ZXJPcHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbW9kZSxcbiAgICAgIGV2ZW50LCBhbGlnbm1lbnQ6ICdjZW50ZXInLCBzaXplLFxuICAgICAgc2hvd0JhY2tkcm9wIH0sIGludGVyZmFjZU9wdGlvbnMpLCB7IGNvbXBvbmVudDogJ2lvbi1zZWxlY3QtcG9wb3ZlcicsIGNzc0NsYXNzOiBbJ3NlbGVjdC1wb3BvdmVyJywgaW50ZXJmYWNlT3B0aW9ucy5jc3NDbGFzc10sIGNvbXBvbmVudFByb3BzOiB7XG4gICAgICAgIGhlYWRlcjogaW50ZXJmYWNlT3B0aW9ucy5oZWFkZXIsXG4gICAgICAgIHN1YkhlYWRlcjogaW50ZXJmYWNlT3B0aW9ucy5zdWJIZWFkZXIsXG4gICAgICAgIG1lc3NhZ2U6IGludGVyZmFjZU9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgbXVsdGlwbGUsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBvcHRpb25zOiB0aGlzLmNyZWF0ZVBvcG92ZXJPcHRpb25zKHRoaXMuY2hpbGRPcHRzLCB2YWx1ZSksXG4gICAgICB9IH0pO1xuICAgIHJldHVybiBwb3BvdmVyQ29udHJvbGxlci5jcmVhdGUocG9wb3Zlck9wdHMpO1xuICB9XG4gIGFzeW5jIG9wZW5BY3Rpb25TaGVldCgpIHtcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCBpbnRlcmZhY2VPcHRpb25zID0gdGhpcy5pbnRlcmZhY2VPcHRpb25zO1xuICAgIGNvbnN0IGFjdGlvblNoZWV0T3B0cyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1vZGUgfSwgaW50ZXJmYWNlT3B0aW9ucyksIHsgYnV0dG9uczogdGhpcy5jcmVhdGVBY3Rpb25TaGVldEJ1dHRvbnModGhpcy5jaGlsZE9wdHMsIHRoaXMudmFsdWUpLCBjc3NDbGFzczogWydzZWxlY3QtYWN0aW9uLXNoZWV0JywgaW50ZXJmYWNlT3B0aW9ucy5jc3NDbGFzc10gfSk7XG4gICAgcmV0dXJuIGFjdGlvblNoZWV0Q29udHJvbGxlci5jcmVhdGUoYWN0aW9uU2hlZXRPcHRzKTtcbiAgfVxuICBhc3luYyBvcGVuQWxlcnQoKSB7XG4gICAgLyoqXG4gICAgICogVE9ETyBGVy0zMTk0XG4gICAgICogUmVtb3ZlIGxlZ2FjeUZvcm1Db250cm9sbGVyIGxvZ2ljLlxuICAgICAqIFJlbW92ZSBsYWJlbCBhbmQgbGFiZWxUZXh0IHZhcnNcbiAgICAgKiBQYXNzIGB0aGlzLmxhYmVsVGV4dGAgaW5zdGVhZCBvZiBgbGFiZWxUZXh0YFxuICAgICAqIHdoZW4gc2V0dGluZyB0aGUgaGVhZGVyLlxuICAgICAqL1xuICAgIGxldCBsYWJlbDtcbiAgICBsZXQgbGFiZWxUZXh0O1xuICAgIGlmICh0aGlzLmxlZ2FjeUZvcm1Db250cm9sbGVyLmhhc0xlZ2FjeUNvbnRyb2woKSkge1xuICAgICAgbGFiZWwgPSB0aGlzLmdldExhYmVsKCk7XG4gICAgICBsYWJlbFRleHQgPSBsYWJlbCA/IGxhYmVsLnRleHRDb250ZW50IDogbnVsbDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBsYWJlbFRleHQgPSB0aGlzLmxhYmVsVGV4dDtcbiAgICB9XG4gICAgY29uc3QgaW50ZXJmYWNlT3B0aW9ucyA9IHRoaXMuaW50ZXJmYWNlT3B0aW9ucztcbiAgICBjb25zdCBpbnB1dFR5cGUgPSB0aGlzLm11bHRpcGxlID8gJ2NoZWNrYm94JyA6ICdyYWRpbyc7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgYWxlcnRPcHRzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbW9kZSB9LCBpbnRlcmZhY2VPcHRpb25zKSwgeyBoZWFkZXI6IGludGVyZmFjZU9wdGlvbnMuaGVhZGVyID8gaW50ZXJmYWNlT3B0aW9ucy5oZWFkZXIgOiBsYWJlbFRleHQsIGlucHV0czogdGhpcy5jcmVhdGVBbGVydElucHV0cyh0aGlzLmNoaWxkT3B0cywgaW5wdXRUeXBlLCB0aGlzLnZhbHVlKSwgYnV0dG9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogdGhpcy5jYW5jZWxUZXh0LFxuICAgICAgICAgIHJvbGU6ICdjYW5jZWwnLFxuICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaW9uQ2FuY2VsLmVtaXQoKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGV4dDogdGhpcy5va1RleHQsXG4gICAgICAgICAgaGFuZGxlcjogKHNlbGVjdGVkVmFsdWVzKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKHNlbGVjdGVkVmFsdWVzKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSwgY3NzQ2xhc3M6IFtcbiAgICAgICAgJ3NlbGVjdC1hbGVydCcsXG4gICAgICAgIGludGVyZmFjZU9wdGlvbnMuY3NzQ2xhc3MsXG4gICAgICAgIHRoaXMubXVsdGlwbGUgPyAnbXVsdGlwbGUtc2VsZWN0LWFsZXJ0JyA6ICdzaW5nbGUtc2VsZWN0LWFsZXJ0JyxcbiAgICAgIF0gfSk7XG4gICAgcmV0dXJuIGFsZXJ0Q29udHJvbGxlci5jcmVhdGUoYWxlcnRPcHRzKTtcbiAgfVxuICAvKipcbiAgICogQ2xvc2UgdGhlIHNlbGVjdCBpbnRlcmZhY2UuXG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBpZiAoIXRoaXMub3ZlcmxheSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLm92ZXJsYXkuZGlzbWlzcygpO1xuICB9XG4gIC8vIFRPRE8gRlctMzE5NCBSZW1vdmUgdGhpc1xuICBnZXRMYWJlbCgpIHtcbiAgICByZXR1cm4gZmluZEl0ZW1MYWJlbCh0aGlzLmVsKTtcbiAgfVxuICBoYXNWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUZXh0KCkgIT09ICcnO1xuICB9XG4gIGdldCBjaGlsZE9wdHMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5lbC5xdWVyeVNlbGVjdG9yQWxsKCdpb24tc2VsZWN0LW9wdGlvbicpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbnkgcGxhaW50ZXh0IGFzc29jaWF0ZWQgd2l0aFxuICAgKiB0aGUgbGFiZWwgKGVpdGhlciBwcm9wIG9yIHNsb3QpLlxuICAgKiBOb3RlOiBUaGlzIHdpbGwgbm90IHJldHVybiBhbnkgY3VzdG9tXG4gICAqIEhUTUwuIFVzZSB0aGUgYGhhc0xhYmVsYCBnZXR0ZXIgaWYgeW91XG4gICAqIHdhbnQgdG8ga25vdyBpZiBhbnkgc2xvdHRlZCBsYWJlbCBjb250ZW50XG4gICAqIHdhcyBwYXNzZWQuXG4gICAqL1xuICBnZXQgbGFiZWxUZXh0KCkge1xuICAgIGNvbnN0IHsgbGFiZWwgfSA9IHRoaXM7XG4gICAgaWYgKGxhYmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gICAgY29uc3QgeyBsYWJlbFNsb3QgfSA9IHRoaXM7XG4gICAgaWYgKGxhYmVsU2xvdCAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGxhYmVsU2xvdC50ZXh0Q29udGVudDtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGdldFRleHQoKSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gdGhpcy5zZWxlY3RlZFRleHQ7XG4gICAgaWYgKHNlbGVjdGVkVGV4dCAhPSBudWxsICYmIHNlbGVjdGVkVGV4dCAhPT0gJycpIHtcbiAgICAgIHJldHVybiBzZWxlY3RlZFRleHQ7XG4gICAgfVxuICAgIHJldHVybiBnZW5lcmF0ZVRleHQodGhpcy5jaGlsZE9wdHMsIHRoaXMudmFsdWUsIHRoaXMuY29tcGFyZVdpdGgpO1xuICB9XG4gIHNldEZvY3VzKCkge1xuICAgIGlmICh0aGlzLmZvY3VzRWwpIHtcbiAgICAgIHRoaXMuZm9jdXNFbC5mb2N1cygpO1xuICAgIH1cbiAgfVxuICBlbWl0U3R5bGUoKSB7XG4gICAgY29uc3QgeyBkaXNhYmxlZCB9ID0gdGhpcztcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgICdpbnRlcmFjdGl2ZS1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgIH07XG4gICAgaWYgKHRoaXMubGVnYWN5Rm9ybUNvbnRyb2xsZXIuaGFzTGVnYWN5Q29udHJvbCgpKSB7XG4gICAgICBzdHlsZVsnaW50ZXJhY3RpdmUnXSA9IHRydWU7XG4gICAgICBzdHlsZVsnc2VsZWN0J10gPSB0cnVlO1xuICAgICAgc3R5bGVbJ3NlbGVjdC1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gICAgICBzdHlsZVsnaGFzLXBsYWNlaG9sZGVyJ10gPSB0aGlzLnBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQ7XG4gICAgICBzdHlsZVsnaGFzLXZhbHVlJ10gPSB0aGlzLmhhc1ZhbHVlKCk7XG4gICAgICBzdHlsZVsnaGFzLWZvY3VzJ10gPSB0aGlzLmlzRXhwYW5kZWQ7XG4gICAgfVxuICAgIHRoaXMuaW9uU3R5bGUuZW1pdChzdHlsZSk7XG4gIH1cbiAgcmVuZGVyTGFiZWwoKSB7XG4gICAgY29uc3QgeyBsYWJlbCB9ID0gdGhpcztcbiAgICByZXR1cm4gKGgoXCJkaXZcIiwgeyBjbGFzczoge1xuICAgICAgICAnbGFiZWwtdGV4dC13cmFwcGVyJzogdHJ1ZSxcbiAgICAgICAgJ2xhYmVsLXRleHQtd3JhcHBlci1oaWRkZW4nOiAhdGhpcy5oYXNMYWJlbCxcbiAgICAgIH0sIHBhcnQ6IFwibGFiZWxcIiB9LCBsYWJlbCA9PT0gdW5kZWZpbmVkID8gaChcInNsb3RcIiwgeyBuYW1lOiBcImxhYmVsXCIgfSkgOiBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibGFiZWwtdGV4dFwiIH0sIGxhYmVsKSkpO1xuICB9XG4gIGNvbXBvbmVudERpZFJlbmRlcigpIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gdGhpcy5ub3RjaENvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxjdWxhdGVOb3RjaFdpZHRoKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldHMgYW55IGNvbnRlbnQgcGFzc2VkIGludG8gdGhlIGBsYWJlbGAgc2xvdCxcbiAgICogbm90IHRoZSA8c2xvdD4gZGVmaW5pdGlvbi5cbiAgICovXG4gIGdldCBsYWJlbFNsb3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWwucXVlcnlTZWxlY3RvcignW3Nsb3Q9XCJsYWJlbFwiXScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBsYWJlbCBjb250ZW50IGlzIHByb3ZpZGVkXG4gICAqIGVpdGhlciBieSBhIHByb3Agb3IgYSBjb250ZW50LiBJZiB5b3Ugd2FudFxuICAgKiB0byBnZXQgdGhlIHBsYWludGV4dCB2YWx1ZSBvZiB0aGUgbGFiZWwgdXNlXG4gICAqIHRoZSBgbGFiZWxUZXh0YCBnZXR0ZXIgaW5zdGVhZC5cbiAgICovXG4gIGdldCBoYXNMYWJlbCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYWJlbCAhPT0gdW5kZWZpbmVkIHx8IHRoaXMubGFiZWxTbG90ICE9PSBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBib3JkZXIgY29udGFpbmVyXG4gICAqIHdoZW4gZmlsbD1cIm91dGxpbmVcIi5cbiAgICovXG4gIHJlbmRlckxhYmVsQ29udGFpbmVyKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IGhhc091dGxpbmVGaWxsID0gbW9kZSA9PT0gJ21kJyAmJiB0aGlzLmZpbGwgPT09ICdvdXRsaW5lJztcbiAgICBpZiAoaGFzT3V0bGluZUZpbGwpIHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG91dGxpbmUgZmlsbCBoYXMgYSBzcGVjaWFsIG91dGxpbmVcbiAgICAgICAqIHRoYXQgYXBwZWFycyBhcm91bmQgdGhlIHNlbGVjdCBhbmQgdGhlIGxhYmVsLlxuICAgICAgICogQ2VydGFpbiBzdGFja2VkIGFuZCBmbG9hdGluZyBsYWJlbCBwbGFjZW1lbnRzIGNhdXNlIHRoZVxuICAgICAgICogbGFiZWwgdG8gdHJhbnNsYXRlIHVwIGFuZCBjcmVhdGUgYSBcImN1dCBvdXRcIlxuICAgICAgICogaW5zaWRlIG9mIHRoYXQgYm9yZGVyIGJ5IHVzaW5nIHRoZSBub3RjaC1zcGFjZXIgZWxlbWVudC5cbiAgICAgICAqL1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgaChcImRpdlwiLCB7IGNsYXNzOiBcInNlbGVjdC1vdXRsaW5lLWNvbnRhaW5lclwiIH0sIGgoXCJkaXZcIiwgeyBjbGFzczogXCJzZWxlY3Qtb3V0bGluZS1zdGFydFwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IHtcbiAgICAgICAgICAgICdzZWxlY3Qtb3V0bGluZS1ub3RjaCc6IHRydWUsXG4gICAgICAgICAgICAnc2VsZWN0LW91dGxpbmUtbm90Y2gtaGlkZGVuJzogIXRoaXMuaGFzTGFiZWwsXG4gICAgICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwibm90Y2gtc3BhY2VyXCIsIFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIHJlZjogKGVsKSA9PiAodGhpcy5ub3RjaFNwYWNlckVsID0gZWwpIH0sIHRoaXMubGFiZWwpKSwgaChcImRpdlwiLCB7IGNsYXNzOiBcInNlbGVjdC1vdXRsaW5lLWVuZFwiIH0pKSxcbiAgICAgICAgdGhpcy5yZW5kZXJMYWJlbCgpLFxuICAgICAgXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgbm90IHVzaW5nIHRoZSBvdXRsaW5lIHN0eWxlLFxuICAgICAqIHdlIGNhbiByZW5kZXIganVzdCB0aGUgbGFiZWwuXG4gICAgICovXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyTGFiZWwoKTtcbiAgfVxuICByZW5kZXJTZWxlY3QoKSB7XG4gICAgY29uc3QgeyBkaXNhYmxlZCwgZWwsIGlzRXhwYW5kZWQsIGV4cGFuZGVkSWNvbiwgbGFiZWxQbGFjZW1lbnQsIGp1c3RpZnksIHBsYWNlaG9sZGVyLCBmaWxsLCBzaGFwZSwgbmFtZSwgdmFsdWUgfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgaGFzRmxvYXRpbmdPclN0YWNrZWRMYWJlbCA9IGxhYmVsUGxhY2VtZW50ID09PSAnZmxvYXRpbmcnIHx8IGxhYmVsUGxhY2VtZW50ID09PSAnc3RhY2tlZCc7XG4gICAgY29uc3QganVzdGlmeUVuYWJsZWQgPSAhaGFzRmxvYXRpbmdPclN0YWNrZWRMYWJlbDtcbiAgICBjb25zdCBydGwgPSBpc1JUTChlbCkgPyAncnRsJyA6ICdsdHInO1xuICAgIGNvbnN0IGluSXRlbSA9IGhvc3RDb250ZXh0KCdpb24taXRlbScsIHRoaXMuZWwpO1xuICAgIGNvbnN0IHNob3VsZFJlbmRlckhpZ2hsaWdodCA9IG1vZGUgPT09ICdtZCcgJiYgZmlsbCAhPT0gJ291dGxpbmUnICYmICFpbkl0ZW07XG4gICAgcmVuZGVySGlkZGVuSW5wdXQodHJ1ZSwgZWwsIG5hbWUsIHBhcnNlVmFsdWUodmFsdWUpLCBkaXNhYmxlZCk7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgb25DbGljazogdGhpcy5vbkNsaWNrLCBjbGFzczogY3JlYXRlQ29sb3JDbGFzc2VzKHRoaXMuY29sb3IsIHtcbiAgICAgICAgW21vZGVdOiB0cnVlLFxuICAgICAgICAnaW4taXRlbSc6IGluSXRlbSxcbiAgICAgICAgJ2luLWl0ZW0tY29sb3InOiBob3N0Q29udGV4dCgnaW9uLWl0ZW0uaW9uLWNvbG9yJywgZWwpLFxuICAgICAgICAnc2VsZWN0LWRpc2FibGVkJzogZGlzYWJsZWQsXG4gICAgICAgICdzZWxlY3QtZXhwYW5kZWQnOiBpc0V4cGFuZGVkLFxuICAgICAgICAnaGFzLWV4cGFuZGVkLWljb24nOiBleHBhbmRlZEljb24gIT09IHVuZGVmaW5lZCxcbiAgICAgICAgJ2hhcy12YWx1ZSc6IHRoaXMuaGFzVmFsdWUoKSxcbiAgICAgICAgJ2hhcy1wbGFjZWhvbGRlcic6IHBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgICdpb24tZm9jdXNhYmxlJzogdHJ1ZSxcbiAgICAgICAgW2BzZWxlY3QtJHtydGx9YF06IHRydWUsXG4gICAgICAgIFtgc2VsZWN0LWZpbGwtJHtmaWxsfWBdOiBmaWxsICE9PSB1bmRlZmluZWQsXG4gICAgICAgIFtgc2VsZWN0LWp1c3RpZnktJHtqdXN0aWZ5fWBdOiBqdXN0aWZ5RW5hYmxlZCxcbiAgICAgICAgW2BzZWxlY3Qtc2hhcGUtJHtzaGFwZX1gXTogc2hhcGUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgW2BzZWxlY3QtbGFiZWwtcGxhY2VtZW50LSR7bGFiZWxQbGFjZW1lbnR9YF06IHRydWUsXG4gICAgICB9KSB9LCBoKFwibGFiZWxcIiwgeyBjbGFzczogXCJzZWxlY3Qtd3JhcHBlclwiLCBpZDogXCJzZWxlY3QtbGFiZWxcIiB9LCB0aGlzLnJlbmRlckxhYmVsQ29udGFpbmVyKCksIGgoXCJkaXZcIiwgeyBjbGFzczogXCJuYXRpdmUtd3JhcHBlclwiLCByZWY6IChlbCkgPT4gKHRoaXMubmF0aXZlV3JhcHBlckVsID0gZWwpLCBwYXJ0OiBcImNvbnRhaW5lclwiIH0sIHRoaXMucmVuZGVyU2VsZWN0VGV4dCgpLCAhaGFzRmxvYXRpbmdPclN0YWNrZWRMYWJlbCAmJiB0aGlzLnJlbmRlclNlbGVjdEljb24oKSwgdGhpcy5yZW5kZXJMaXN0Ym94KCkpLCBoYXNGbG9hdGluZ09yU3RhY2tlZExhYmVsICYmIHRoaXMucmVuZGVyU2VsZWN0SWNvbigpLCBzaG91bGRSZW5kZXJIaWdobGlnaHQgJiYgaChcImRpdlwiLCB7IGNsYXNzOiBcInNlbGVjdC1oaWdobGlnaHRcIiB9KSkpKTtcbiAgfVxuICAvLyBUT0RPIEZXLTMxOTQgLSBSZW1vdmUgdGhpc1xuICByZW5kZXJMZWdhY3lTZWxlY3QoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xvZ2dlZERlcHJlY2F0aW9uV2FybmluZykge1xuICAgICAgcHJpbnRJb25XYXJuaW5nKGBpb24tc2VsZWN0IG5vdyByZXF1aXJlcyBwcm92aWRpbmcgYSBsYWJlbCB3aXRoIGVpdGhlciB0aGUgXCJsYWJlbFwiIHByb3BlcnR5IG9yIHRoZSBcImFyaWEtbGFiZWxcIiBhdHRyaWJ1dGUuIFRvIG1pZ3JhdGUsIHJlbW92ZSBhbnkgdXNhZ2Ugb2YgXCJpb24tbGFiZWxcIiBhbmQgcGFzcyB0aGUgbGFiZWwgdGV4dCB0byBlaXRoZXIgdGhlIFwibGFiZWxcIiBwcm9wZXJ0eSBvciB0aGUgXCJhcmlhLWxhYmVsXCIgYXR0cmlidXRlLlxuXG5FeGFtcGxlOiA8aW9uLXNlbGVjdCBsYWJlbD1cIkZhdm9yaXRlIENvbG9yXCI+Li4uPC9pb24tc2VsZWN0PlxuRXhhbXBsZSB3aXRoIGFyaWEtbGFiZWw6IDxpb24tc2VsZWN0IGFyaWEtbGFiZWw9XCJGYXZvcml0ZSBDb2xvclwiPi4uLjwvaW9uLXNlbGVjdD5cblxuRGV2ZWxvcGVycyBjYW4gdXNlIHRoZSBcImxlZ2FjeVwiIHByb3BlcnR5IHRvIGNvbnRpbnVlIHVzaW5nIHRoZSBsZWdhY3kgZm9ybSBtYXJrdXAuIFRoaXMgcHJvcGVydHkgd2lsbCBiZSByZW1vdmVkIGluIGFuIHVwY29taW5nIG1ham9yIHJlbGVhc2Ugb2YgSW9uaWMgd2hlcmUgdGhpcyBmb3JtIGNvbnRyb2wgd2lsbCB1c2UgdGhlIG1vZGVybiBmb3JtIG1hcmt1cC5gLCB0aGlzLmVsKTtcbiAgICAgIGlmICh0aGlzLmxlZ2FjeSkge1xuICAgICAgICBwcmludElvbldhcm5pbmcoYGlvbi1zZWxlY3QgaXMgYmVpbmcgdXNlZCB3aXRoIHRoZSBcImxlZ2FjeVwiIHByb3BlcnR5IGVuYWJsZWQgd2hpY2ggd2lsbCBmb3JjaWJseSBlbmFibGUgdGhlIGxlZ2FjeSBmb3JtIG1hcmt1cC4gVGhpcyBwcm9wZXJ0eSB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZSBvZiBJb25pYyB3aGVyZSB0aGlzIGZvcm0gY29udHJvbCB3aWxsIHVzZSB0aGUgbW9kZXJuIGZvcm0gbWFya3VwLlxuICAgIERldmVsb3BlcnMgY2FuIGRpc21pc3MgdGhpcyB3YXJuaW5nIGJ5IHJlbW92aW5nIHRoZWlyIHVzYWdlIG9mIHRoZSBcImxlZ2FjeVwiIHByb3BlcnR5IGFuZCB1c2luZyB0aGUgbmV3IHNlbGVjdCBzeW50YXguYCwgdGhpcy5lbCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhhc0xvZ2dlZERlcHJlY2F0aW9uV2FybmluZyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHsgZGlzYWJsZWQsIGVsLCBpbnB1dElkLCBpc0V4cGFuZGVkLCBleHBhbmRlZEljb24sIG5hbWUsIHBsYWNlaG9sZGVyLCB2YWx1ZSB9ID0gdGhpcztcbiAgICBjb25zdCBtb2RlID0gZ2V0SW9uTW9kZSh0aGlzKTtcbiAgICBjb25zdCB7IGxhYmVsVGV4dCwgbGFiZWxJZCB9ID0gZ2V0QXJpYUxhYmVsKGVsLCBpbnB1dElkKTtcbiAgICByZW5kZXJIaWRkZW5JbnB1dCh0cnVlLCBlbCwgbmFtZSwgcGFyc2VWYWx1ZSh2YWx1ZSksIGRpc2FibGVkKTtcbiAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSB0aGlzLmdldFRleHQoKTtcbiAgICBsZXQgc2VsZWN0VGV4dCA9IGRpc3BsYXlWYWx1ZTtcbiAgICBpZiAoc2VsZWN0VGV4dCA9PT0gJycgJiYgcGxhY2Vob2xkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgc2VsZWN0VGV4dCA9IHBsYWNlaG9sZGVyO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBpcyBhIGxhYmVsIHRoZW4gd2UgbmVlZCB0byBjb25jYXRlbmF0ZSBpdCB3aXRoIHRoZVxuICAgIC8vIGN1cnJlbnQgdmFsdWUgKG9yIHBsYWNlaG9sZGVyKSBhbmQgYSBjb21tYSBzbyBpdCBzZXBhcmF0ZXNcbiAgICAvLyBuaWNlbHkgd2hlbiB0aGUgc2NyZWVuIHJlYWRlciBhbm5vdW5jZXMgaXQsIG90aGVyd2lzZSBqdXN0XG4gICAgLy8gYW5ub3VuY2UgdGhlIHZhbHVlIC8gcGxhY2Vob2xkZXJcbiAgICBjb25zdCBkaXNwbGF5TGFiZWwgPSBsYWJlbFRleHQgIT09IHVuZGVmaW5lZCA/IChzZWxlY3RUZXh0ICE9PSAnJyA/IGAke3NlbGVjdFRleHR9LCAke2xhYmVsVGV4dH1gIDogbGFiZWxUZXh0KSA6IHNlbGVjdFRleHQ7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgb25DbGljazogdGhpcy5vbkNsaWNrLCByb2xlOiBcImJ1dHRvblwiLCBcImFyaWEtaGFzcG9wdXBcIjogXCJsaXN0Ym94XCIsIFwiYXJpYS1kaXNhYmxlZFwiOiBkaXNhYmxlZCA/ICd0cnVlJyA6IG51bGwsIFwiYXJpYS1sYWJlbFwiOiBkaXNwbGF5TGFiZWwsIGNsYXNzOiB7XG4gICAgICAgIFttb2RlXTogdHJ1ZSxcbiAgICAgICAgJ2luLWl0ZW0nOiBob3N0Q29udGV4dCgnaW9uLWl0ZW0nLCBlbCksXG4gICAgICAgICdpbi1pdGVtLWNvbG9yJzogaG9zdENvbnRleHQoJ2lvbi1pdGVtLmlvbi1jb2xvcicsIGVsKSxcbiAgICAgICAgJ3NlbGVjdC1kaXNhYmxlZCc6IGRpc2FibGVkLFxuICAgICAgICAnc2VsZWN0LWV4cGFuZGVkJzogaXNFeHBhbmRlZCxcbiAgICAgICAgJ2hhcy1leHBhbmRlZC1pY29uJzogZXhwYW5kZWRJY29uICE9PSB1bmRlZmluZWQsXG4gICAgICAgICdsZWdhY3ktc2VsZWN0JzogdHJ1ZSxcbiAgICAgIH0gfSwgdGhpcy5yZW5kZXJTZWxlY3RUZXh0KCksIHRoaXMucmVuZGVyU2VsZWN0SWNvbigpLCBoKFwibGFiZWxcIiwgeyBpZDogbGFiZWxJZCB9LCBkaXNwbGF5TGFiZWwpLCB0aGlzLnJlbmRlckxpc3Rib3goKSkpO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXJzIGVpdGhlciB0aGUgcGxhY2Vob2xkZXJcbiAgICogb3IgdGhlIHNlbGVjdGVkIHZhbHVlcyBiYXNlZCBvblxuICAgKiB0aGUgc3RhdGUgb2YgdGhlIHNlbGVjdC5cbiAgICovXG4gIHJlbmRlclNlbGVjdFRleHQoKSB7XG4gICAgY29uc3QgeyBwbGFjZWhvbGRlciB9ID0gdGhpcztcbiAgICBjb25zdCBkaXNwbGF5VmFsdWUgPSB0aGlzLmdldFRleHQoKTtcbiAgICBsZXQgYWRkUGxhY2Vob2xkZXJDbGFzcyA9IGZhbHNlO1xuICAgIGxldCBzZWxlY3RUZXh0ID0gZGlzcGxheVZhbHVlO1xuICAgIGlmIChzZWxlY3RUZXh0ID09PSAnJyAmJiBwbGFjZWhvbGRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZWxlY3RUZXh0ID0gcGxhY2Vob2xkZXI7XG4gICAgICBhZGRQbGFjZWhvbGRlckNsYXNzID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0VGV4dENsYXNzZXMgPSB7XG4gICAgICAnc2VsZWN0LXRleHQnOiB0cnVlLFxuICAgICAgJ3NlbGVjdC1wbGFjZWhvbGRlcic6IGFkZFBsYWNlaG9sZGVyQ2xhc3MsXG4gICAgfTtcbiAgICBjb25zdCB0ZXh0UGFydCA9IGFkZFBsYWNlaG9sZGVyQ2xhc3MgPyAncGxhY2Vob2xkZXInIDogJ3RleHQnO1xuICAgIHJldHVybiAoaChcImRpdlwiLCB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIsIGNsYXNzOiBzZWxlY3RUZXh0Q2xhc3NlcywgcGFydDogdGV4dFBhcnQgfSwgc2VsZWN0VGV4dCkpO1xuICB9XG4gIC8qKlxuICAgKiBSZW5kZXJzIHRoZSBjaGV2cm9uIGljb25cbiAgICogbmV4dCB0byB0aGUgc2VsZWN0IHRleHQuXG4gICAqL1xuICByZW5kZXJTZWxlY3RJY29uKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIGNvbnN0IHsgaXNFeHBhbmRlZCwgdG9nZ2xlSWNvbiwgZXhwYW5kZWRJY29uIH0gPSB0aGlzO1xuICAgIGxldCBpY29uO1xuICAgIGlmIChpc0V4cGFuZGVkICYmIGV4cGFuZGVkSWNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpY29uID0gZXhwYW5kZWRJY29uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnN0IGRlZmF1bHRJY29uID0gbW9kZSA9PT0gJ2lvcycgPyBjaGV2cm9uRXhwYW5kIDogY2FyZXREb3duU2hhcnA7XG4gICAgICBpY29uID0gdG9nZ2xlSWNvbiAhPT0gbnVsbCAmJiB0b2dnbGVJY29uICE9PSB2b2lkIDAgPyB0b2dnbGVJY29uIDogZGVmYXVsdEljb247XG4gICAgfVxuICAgIHJldHVybiBoKFwiaW9uLWljb25cIiwgeyBjbGFzczogXCJzZWxlY3QtaWNvblwiLCBwYXJ0OiBcImljb25cIiwgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiwgaWNvbjogaWNvbiB9KTtcbiAgfVxuICBnZXQgYXJpYUxhYmVsKCkge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgeyBwbGFjZWhvbGRlciwgZWwsIGlucHV0SWQsIGluaGVyaXRlZEF0dHJpYnV0ZXMgfSA9IHRoaXM7XG4gICAgY29uc3QgZGlzcGxheVZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgY29uc3QgeyBsYWJlbFRleHQgfSA9IGdldEFyaWFMYWJlbChlbCwgaW5wdXRJZCk7XG4gICAgY29uc3QgZGVmaW5lZExhYmVsID0gKF9iID0gKF9hID0gdGhpcy5sYWJlbFRleHQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGluaGVyaXRlZEF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWwnXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbGFiZWxUZXh0O1xuICAgIC8qKlxuICAgICAqIElmIGRldmVsb3BlciBoYXMgc3BlY2lmaWVkIGEgcGxhY2Vob2xkZXJcbiAgICAgKiBhbmQgdGhlcmUgaXMgbm90aGluZyBzZWxlY3RlZCwgdGhlIHNlbGVjdFRleHRcbiAgICAgKiBzaG91bGQgaGF2ZSB0aGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICovXG4gICAgbGV0IHJlbmRlcmVkTGFiZWwgPSBkaXNwbGF5VmFsdWU7XG4gICAgaWYgKHJlbmRlcmVkTGFiZWwgPT09ICcnICYmIHBsYWNlaG9sZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlbmRlcmVkTGFiZWwgPSBwbGFjZWhvbGRlcjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdGhlcmUgaXMgYSBkZXZlbG9wZXItZGVmaW5lZCBsYWJlbCxcbiAgICAgKiB0aGVuIHdlIG5lZWQgdG8gY29uY2F0ZW5hdGUgdGhlIGRldmVsb3BlciBsYWJlbFxuICAgICAqIHN0cmluZyB3aXRoIHRoZSBjdXJyZW50IGN1cnJlbnQgdmFsdWUuXG4gICAgICogVGhlIGxhYmVsIGZvciB0aGUgY29udHJvbCBzaG91bGQgYmUgcmVhZFxuICAgICAqIGJlZm9yZSB0aGUgdmFsdWVzIG9mIHRoZSBjb250cm9sLlxuICAgICAqL1xuICAgIGlmIChkZWZpbmVkTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVuZGVyZWRMYWJlbCA9IHJlbmRlcmVkTGFiZWwgPT09ICcnID8gZGVmaW5lZExhYmVsIDogYCR7ZGVmaW5lZExhYmVsfSwgJHtyZW5kZXJlZExhYmVsfWA7XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJlZExhYmVsO1xuICB9XG4gIHJlbmRlckxpc3Rib3goKSB7XG4gICAgY29uc3QgeyBkaXNhYmxlZCwgaW5wdXRJZCwgaXNFeHBhbmRlZCB9ID0gdGhpcztcbiAgICByZXR1cm4gKGgoXCJidXR0b25cIiwgeyBkaXNhYmxlZDogZGlzYWJsZWQsIGlkOiBpbnB1dElkLCBcImFyaWEtbGFiZWxcIjogdGhpcy5hcmlhTGFiZWwsIFwiYXJpYS1oYXNwb3B1cFwiOiBcImxpc3Rib3hcIiwgXCJhcmlhLWV4cGFuZGVkXCI6IGAke2lzRXhwYW5kZWR9YCwgb25Gb2N1czogdGhpcy5vbkZvY3VzLCBvbkJsdXI6IHRoaXMub25CbHVyLCByZWY6IChmb2N1c0VsKSA9PiAodGhpcy5mb2N1c0VsID0gZm9jdXNFbCkgfSkpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGxlZ2FjeUZvcm1Db250cm9sbGVyIH0gPSB0aGlzO1xuICAgIHJldHVybiBsZWdhY3lGb3JtQ29udHJvbGxlci5oYXNMZWdhY3lDb250cm9sKCkgPyB0aGlzLnJlbmRlckxlZ2FjeVNlbGVjdCgpIDogdGhpcy5yZW5kZXJTZWxlY3QoKTtcbiAgfVxuICBnZXQgZWwoKSB7IHJldHVybiBnZXRFbGVtZW50KHRoaXMpOyB9XG4gIHN0YXRpYyBnZXQgd2F0Y2hlcnMoKSB7IHJldHVybiB7XG4gICAgXCJkaXNhYmxlZFwiOiBbXCJzdHlsZUNoYW5nZWRcIl0sXG4gICAgXCJpc0V4cGFuZGVkXCI6IFtcInN0eWxlQ2hhbmdlZFwiXSxcbiAgICBcInBsYWNlaG9sZGVyXCI6IFtcInN0eWxlQ2hhbmdlZFwiXSxcbiAgICBcInZhbHVlXCI6IFtcInN0eWxlQ2hhbmdlZFwiXVxuICB9OyB9XG59O1xuY29uc3QgaXNPcHRpb25TZWxlY3RlZCA9IChjdXJyZW50VmFsdWUsIGNvbXBhcmVWYWx1ZSwgY29tcGFyZVdpdGgpID0+IHtcbiAgaWYgKGN1cnJlbnRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICByZXR1cm4gY3VycmVudFZhbHVlLnNvbWUoKHZhbCkgPT4gY29tcGFyZU9wdGlvbnModmFsLCBjb21wYXJlVmFsdWUsIGNvbXBhcmVXaXRoKSk7XG4gIH1cbiAgZWxzZSB7XG4gICAgcmV0dXJuIGNvbXBhcmVPcHRpb25zKGN1cnJlbnRWYWx1ZSwgY29tcGFyZVZhbHVlLCBjb21wYXJlV2l0aCk7XG4gIH1cbn07XG5jb25zdCBnZXRPcHRpb25WYWx1ZSA9IChlbCkgPT4ge1xuICBjb25zdCB2YWx1ZSA9IGVsLnZhbHVlO1xuICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IGVsLnRleHRDb250ZW50IHx8ICcnIDogdmFsdWU7XG59O1xuY29uc3QgcGFyc2VWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLmpvaW4oJywnKTtcbiAgfVxuICByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbn07XG5jb25zdCBjb21wYXJlT3B0aW9ucyA9IChjdXJyZW50VmFsdWUsIGNvbXBhcmVWYWx1ZSwgY29tcGFyZVdpdGgpID0+IHtcbiAgaWYgKHR5cGVvZiBjb21wYXJlV2l0aCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBjb21wYXJlV2l0aChjdXJyZW50VmFsdWUsIGNvbXBhcmVWYWx1ZSk7XG4gIH1cbiAgZWxzZSBpZiAodHlwZW9mIGNvbXBhcmVXaXRoID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjdXJyZW50VmFsdWVbY29tcGFyZVdpdGhdID09PSBjb21wYXJlVmFsdWVbY29tcGFyZVdpdGhdO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGNvbXBhcmVWYWx1ZSkgPyBjb21wYXJlVmFsdWUuaW5jbHVkZXMoY3VycmVudFZhbHVlKSA6IGN1cnJlbnRWYWx1ZSA9PT0gY29tcGFyZVZhbHVlO1xuICB9XG59O1xuY29uc3QgZ2VuZXJhdGVUZXh0ID0gKG9wdHMsIHZhbHVlLCBjb21wYXJlV2l0aCkgPT4ge1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgICAgIC5tYXAoKHYpID0+IHRleHRGb3JWYWx1ZShvcHRzLCB2LCBjb21wYXJlV2l0aCkpXG4gICAgICAuZmlsdGVyKChvcHQpID0+IG9wdCAhPT0gbnVsbClcbiAgICAgIC5qb2luKCcsICcpO1xuICB9XG4gIGVsc2Uge1xuICAgIHJldHVybiB0ZXh0Rm9yVmFsdWUob3B0cywgdmFsdWUsIGNvbXBhcmVXaXRoKSB8fCAnJztcbiAgfVxufTtcbmNvbnN0IHRleHRGb3JWYWx1ZSA9IChvcHRzLCB2YWx1ZSwgY29tcGFyZVdpdGgpID0+IHtcbiAgY29uc3Qgc2VsZWN0T3B0ID0gb3B0cy5maW5kKChvcHQpID0+IHtcbiAgICByZXR1cm4gY29tcGFyZU9wdGlvbnModmFsdWUsIGdldE9wdGlvblZhbHVlKG9wdCksIGNvbXBhcmVXaXRoKTtcbiAgfSk7XG4gIHJldHVybiBzZWxlY3RPcHQgPyBzZWxlY3RPcHQudGV4dENvbnRlbnQgOiBudWxsO1xufTtcbmxldCBzZWxlY3RJZHMgPSAwO1xuY29uc3QgT1BUSU9OX0NMQVNTID0gJ3NlbGVjdC1pbnRlcmZhY2Utb3B0aW9uJztcblNlbGVjdC5zdHlsZSA9IHtcbiAgaW9zOiBzZWxlY3RJb3NDc3MsXG4gIG1kOiBzZWxlY3RNZENzc1xufTtcblxuY29uc3Qgc2VsZWN0T3B0aW9uQ3NzID0gXCI6aG9zdHtkaXNwbGF5Om5vbmV9XCI7XG5cbmNvbnN0IFNlbGVjdE9wdGlvbiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pbnB1dElkID0gYGlvbi1zZWxvcHQtJHtzZWxlY3RPcHRpb25JZHMrK31gO1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gaChIb3N0LCB7IHJvbGU6IFwib3B0aW9uXCIsIGlkOiB0aGlzLmlucHV0SWQsIGNsYXNzOiBnZXRJb25Nb2RlKHRoaXMpIH0pO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5sZXQgc2VsZWN0T3B0aW9uSWRzID0gMDtcblNlbGVjdE9wdGlvbi5zdHlsZSA9IHNlbGVjdE9wdGlvbkNzcztcblxuY29uc3Qgc2VsZWN0UG9wb3Zlcklvc0NzcyA9IFwiLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1pb3MtaCBpb24tbGlzdC5zYy1pb24tc2VsZWN0LXBvcG92ZXItaW9ze21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH1pb24tbGlzdC1oZWFkZXIuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLWlvcyxpb24tbGFiZWwuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLWlvc3ttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjB9XCI7XG5cbmNvbnN0IHNlbGVjdFBvcG92ZXJNZENzcyA9IFwiLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZC1oIGlvbi1saXN0LnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZHttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MDttYXJnaW4tYm90dG9tOjB9aW9uLWxpc3QtaGVhZGVyLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZCxpb24tbGFiZWwuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLW1ke21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bWFyZ2luLXRvcDowO21hcmdpbi1ib3R0b206MH1pb24tbGlzdC5zYy1pb24tc2VsZWN0LXBvcG92ZXItbWQgaW9uLXJhZGlvLnNjLWlvbi1zZWxlY3QtcG9wb3Zlci1tZHtvcGFjaXR5OjB9aW9uLWl0ZW0uc2MtaW9uLXNlbGVjdC1wb3BvdmVyLW1key0taW5uZXItYm9yZGVyLXdpZHRoOjB9Lml0ZW0tcmFkaW8tY2hlY2tlZC5zYy1pb24tc2VsZWN0LXBvcG92ZXItbWR7LS1iYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLWNvbG9yLXByaW1hcnktcmdiLCA1NiwgMTI4LCAyNTUpLCAwLjA4KTstLWJhY2tncm91bmQtZm9jdXNlZDp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZik7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTowLjI7LS1iYWNrZ3JvdW5kLWhvdmVyOnZhcigtLWlvbi1jb2xvci1wcmltYXJ5LCAjMzg4MGZmKTstLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eTowLjEyfS5pdGVtLWNoZWNrYm94LWNoZWNrZWQuc2MtaW9uLXNlbGVjdC1wb3BvdmVyLW1key0tYmFja2dyb3VuZC1hY3RpdmF0ZWQ6dmFyKC0taW9uLWl0ZW0tY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKSk7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6dmFyKC0taW9uLWl0ZW0tY29sb3IsIHZhcigtLWlvbi10ZXh0LWNvbG9yLCAjMDAwKSk7LS1iYWNrZ3JvdW5kLWhvdmVyOnZhcigtLWlvbi1pdGVtLWNvbG9yLCB2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCkpOy0tY29sb3I6dmFyKC0taW9uLWNvbG9yLXByaW1hcnksICMzODgwZmYpfVwiO1xuXG5jb25zdCBTZWxlY3RQb3BvdmVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmhlYWRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnN1YkhlYWRlciA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tdWx0aXBsZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm9wdGlvbnMgPSBbXTtcbiAgfVxuICBmaW5kT3B0aW9uRnJvbUV2ZW50KGV2KSB7XG4gICAgY29uc3QgeyBvcHRpb25zIH0gPSB0aGlzO1xuICAgIHJldHVybiBvcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT09IGV2LnRhcmdldC52YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gYW4gb3B0aW9uIGlzIHNlbGVjdGVkIHdlIG5lZWQgdG8gZ2V0IHRoZSB2YWx1ZShzKVxuICAgKiBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uKHMpIGFuZCByZXR1cm4gaXQgaW4gdGhlIG9wdGlvblxuICAgKiBoYW5kbGVyXG4gICAqL1xuICBjYWxsT3B0aW9uSGFuZGxlcihldikge1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuZmluZE9wdGlvbkZyb21FdmVudChldik7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy5nZXRWYWx1ZXMoZXYpO1xuICAgIGlmIChvcHRpb24gPT09IG51bGwgfHwgb3B0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb24uaGFuZGxlcikge1xuICAgICAgc2FmZUNhbGwob3B0aW9uLmhhbmRsZXIsIHZhbHVlcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEaXNtaXNzZXMgdGhlIGhvc3QgcG9wb3ZlciB0aGF0IHRoZSBgaW9uLXNlbGVjdC1wb3BvdmVyYFxuICAgKiBpcyByZW5kZXJlZCB3aXRoaW4uXG4gICAqL1xuICBkaXNtaXNzUGFyZW50UG9wb3ZlcigpIHtcbiAgICBjb25zdCBwb3BvdmVyID0gdGhpcy5lbC5jbG9zZXN0KCdpb24tcG9wb3ZlcicpO1xuICAgIGlmIChwb3BvdmVyKSB7XG4gICAgICBwb3BvdmVyLmRpc21pc3MoKTtcbiAgICB9XG4gIH1cbiAgc2V0Q2hlY2tlZChldikge1xuICAgIGNvbnN0IHsgbXVsdGlwbGUgfSA9IHRoaXM7XG4gICAgY29uc3Qgb3B0aW9uID0gdGhpcy5maW5kT3B0aW9uRnJvbUV2ZW50KGV2KTtcbiAgICAvLyB0aGlzIGlzIGEgcG9wb3ZlciB3aXRoIGNoZWNrYm94ZXMgKG11bHRpcGxlIHZhbHVlIHNlbGVjdClcbiAgICAvLyB3ZSBuZWVkIHRvIHNldCB0aGUgY2hlY2tlZCB2YWx1ZSBmb3IgdGhpcyBvcHRpb25cbiAgICBpZiAobXVsdGlwbGUgJiYgb3B0aW9uKSB7XG4gICAgICBvcHRpb24uY2hlY2tlZCA9IGV2LmRldGFpbC5jaGVja2VkO1xuICAgIH1cbiAgfVxuICBnZXRWYWx1ZXMoZXYpIHtcbiAgICBjb25zdCB7IG11bHRpcGxlLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgLy8gdGhpcyBpcyBhIHBvcG92ZXIgd2l0aCBjaGVja2JveGVzIChtdWx0aXBsZSB2YWx1ZSBzZWxlY3QpXG4gICAgICAvLyByZXR1cm4gYW4gYXJyYXkgb2YgYWxsIHRoZSBjaGVja2VkIHZhbHVlc1xuICAgICAgcmV0dXJuIG9wdGlvbnMuZmlsdGVyKChvKSA9PiBvLmNoZWNrZWQpLm1hcCgobykgPT4gby52YWx1ZSk7XG4gICAgfVxuICAgIC8vIHRoaXMgaXMgYSBwb3BvdmVyIHdpdGggcmFkaW8gYnV0dG9ucyAoc2luZ2xlIHZhbHVlIHNlbGVjdClcbiAgICAvLyByZXR1cm4gdGhlIHZhbHVlIHRoYXQgd2FzIGNsaWNrZWQsIG90aGVyd2lzZSB1bmRlZmluZWRcbiAgICBjb25zdCBvcHRpb24gPSB0aGlzLmZpbmRPcHRpb25Gcm9tRXZlbnQoZXYpO1xuICAgIHJldHVybiBvcHRpb24gPyBvcHRpb24udmFsdWUgOiB1bmRlZmluZWQ7XG4gIH1cbiAgcmVuZGVyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgY29uc3QgeyBtdWx0aXBsZSB9ID0gdGhpcztcbiAgICBzd2l0Y2ggKG11bHRpcGxlKSB7XG4gICAgICBjYXNlIHRydWU6XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckNoZWNrYm94T3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJhZGlvT3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG4gIH1cbiAgcmVuZGVyQ2hlY2tib3hPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gKGgoXCJpb24taXRlbVwiLCB7IGNsYXNzOiBnZXRDbGFzc01hcChvcHRpb24uY3NzQ2xhc3MpIH0sIGgoXCJpb24tY2hlY2tib3hcIiwgeyBzbG90OiBcInN0YXJ0XCIsIHZhbHVlOiBvcHRpb24udmFsdWUsIGRpc2FibGVkOiBvcHRpb24uZGlzYWJsZWQsIGNoZWNrZWQ6IG9wdGlvbi5jaGVja2VkLCBsZWdhY3k6IHRydWUsIG9uSW9uQ2hhbmdlOiAoZXYpID0+IHtcbiAgICAgICAgdGhpcy5zZXRDaGVja2VkKGV2KTtcbiAgICAgICAgdGhpcy5jYWxsT3B0aW9uSGFuZGxlcihldik7XG4gICAgICB9IH0pLCBoKFwiaW9uLWxhYmVsXCIsIG51bGwsIG9wdGlvbi50ZXh0KSkpKTtcbiAgfVxuICByZW5kZXJSYWRpb09wdGlvbnMob3B0aW9ucykge1xuICAgIGNvbnN0IGNoZWNrZWQgPSBvcHRpb25zLmZpbHRlcigobykgPT4gby5jaGVja2VkKS5tYXAoKG8pID0+IG8udmFsdWUpWzBdO1xuICAgIHJldHVybiAoaChcImlvbi1yYWRpby1ncm91cFwiLCB7IHZhbHVlOiBjaGVja2VkLCBvbklvbkNoYW5nZTogKGV2KSA9PiB0aGlzLmNhbGxPcHRpb25IYW5kbGVyKGV2KSB9LCBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiAoaChcImlvbi1pdGVtXCIsIHsgY2xhc3M6IGdldENsYXNzTWFwKG9wdGlvbi5jc3NDbGFzcykgfSwgaChcImlvbi1sYWJlbFwiLCBudWxsLCBvcHRpb24udGV4dCksIGgoXCJpb24tcmFkaW9cIiwgeyB2YWx1ZTogb3B0aW9uLnZhbHVlLCBkaXNhYmxlZDogb3B0aW9uLmRpc2FibGVkLCBsZWdhY3k6IHRydWUsIG9uQ2xpY2s6ICgpID0+IHRoaXMuZGlzbWlzc1BhcmVudFBvcG92ZXIoKSwgb25LZXlVcDogKGV2KSA9PiB7XG4gICAgICAgIGlmIChldi5rZXkgPT09ICcgJykge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFNlbGVjdGluZyBhIHJhZGlvIG9wdGlvbiB3aXRoIGtleWJvYXJkIG5hdmlnYXRpb24sXG4gICAgICAgICAgICogZWl0aGVyIHRocm91Z2ggdGhlIEVudGVyIG9yIFNwYWNlIGtleXMsIHNob3VsZFxuICAgICAgICAgICAqIGRpc21pc3MgdGhlIHBvcG92ZXIuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdGhpcy5kaXNtaXNzUGFyZW50UG9wb3ZlcigpO1xuICAgICAgICB9XG4gICAgICB9IH0pKSkpKSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGVhZGVyLCBtZXNzYWdlLCBvcHRpb25zLCBzdWJIZWFkZXIgfSA9IHRoaXM7XG4gICAgY29uc3QgaGFzU3ViSGVhZGVyT3JNZXNzYWdlID0gc3ViSGVhZGVyICE9PSB1bmRlZmluZWQgfHwgbWVzc2FnZSAhPT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAoaChIb3N0LCB7IGNsYXNzOiBnZXRJb25Nb2RlKHRoaXMpIH0sIGgoXCJpb24tbGlzdFwiLCBudWxsLCBoZWFkZXIgIT09IHVuZGVmaW5lZCAmJiBoKFwiaW9uLWxpc3QtaGVhZGVyXCIsIG51bGwsIGhlYWRlciksIGhhc1N1YkhlYWRlck9yTWVzc2FnZSAmJiAoaChcImlvbi1pdGVtXCIsIG51bGwsIGgoXCJpb24tbGFiZWxcIiwgeyBjbGFzczogXCJpb24tdGV4dC13cmFwXCIgfSwgc3ViSGVhZGVyICE9PSB1bmRlZmluZWQgJiYgaChcImgzXCIsIG51bGwsIHN1YkhlYWRlciksIG1lc3NhZ2UgIT09IHVuZGVmaW5lZCAmJiBoKFwicFwiLCBudWxsLCBtZXNzYWdlKSkpKSwgdGhpcy5yZW5kZXJPcHRpb25zKG9wdGlvbnMpKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5TZWxlY3RQb3BvdmVyLnN0eWxlID0ge1xuICBpb3M6IHNlbGVjdFBvcG92ZXJJb3NDc3MsXG4gIG1kOiBzZWxlY3RQb3BvdmVyTWRDc3Ncbn07XG5cbmV4cG9ydCB7IFNlbGVjdCBhcyBpb25fc2VsZWN0LCBTZWxlY3RPcHRpb24gYXMgaW9uX3NlbGVjdF9vcHRpb24sIFNlbGVjdFBvcG92ZXIgYXMgaW9uX3NlbGVjdF9wb3BvdmVyIH07XG4iLCIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgdyBhcyB3aW4gfSBmcm9tICcuL2luZGV4LWIzMmNhZDk4LmpzJztcbmltcG9ydCB7IHIgYXMgcmFmIH0gZnJvbSAnLi9oZWxwZXJzLWY1ODZkYjFjLmpzJztcblxuLyoqXG4gKiBBIHV0aWxpdHkgdG8gY2FsY3VsYXRlIHRoZSBzaXplIG9mIGFuIG91dGxpbmUgbm90Y2hcbiAqIHdpZHRoIHJlbGF0aXZlIHRvIHRoZSBjb250ZW50IHBhc3NlZC4gVGhpcyBpcyB1c2VkIGluXG4gKiBjb21wb25lbnRzIHN1Y2ggYXMgYGlvbi1zZWxlY3RgIHdpdGggYGZpbGw9XCJvdXRsaW5lXCJgXG4gKiB3aGVyZSB3ZSBuZWVkIHRvIHBhc3Mgc2xvdHRlZCBIVE1MIGNvbnRlbnQuIFRoaXMgaXMgbm90XG4gKiBuZWVkZWQgd2hlbiByZW5kZXJpbmcgcGxhaW50ZXh0IGNvbnRlbnQgYmVjYXVzZSB3ZSBjYW5cbiAqIHJlbmRlciB0aGUgcGxhaW50ZXh0IGFnYWluIGhpZGRlbiB3aXRoIGBvcGFjaXR5OiAwYCBpbnNpZGVcbiAqIG9mIHRoZSBub3RjaC4gQXMgYSByZXN1bHQgd2UgY2FuIHJlbHkgb24gdGhlIGludHJpbnNpYyBzaXplXG4gKiBvZiB0aGUgZWxlbWVudCB0byBjb3JyZWN0bHkgY29tcHV0ZSB0aGUgbm90Y2ggd2lkdGguIFdlXG4gKiBjYW5ub3QgZG8gdGhpcyB3aXRoIHNsb3R0ZWQgY29udGVudCBiZWNhdXNlIHdlIGNhbm5vdCBwcm9qZWN0XG4gKiBpdCBpbnRvIDIgcGxhY2VzIGF0IG9uY2UuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0gZWw6IFRoZSBob3N0IGVsZW1lbnRcbiAqIEBwYXJhbSBnZXROb3RjaFNwYWNlckVsOiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgbm90Y2ggc3BhY2VyIGVsZW1lbnQgaW5zaWRlIG9mIHRoZSBjb21wb25lbnQgdGVtcGxhdGUuXG4gKiBAcGFyYW0gZ2V0TGFiZWxTbG90OiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgc2xvdHRlZCBjb250ZW50LlxuICovXG5jb25zdCBjcmVhdGVOb3RjaENvbnRyb2xsZXIgPSAoZWwsIGdldE5vdGNoU3BhY2VyRWwsIGdldExhYmVsU2xvdCkgPT4ge1xuICBsZXQgbm90Y2hWaXNpYmlsaXR5SU87XG4gIGNvbnN0IG5lZWRzRXhwbGljaXROb3RjaFdpZHRoID0gKCkgPT4ge1xuICAgIGNvbnN0IG5vdGNoU3BhY2VyRWwgPSBnZXROb3RjaFNwYWNlckVsKCk7XG4gICAgaWYgKFxuICAgIC8qKlxuICAgICAqIElmIHRoZSBub3RjaCBpcyBub3QgYmVpbmcgdXNlZFxuICAgICAqIHRoZW4gd2UgZG8gbm90IG5lZWQgdG8gc2V0IHRoZSBub3RjaCB3aWR0aC5cbiAgICAgKi9cbiAgICBub3RjaFNwYWNlckVsID09PSB1bmRlZmluZWQgfHxcbiAgICAgIC8qKlxuICAgICAgICogSWYgZWl0aGVyIHRoZSBsYWJlbCBwcm9wZXJ0eSBpcyBiZWluZ1xuICAgICAgICogdXNlZCBvciB0aGUgbGFiZWwgc2xvdCBpcyBub3QgZGVmaW5lZCxcbiAgICAgICAqIHRoZW4gd2UgZG8gbm90IG5lZWQgdG8gZXN0aW1hdGUgdGhlIG5vdGNoIHdpZHRoLlxuICAgICAgICovXG4gICAgICBlbC5sYWJlbCAhPT0gdW5kZWZpbmVkIHx8XG4gICAgICBnZXRMYWJlbFNsb3QoKSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgY2FsY3VsYXRlTm90Y2hXaWR0aCA9ICgpID0+IHtcbiAgICBpZiAobmVlZHNFeHBsaWNpdE5vdGNoV2lkdGgoKSkge1xuICAgICAgLyoqXG4gICAgICAgKiBSdW4gdGhpcyB0aGUgZnJhbWUgYWZ0ZXJcbiAgICAgICAqIHRoZSBicm93c2VyIGhhcyByZS1wYWludGVkIHRoZSBob3N0IGVsZW1lbnQuXG4gICAgICAgKiBPdGhlcndpc2UsIHRoZSBsYWJlbCBlbGVtZW50IG1heSBoYXZlIGEgd2lkdGhcbiAgICAgICAqIG9mIDAgYW5kIHRoZSBJbnRlcnNlY3Rpb25PYnNlcnZlciB3aWxsIGJlIHVzZWQuXG4gICAgICAgKi9cbiAgICAgIHJhZigoKSA9PiB7XG4gICAgICAgIHNldE5vdGNoV2lkdGgoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIFdoZW4gdXNpbmcgYSBsYWJlbCBwcm9wIHdlIGNhbiByZW5kZXJcbiAgICogdGhlIGxhYmVsIHZhbHVlIGluc2lkZSBvZiB0aGUgbm90Y2ggYW5kXG4gICAqIGxldCB0aGUgYnJvd3NlciBjYWxjdWxhdGUgdGhlIHNpemUgb2YgdGhlIG5vdGNoLlxuICAgKiBIb3dldmVyLCB3ZSBjYW5ub3QgcmVuZGVyIHRoZSBsYWJlbCBzbG90IGluIG11bHRpcGxlXG4gICAqIHBsYWNlcyBzbyB3ZSBuZWVkIHRvIG1hbnVhbGx5IGNhbGN1bGF0ZSB0aGUgbm90Y2ggZGltZW5zaW9uXG4gICAqIGJhc2VkIG9uIHRoZSBzaXplIG9mIHRoZSBzbG90dGVkIGNvbnRlbnQuXG4gICAqXG4gICAqIFRoaXMgZnVuY3Rpb24gc2hvdWxkIG9ubHkgYmUgdXNlZCB0byBzZXQgdGhlIG5vdGNoIHdpZHRoXG4gICAqIG9uIHNsb3R0ZWQgbGFiZWwgY29udGVudC4gVGhlIG5vdGNoIHdpZHRoIGZvciBsYWJlbCBwcm9wXG4gICAqIGNvbnRlbnQgaXMgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZVxuICAgKiBpbnRyaW5zaWMgc2l6ZSBvZiB0aGUgbGFiZWwgdGV4dC5cbiAgICovXG4gIGNvbnN0IHNldE5vdGNoV2lkdGggPSAoKSA9PiB7XG4gICAgY29uc3Qgbm90Y2hTcGFjZXJFbCA9IGdldE5vdGNoU3BhY2VyRWwoKTtcbiAgICBpZiAobm90Y2hTcGFjZXJFbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghbmVlZHNFeHBsaWNpdE5vdGNoV2lkdGgoKSkge1xuICAgICAgbm90Y2hTcGFjZXJFbC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnd2lkdGgnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgd2lkdGggPSBnZXRMYWJlbFNsb3QoKS5zY3JvbGxXaWR0aDtcbiAgICBpZiAoXG4gICAgLyoqXG4gICAgICogSWYgdGhlIGNvbXB1dGVkIHdpZHRoIG9mIHRoZSBsYWJlbCBpcyAwXG4gICAgICogYW5kIG5vdGNoU3BhY2VyRWwncyBvZmZzZXRQYXJlbnQgaXMgbnVsbFxuICAgICAqIHRoZW4gdGhhdCBtZWFucyB0aGUgZWxlbWVudCBpcyBoaWRkZW4uXG4gICAgICogQXMgYSByZXN1bHQsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIGVsZW1lbnRcbiAgICAgKiB0byBiZWNvbWUgdmlzaWJsZSBiZWZvcmUgc2V0dGluZyB0aGUgbm90Y2ggd2lkdGguXG4gICAgICpcbiAgICAgKiBXZSBkbyBub3QgY2hlY2sgZWwub2Zmc2V0UGFyZW50IGJlY2F1c2VcbiAgICAgKiB0aGF0IGNhbiBiZSBudWxsIGlmIHRoZSBob3N0IGVsZW1lbnQgaGFzXG4gICAgICogcG9zaXRpb246IGZpeGVkIGFwcGxpZWQgdG8gaXQuXG4gICAgICogbm90Y2hTcGFjZXJFbCBkb2VzIG5vdCBoYXZlIHBvc2l0aW9uOiBmaXhlZC5cbiAgICAgKi9cbiAgICB3aWR0aCA9PT0gMCAmJlxuICAgICAgbm90Y2hTcGFjZXJFbC5vZmZzZXRQYXJlbnQgPT09IG51bGwgJiZcbiAgICAgIHdpbiAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInIGluIHdpbikge1xuICAgICAgLyoqXG4gICAgICAgKiBJZiB0aGVyZSBpcyBhbiBJTyBhbHJlYWR5IGF0dGFjaGVkXG4gICAgICAgKiB0aGVuIHRoYXQgd2lsbCB1cGRhdGUgdGhlIG5vdGNoXG4gICAgICAgKiBvbmNlIHRoZSBlbGVtZW50IGJlY29tZXMgdmlzaWJsZS5cbiAgICAgICAqIEFzIGEgcmVzdWx0LCB0aGVyZSBpcyBubyBuZWVkIHRvIGNyZWF0ZVxuICAgICAgICogYW5vdGhlciBvbmUuXG4gICAgICAgKi9cbiAgICAgIGlmIChub3RjaFZpc2liaWxpdHlJTyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGlvID0gKG5vdGNoVmlzaWJpbGl0eUlPID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChldikgPT4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogSWYgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSB0aGVuIHdlXG4gICAgICAgICAqIGNhbiB0cnkgc2V0dGluZyB0aGUgbm90Y2ggd2lkdGggYWdhaW4uXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZXZbMF0uaW50ZXJzZWN0aW9uUmF0aW8gPT09IDEpIHtcbiAgICAgICAgICBzZXROb3RjaFdpZHRoKCk7XG4gICAgICAgICAgaW8uZGlzY29ubmVjdCgpO1xuICAgICAgICAgIG5vdGNoVmlzaWJpbGl0eUlPID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LCBcbiAgICAgIC8qKlxuICAgICAgICogU2V0IHRoZSByb290IHRvIGJlIHRoZSBob3N0IGVsZW1lbnRcbiAgICAgICAqIFRoaXMgY2F1c2VzIHRoZSBJTyBjYWxsYmFja1xuICAgICAgICogdG8gYmUgZmlyZWQgaW4gV2ViS2l0IGFzIHNvb24gYXMgdGhlIGVsZW1lbnRcbiAgICAgICAqIGlzIHZpc2libGUuIElmIHdlIHVzZWQgdGhlIGRlZmF1bHQgcm9vdCB2YWx1ZVxuICAgICAgICogdGhlbiBXZWJLaXQgd291bGQgb25seSBmaXJlIHRoZSBJTyBjYWxsYmFja1xuICAgICAgICogYWZ0ZXIgYW55IGFuaW1hdGlvbnMgKHN1Y2ggYXMgYSBtb2RhbCB0cmFuc2l0aW9uKVxuICAgICAgICogZmluaXNoZWQsIGFuZCB0aGVyZSB3b3VsZCBwb3RlbnRpYWxseSBiZSBhIGZsaWNrZXIuXG4gICAgICAgKi9cbiAgICAgIHsgdGhyZXNob2xkOiAwLjAxLCByb290OiBlbCB9KSk7XG4gICAgICBpby5vYnNlcnZlKG5vdGNoU3BhY2VyRWwpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIHRoZW4gd2UgY2FuIHNldCB0aGUgbm90Y2ggd2lkdGguXG4gICAgICogVGhlIG5vdGNoIGlzIG9ubHkgdmlzaWJsZSB3aGVuIHRoZSBsYWJlbCBpcyBzY2FsZWQsXG4gICAgICogd2hpY2ggaXMgd2h5IHdlIG11bHRpcGx5IHRoZSB3aWR0aCBieSAwLjc1IGFzIHRoaXMgaXNcbiAgICAgKiB0aGUgc2FtZSBhbW91bnQgdGhlIGxhYmVsIGVsZW1lbnQgaXMgc2NhbGVkIGJ5IGluIHRoZSBob3N0IENTUy5cbiAgICAgKiAoRm9yIGlvbi1zZWxlY3QsIHNlZSAkc2VsZWN0LWZsb2F0aW5nLWxhYmVsLXNjYWxlIGluIHNlbGVjdC52YXJzLnNjc3MpLlxuICAgICAqL1xuICAgIG5vdGNoU3BhY2VyRWwuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgYCR7d2lkdGggKiAwLjc1fXB4YCk7XG4gIH07XG4gIGNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgaWYgKG5vdGNoVmlzaWJpbGl0eUlPKSB7XG4gICAgICBub3RjaFZpc2liaWxpdHlJTy5kaXNjb25uZWN0KCk7XG4gICAgICBub3RjaFZpc2liaWxpdHlJTyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG4gIHJldHVybiB7XG4gICAgY2FsY3VsYXRlTm90Y2hXaWR0aCxcbiAgICBkZXN0cm95LFxuICB9O1xufTtcblxuZXhwb3J0IHsgY3JlYXRlTm90Y2hDb250cm9sbGVyIGFzIGMgfTtcbiIsIi8qIVxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxuICovXG5jb25zdCBob3N0Q29udGV4dCA9IChzZWxlY3RvciwgZWwpID0+IHtcbiAgcmV0dXJuIGVsLmNsb3Nlc3Qoc2VsZWN0b3IpICE9PSBudWxsO1xufTtcbi8qKlxuICogQ3JlYXRlIHRoZSBtb2RlIGFuZCBjb2xvciBjbGFzc2VzIGZvciB0aGUgY29tcG9uZW50IGJhc2VkIG9uIHRoZSBjbGFzc2VzIHBhc3NlZCBpblxuICovXG5jb25zdCBjcmVhdGVDb2xvckNsYXNzZXMgPSAoY29sb3IsIGNzc0NsYXNzTWFwKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnICYmIGNvbG9yLmxlbmd0aCA+IDBcbiAgICA/IE9iamVjdC5hc3NpZ24oeyAnaW9uLWNvbG9yJzogdHJ1ZSwgW2Bpb24tY29sb3ItJHtjb2xvcn1gXTogdHJ1ZSB9LCBjc3NDbGFzc01hcCkgOiBjc3NDbGFzc01hcDtcbn07XG5jb25zdCBnZXRDbGFzc0xpc3QgPSAoY2xhc3NlcykgPT4ge1xuICBpZiAoY2xhc3NlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYXJyYXkgPSBBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICByZXR1cm4gYXJyYXlcbiAgICAgIC5maWx0ZXIoKGMpID0+IGMgIT0gbnVsbClcbiAgICAgIC5tYXAoKGMpID0+IGMudHJpbSgpKVxuICAgICAgLmZpbHRlcigoYykgPT4gYyAhPT0gJycpO1xuICB9XG4gIHJldHVybiBbXTtcbn07XG5jb25zdCBnZXRDbGFzc01hcCA9IChjbGFzc2VzKSA9PiB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBnZXRDbGFzc0xpc3QoY2xhc3NlcykuZm9yRWFjaCgoYykgPT4gKG1hcFtjXSA9IHRydWUpKTtcbiAgcmV0dXJuIG1hcDtcbn07XG5jb25zdCBTQ0hFTUUgPSAvXlthLXpdW2EtejAtOStcXC0uXSo6LztcbmNvbnN0IG9wZW5VUkwgPSBhc3luYyAodXJsLCBldiwgZGlyZWN0aW9uLCBhbmltYXRpb24pID0+IHtcbiAgaWYgKHVybCAhPSBudWxsICYmIHVybFswXSAhPT0gJyMnICYmICFTQ0hFTUUudGVzdCh1cmwpKSB7XG4gICAgY29uc3Qgcm91dGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpO1xuICAgIGlmIChyb3V0ZXIpIHtcbiAgICAgIGlmIChldiAhPSBudWxsKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcm91dGVyLnB1c2godXJsLCBkaXJlY3Rpb24sIGFuaW1hdGlvbik7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZUNvbG9yQ2xhc3NlcyBhcyBjLCBnZXRDbGFzc01hcCBhcyBnLCBob3N0Q29udGV4dCBhcyBoLCBvcGVuVVJMIGFzIG8gfTtcbiJdLCJuYW1lcyI6WyJoIiwiZmluZEl0ZW1MYWJlbCIsImNyZWF0ZUxlZ2FjeUZvcm1Db250cm9sbGVyIiwiZWwiLCJjb250cm9sRWwiLCJsZWdhY3lDb250cm9sIiwiaGFzTGVnYWN5Q29udHJvbCIsInVuZGVmaW5lZCIsImhhc0xhYmVsUHJvcCIsImxhYmVsIiwiaGFzTGFiZWxTbG90IiwiaGFzQXJpYUxhYmVsQXR0cmlidXRlIiwiaGFzQXR0cmlidXRlIiwic2hhZG93Um9vdCIsImxlZ2FjeUl0ZW1MYWJlbCIsImxlZ2FjeSIsInJvb3QiLCJOQU1FRF9MQUJFTF9TTE9UX0NPTVBPTkVOVFMiLCJpbmNsdWRlcyIsInRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yIiwiVU5OQU1FRF9MQUJFTF9TTE9UX0NPTVBPTkVOVFMiLCJ0ZXh0Q29udGVudCIsImMiLCJyIiwicmVnaXN0ZXJJbnN0YW5jZSIsImQiLCJjcmVhdGVFdmVudCIsIkgiLCJIb3N0IiwiZiIsImdldEVsZW1lbnQiLCJpIiwiZm9yY2VVcGRhdGUiLCJjcmVhdGVOb3RjaENvbnRyb2xsZXIiLCJrIiwiaW5oZXJpdEF0dHJpYnV0ZXMiLCJmb2N1c0VsZW1lbnQiLCJyZW5kZXJIaWRkZW5JbnB1dCIsImUiLCJnZXRBcmlhTGFiZWwiLCJwIiwicHJpbnRJb25XYXJuaW5nIiwicG9wb3ZlckNvbnRyb2xsZXIiLCJiIiwiYWN0aW9uU2hlZXRDb250cm9sbGVyIiwiYSIsImFsZXJ0Q29udHJvbGxlciIsInMiLCJzYWZlQ2FsbCIsImlzUlRMIiwiaG9zdENvbnRleHQiLCJjcmVhdGVDb2xvckNsYXNzZXMiLCJnIiwiZ2V0Q2xhc3NNYXAiLCJ3Iiwid2F0Y2hGb3JPcHRpb25zIiwiY2hldnJvbkV4cGFuZCIsInEiLCJjYXJldERvd25TaGFycCIsImdldElvbk1vZGUiLCJzZWxlY3RJb3NDc3MiLCJzZWxlY3RNZENzcyIsIlNlbGVjdCIsImNvbnN0cnVjdG9yIiwiaG9zdFJlZiIsImlvbkNoYW5nZSIsImlvbkNhbmNlbCIsImlvbkRpc21pc3MiLCJpb25Gb2N1cyIsImlvbkJsdXIiLCJpb25TdHlsZSIsImlucHV0SWQiLCJzZWxlY3RJZHMiLCJpbmhlcml0ZWRBdHRyaWJ1dGVzIiwiaGFzTG9nZ2VkRGVwcmVjYXRpb25XYXJuaW5nIiwib25DbGljayIsImV2Iiwic2V0Rm9jdXMiLCJvcGVuIiwib25Gb2N1cyIsImVtaXQiLCJvbkJsdXIiLCJpc0V4cGFuZGVkIiwiY2FuY2VsVGV4dCIsImNvbG9yIiwiY29tcGFyZVdpdGgiLCJkaXNhYmxlZCIsImZpbGwiLCJpbnRlcmZhY2UiLCJpbnRlcmZhY2VPcHRpb25zIiwianVzdGlmeSIsImxhYmVsUGxhY2VtZW50IiwibXVsdGlwbGUiLCJuYW1lIiwib2tUZXh0IiwicGxhY2Vob2xkZXIiLCJzZWxlY3RlZFRleHQiLCJ0b2dnbGVJY29uIiwiZXhwYW5kZWRJY29uIiwic2hhcGUiLCJ2YWx1ZSIsInN0eWxlQ2hhbmdlZCIsImVtaXRTdHlsZSIsInNldFZhbHVlIiwiY29tcG9uZW50V2lsbExvYWQiLCJjb25uZWN0ZWRDYWxsYmFjayIsIl90aGlzIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJsZWdhY3lGb3JtQ29udHJvbGxlciIsIm5vdGNoQ29udHJvbGxlciIsIm5vdGNoU3BhY2VyRWwiLCJsYWJlbFNsb3QiLCJ1cGRhdGVPdmVybGF5T3B0aW9ucyIsIm11dGF0aW9uTyIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiZGlzY29ubmVjdCIsImRlc3Ryb3kiLCJldmVudCIsIl90aGlzMiIsIm92ZXJsYXkiLCJjcmVhdGVPdmVybGF5Iiwib25EaWREaXNtaXNzIiwidGhlbiIsInByZXNlbnQiLCJpbmRleE9mU2VsZWN0ZWQiLCJjaGlsZE9wdHMiLCJtYXAiLCJvIiwiaW5kZXhPZiIsInNlbGVjdGVkSXRlbSIsImludGVyYWN0aXZlRWwiLCJmb2N1cyIsInNlbGVjdEludGVyZmFjZSIsImNvbnNvbGUiLCJ3YXJuIiwib3BlbkFjdGlvblNoZWV0Iiwib3BlblBvcG92ZXIiLCJvcGVuQWxlcnQiLCJidXR0b25zIiwiY3JlYXRlQWN0aW9uU2hlZXRCdXR0b25zIiwicG9wb3ZlciIsIm9wdGlvbnMiLCJjcmVhdGVQb3BvdmVyT3B0aW9ucyIsImlucHV0VHlwZSIsImlucHV0cyIsImNyZWF0ZUFsZXJ0SW5wdXRzIiwiZGF0YSIsInNlbGVjdFZhbHVlIiwiYWN0aW9uU2hlZXRCdXR0b25zIiwib3B0aW9uIiwiZ2V0T3B0aW9uVmFsdWUiLCJjb3B5Q2xhc3NlcyIsIkFycmF5IiwiZnJvbSIsImNsYXNzTGlzdCIsImZpbHRlciIsImNscyIsImpvaW4iLCJvcHRDbGFzcyIsIk9QVElPTl9DTEFTUyIsInJvbGUiLCJpc09wdGlvblNlbGVjdGVkIiwidGV4dCIsImNzc0NsYXNzIiwiaGFuZGxlciIsInB1c2giLCJhbGVydElucHV0cyIsInR5cGUiLCJjaGVja2VkIiwicG9wb3Zlck9wdGlvbnMiLCJzZWxlY3RlZCIsImNsb3NlIiwiX3RoaXMzIiwibW9kZSIsInNob3dCYWNrZHJvcCIsInNpemUiLCJpdGVtIiwiY2xvc2VzdCIsImNvbnRhaW5zIiwiT2JqZWN0IiwiYXNzaWduIiwiZGV0YWlsIiwiaW9uU2hhZG93VGFyZ2V0IiwiaGFzRmxvYXRpbmdPclN0YWNrZWRMYWJlbCIsIm5hdGl2ZVdyYXBwZXJFbCIsInBvcG92ZXJPcHRzIiwiYWxpZ25tZW50IiwiY29tcG9uZW50IiwiY29tcG9uZW50UHJvcHMiLCJoZWFkZXIiLCJzdWJIZWFkZXIiLCJtZXNzYWdlIiwiY3JlYXRlIiwiX3RoaXM0IiwiYWN0aW9uU2hlZXRPcHRzIiwiX3RoaXM1IiwibGFiZWxUZXh0IiwiZ2V0TGFiZWwiLCJhbGVydE9wdHMiLCJzZWxlY3RlZFZhbHVlcyIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGlzbWlzcyIsImhhc1ZhbHVlIiwiZ2V0VGV4dCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZW5lcmF0ZVRleHQiLCJmb2N1c0VsIiwic3R5bGUiLCJyZW5kZXJMYWJlbCIsImNsYXNzIiwiaGFzTGFiZWwiLCJwYXJ0IiwiY29tcG9uZW50RGlkUmVuZGVyIiwiX2EiLCJjYWxjdWxhdGVOb3RjaFdpZHRoIiwicmVuZGVyTGFiZWxDb250YWluZXIiLCJoYXNPdXRsaW5lRmlsbCIsInJlZiIsInJlbmRlclNlbGVjdCIsImp1c3RpZnlFbmFibGVkIiwicnRsIiwiaW5JdGVtIiwic2hvdWxkUmVuZGVySGlnaGxpZ2h0IiwicGFyc2VWYWx1ZSIsImlkIiwicmVuZGVyU2VsZWN0VGV4dCIsInJlbmRlclNlbGVjdEljb24iLCJyZW5kZXJMaXN0Ym94IiwicmVuZGVyTGVnYWN5U2VsZWN0IiwibGFiZWxJZCIsImRpc3BsYXlWYWx1ZSIsInNlbGVjdFRleHQiLCJkaXNwbGF5TGFiZWwiLCJhZGRQbGFjZWhvbGRlckNsYXNzIiwic2VsZWN0VGV4dENsYXNzZXMiLCJ0ZXh0UGFydCIsImljb24iLCJkZWZhdWx0SWNvbiIsImFyaWFMYWJlbCIsIl9iIiwiZGVmaW5lZExhYmVsIiwicmVuZGVyZWRMYWJlbCIsInJlbmRlciIsIndhdGNoZXJzIiwiY3VycmVudFZhbHVlIiwiY29tcGFyZVZhbHVlIiwiaXNBcnJheSIsInNvbWUiLCJ2YWwiLCJjb21wYXJlT3B0aW9ucyIsInRvU3RyaW5nIiwib3B0cyIsInYiLCJ0ZXh0Rm9yVmFsdWUiLCJvcHQiLCJzZWxlY3RPcHQiLCJmaW5kIiwiaW9zIiwibWQiLCJzZWxlY3RPcHRpb25Dc3MiLCJTZWxlY3RPcHRpb24iLCJzZWxlY3RPcHRpb25JZHMiLCJzZWxlY3RQb3BvdmVySW9zQ3NzIiwic2VsZWN0UG9wb3Zlck1kQ3NzIiwiU2VsZWN0UG9wb3ZlciIsImZpbmRPcHRpb25Gcm9tRXZlbnQiLCJ0YXJnZXQiLCJjYWxsT3B0aW9uSGFuZGxlciIsInZhbHVlcyIsImdldFZhbHVlcyIsImRpc21pc3NQYXJlbnRQb3BvdmVyIiwic2V0Q2hlY2tlZCIsInJlbmRlck9wdGlvbnMiLCJyZW5kZXJDaGVja2JveE9wdGlvbnMiLCJyZW5kZXJSYWRpb09wdGlvbnMiLCJzbG90Iiwib25Jb25DaGFuZ2UiLCJvbktleVVwIiwia2V5IiwiaGFzU3ViSGVhZGVyT3JNZXNzYWdlIiwiaW9uX3NlbGVjdCIsImlvbl9zZWxlY3Rfb3B0aW9uIiwiaW9uX3NlbGVjdF9wb3BvdmVyIiwid2luIiwicmFmIiwiZ2V0Tm90Y2hTcGFjZXJFbCIsImdldExhYmVsU2xvdCIsIm5vdGNoVmlzaWJpbGl0eUlPIiwibmVlZHNFeHBsaWNpdE5vdGNoV2lkdGgiLCJzZXROb3RjaFdpZHRoIiwicmVtb3ZlUHJvcGVydHkiLCJ3aWR0aCIsInNjcm9sbFdpZHRoIiwib2Zmc2V0UGFyZW50IiwiaW8iLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImludGVyc2VjdGlvblJhdGlvIiwidGhyZXNob2xkIiwib2JzZXJ2ZSIsInNldFByb3BlcnR5Iiwic2VsZWN0b3IiLCJjc3NDbGFzc01hcCIsImxlbmd0aCIsImdldENsYXNzTGlzdCIsImNsYXNzZXMiLCJhcnJheSIsInNwbGl0IiwidHJpbSIsImZvckVhY2giLCJTQ0hFTUUiLCJvcGVuVVJMIiwiX3JlZiIsInVybCIsImRpcmVjdGlvbiIsImFuaW1hdGlvbiIsInRlc3QiLCJyb3V0ZXIiLCJkb2N1bWVudCIsInByZXZlbnREZWZhdWx0IiwiX3giLCJfeDIiLCJfeDMiLCJfeDQiLCJhcHBseSIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290Ijoid2VicGFjazovLy8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsM119