"use strict";
(self["webpackChunkapp"] = self["webpackChunkapp"] || []).push([["node_modules_ionic_core_dist_esm_ion-tab_2_entry_js"],{

/***/ 33514:
/*!**************************************************************!*\
  !*** ./node_modules/@ionic/core/dist/esm/ion-tab_2.entry.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ion_tab: () => (/* binding */ Tab),
/* harmony export */   ion_tabs: () => (/* binding */ Tabs)
/* harmony export */ });
/* harmony import */ var C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js */ 71670);
/* harmony import */ var _index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-36a5fd75.js */ 78705);
/* harmony import */ var _framework_delegate_6a45ed30_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./framework-delegate-6a45ed30.js */ 78098);
/* harmony import */ var _helpers_f586db1c_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers-f586db1c.js */ 75272);

/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */



const tabCss = ":host(.tab-hidden){display:none !important}";
const Tab = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.loaded = false;
    this.active = false;
    this.delegate = undefined;
    this.tab = undefined;
    this.component = undefined;
  }
  componentWillLoad() {
    var _this = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (_this.active) {
        yield _this.setActive();
      }
    })();
  }
  /** Set the active component for the tab */
  setActive() {
    var _this2 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      yield _this2.prepareLazyLoaded();
      _this2.active = true;
    })();
  }
  changeActive(isActive) {
    if (isActive) {
      this.prepareLazyLoaded();
    }
  }
  prepareLazyLoaded() {
    if (!this.loaded && this.component != null) {
      this.loaded = true;
      try {
        return (0,_framework_delegate_6a45ed30_js__WEBPACK_IMPORTED_MODULE_2__.a)(this.delegate, this.el, this.component, ['ion-page']);
      } catch (e) {
        console.error(e);
      }
    }
    return Promise.resolve(undefined);
  }
  render() {
    const {
      tab,
      active,
      component
    } = this;
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      role: "tabpanel",
      "aria-hidden": !active ? 'true' : null,
      "aria-labelledby": `tab-button-${tab}`,
      class: {
        'ion-page': component === undefined,
        'tab-hidden': !active
      }
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
  static get watchers() {
    return {
      "active": ["changeActive"]
    };
  }
};
Tab.style = tabCss;
const tabsCss = ":host{left:0;right:0;top:0;bottom:0;display:-ms-flexbox;display:flex;position:absolute;-ms-flex-direction:column;flex-direction:column;width:100%;height:100%;contain:layout size style;z-index:0}.tabs-inner{position:relative;-ms-flex:1;flex:1;contain:layout size style}";
const Tabs = class {
  constructor(hostRef) {
    (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    this.ionNavWillLoad = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionNavWillLoad", 7);
    this.ionTabsWillChange = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionTabsWillChange", 3);
    this.ionTabsDidChange = (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.d)(this, "ionTabsDidChange", 3);
    this.transitioning = false;
    this.onTabClicked = ev => {
      const {
        href,
        tab
      } = ev.detail;
      if (this.useRouter && href !== undefined) {
        const router = document.querySelector('ion-router');
        if (router) {
          router.push(href);
        }
      } else {
        this.select(tab);
      }
    };
    this.selectedTab = undefined;
    this.useRouter = false;
  }
  componentWillLoad() {
    var _this3 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      if (!_this3.useRouter) {
        _this3.useRouter = !!document.querySelector('ion-router') && !_this3.el.closest('[no-router]');
      }
      if (!_this3.useRouter) {
        const tabs = _this3.tabs;
        if (tabs.length > 0) {
          yield _this3.select(tabs[0]);
        }
      }
      _this3.ionNavWillLoad.emit();
    })();
  }
  componentWillRender() {
    const tabBar = this.el.querySelector('ion-tab-bar');
    if (tabBar) {
      const tab = this.selectedTab ? this.selectedTab.tab : undefined;
      tabBar.selectedTab = tab;
    }
  }
  /**
   * Select a tab by the value of its `tab` property or an element reference. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.
   *
   * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
   */
  select(tab) {
    var _this4 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const selectedTab = getTab(_this4.tabs, tab);
      if (!_this4.shouldSwitch(selectedTab)) {
        return false;
      }
      yield _this4.setActive(selectedTab);
      yield _this4.notifyRouter();
      _this4.tabSwitch();
      return true;
    })();
  }
  /**
   * Get a specific tab by the value of its `tab` property or an element reference. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.
   *
   * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
   */
  getTab(tab) {
    var _this5 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      return getTab(_this5.tabs, tab);
    })();
  }
  /**
   * Get the currently selected tab. This method is only available for vanilla JavaScript projects. The Angular, React, and Vue implementations of tabs are coupled to each framework's router.
   */
  getSelected() {
    return Promise.resolve(this.selectedTab ? this.selectedTab.tab : undefined);
  }
  /** @internal */
  setRouteId(id) {
    var _this6 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      const selectedTab = getTab(_this6.tabs, id);
      if (!_this6.shouldSwitch(selectedTab)) {
        return {
          changed: false,
          element: _this6.selectedTab
        };
      }
      yield _this6.setActive(selectedTab);
      return {
        changed: true,
        element: _this6.selectedTab,
        markVisible: () => _this6.tabSwitch()
      };
    })();
  }
  /** @internal */
  getRouteId() {
    var _this7 = this;
    return (0,C_Users_Blessing_Kunaka_Desktop_mining_expo_mining_expo_node_modules_babel_runtime_helpers_esm_asyncToGenerator_js__WEBPACK_IMPORTED_MODULE_0__["default"])(function* () {
      var _a;
      const tabId = (_a = _this7.selectedTab) === null || _a === void 0 ? void 0 : _a.tab;
      return tabId !== undefined ? {
        id: tabId,
        element: _this7.selectedTab
      } : undefined;
    })();
  }
  setActive(selectedTab) {
    if (this.transitioning) {
      return Promise.reject('transitioning already happening');
    }
    this.transitioning = true;
    this.leavingTab = this.selectedTab;
    this.selectedTab = selectedTab;
    this.ionTabsWillChange.emit({
      tab: selectedTab.tab
    });
    selectedTab.active = true;
    return Promise.resolve();
  }
  tabSwitch() {
    const selectedTab = this.selectedTab;
    const leavingTab = this.leavingTab;
    this.leavingTab = undefined;
    this.transitioning = false;
    if (!selectedTab) {
      return;
    }
    if (leavingTab !== selectedTab) {
      if (leavingTab) {
        leavingTab.active = false;
      }
      this.ionTabsDidChange.emit({
        tab: selectedTab.tab
      });
    }
  }
  notifyRouter() {
    if (this.useRouter) {
      const router = document.querySelector('ion-router');
      if (router) {
        return router.navChanged('forward');
      }
    }
    return Promise.resolve(false);
  }
  shouldSwitch(selectedTab) {
    const leavingTab = this.selectedTab;
    return selectedTab !== undefined && selectedTab !== leavingTab && !this.transitioning;
  }
  get tabs() {
    return Array.from(this.el.querySelectorAll('ion-tab'));
  }
  render() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.H, {
      onIonTabButtonClick: this.onTabClicked
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "top"
    }), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "tabs-inner"
    }, (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", null)), (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "bottom"
    }));
  }
  get el() {
    return (0,_index_36a5fd75_js__WEBPACK_IMPORTED_MODULE_1__.f)(this);
  }
};
const getTab = (tabs, tab) => {
  const tabEl = typeof tab === 'string' ? tabs.find(t => t.tab === tab) : tab;
  if (!tabEl) {
    console.error(`tab with id: "${tabEl}" does not exist`);
  }
  return tabEl;
};
Tabs.style = tabsCss;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXRhYl8yX2VudHJ5X2pzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDNkc7QUFDckM7QUFDekM7QUFFL0IsTUFBTVcsTUFBTSxHQUFHLDZDQUE2QztBQUU1RCxNQUFNQyxHQUFHLEdBQUcsTUFBTTtFQUNoQkMsV0FBV0EsQ0FBQ0MsT0FBTyxFQUFFO0lBQ25CYixxREFBZ0IsQ0FBQyxJQUFJLEVBQUVhLE9BQU8sQ0FBQztJQUMvQixJQUFJLENBQUNDLE1BQU0sR0FBRyxLQUFLO0lBQ25CLElBQUksQ0FBQ0MsTUFBTSxHQUFHLEtBQUs7SUFDbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUdDLFNBQVM7SUFDekIsSUFBSSxDQUFDQyxHQUFHLEdBQUdELFNBQVM7SUFDcEIsSUFBSSxDQUFDRSxTQUFTLEdBQUdGLFNBQVM7RUFDNUI7RUFDTUcsaUJBQWlCQSxDQUFBLEVBQUc7SUFBQSxJQUFBQyxLQUFBO0lBQUEsT0FBQUMsOEpBQUE7TUFDeEIsSUFBSUQsS0FBSSxDQUFDTixNQUFNLEVBQUU7UUFDZixNQUFNTSxLQUFJLENBQUNFLFNBQVMsQ0FBQyxDQUFDO01BQ3hCO0lBQUM7RUFDSDtFQUNBO0VBQ01BLFNBQVNBLENBQUEsRUFBRztJQUFBLElBQUFDLE1BQUE7SUFBQSxPQUFBRiw4SkFBQTtNQUNoQixNQUFNRSxNQUFJLENBQUNDLGlCQUFpQixDQUFDLENBQUM7TUFDOUJELE1BQUksQ0FBQ1QsTUFBTSxHQUFHLElBQUk7SUFBQztFQUNyQjtFQUNBVyxZQUFZQSxDQUFDQyxRQUFRLEVBQUU7SUFDckIsSUFBSUEsUUFBUSxFQUFFO01BQ1osSUFBSSxDQUFDRixpQkFBaUIsQ0FBQyxDQUFDO0lBQzFCO0VBQ0Y7RUFDQUEsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ1gsTUFBTSxJQUFJLElBQUksQ0FBQ0ssU0FBUyxJQUFJLElB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LEVBQUU7SUFBUyxDQUFDLENBQUMsQ0FBQztFQUM1SztFQUNBLElBQUkzRCxFQUFFQSxDQUFBLEVBQUc7SUFBRSxPQUFPdkIscURBQVUsQ0FBQyxJQUFJLENBQUM7RUFBRTtBQUN0QyxDQUFDO0FBQ0QsTUFBTTJELE1BQU0sR0FBR0EsQ0FBQ04sSUFBSSxFQUFFeEMsR0FBRyxLQUFLO0VBQzVCLE1BQU1zRSxLQUFLLEdBQUcsT0FBT3RFLEdBQUcsS0FBSyxRQUFRLEdBQUd3QyxJQUFJLENBQUMrQixJQUFJLENBQUVDLENBQUMsSUFBS0EsQ0FBQyxDQUFDeEUsR0FBRyxLQUFLQSxHQUFHLENBQUMsR0FBR0EsR0FBRztFQUM3RSxJQUFJLENBQUNzRSxLQUFLLEVBQUU7SUFDVjFELE9BQU8sQ0FBQ0MsS0FBSyxDQUFFLGlCQUFnQnlELEtBQU0sa0JBQWlCLENBQUM7RUFDekQ7RUFDQSxPQUFPQSxLQUFLO0FBQ2QsQ0FBQztBQUNEaEQsSUFBSSxDQUFDRixLQUFLLEdBQUdDLE9BQU8iLCJzb3VyY2VzIjpbIi4vbm9kZV9tb2R1bGVzL0Bpb25pYy9jb3JlL2Rpc3QvZXNtL2lvbi10YWJfMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBoLCBIIGFzIEhvc3QsIGYgYXMgZ2V0RWxlbWVudCwgZCBhcyBjcmVhdGVFdmVudCB9IGZyb20gJy4vaW5kZXgtMzZhNWZkNzUuanMnO1xuaW1wb3J0IHsgYSBhcyBhdHRhY2hDb21wb25lbnQgfSBmcm9tICcuL2ZyYW1ld29yay1kZWxlZ2F0ZS02YTQ1ZWQzMC5qcyc7XG5pbXBvcnQgJy4vaGVscGVycy1mNTg2ZGIxYy5qcyc7XG5cbmNvbnN0IHRhYkNzcyA9IFwiOmhvc3QoLnRhYi1oaWRkZW4pe2Rpc3BsYXk6bm9uZSAhaW1wb3J0YW50fVwiO1xuXG5jb25zdCBUYWIgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGhvc3RSZWYpIHtcbiAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIGhvc3RSZWYpO1xuICAgIHRoaXMubG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLmRlbGVnYXRlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudGFiID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29tcG9uZW50ID0gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgYXdhaXQgdGhpcy5zZXRBY3RpdmUoKTtcbiAgICB9XG4gIH1cbiAgLyoqIFNldCB0aGUgYWN0aXZlIGNvbXBvbmVudCBmb3IgdGhlIHRhYiAqL1xuICBhc3luYyBzZXRBY3RpdmUoKSB7XG4gICAgYXdhaXQgdGhpcy5wcmVwYXJlTGF6eUxvYWRlZCgpO1xuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgfVxuICBjaGFuZ2VBY3RpdmUoaXNBY3RpdmUpIHtcbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIHRoaXMucHJlcGFyZUxhenlMb2FkZWQoKTtcbiAgICB9XG4gIH1cbiAgcHJlcGFyZUxhenlMb2FkZWQoKSB7XG4gICAgaWYgKCF0aGlzLmxvYWRlZCAmJiB0aGlzLmNvbXBvbmVudCAhPSBudWxsKSB7XG4gICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXR0YWNoQ29tcG9uZW50KHRoaXMuZGVsZWdhdGUsIHRoaXMuZWwsIHRoaXMuY29tcG9uZW50LCBbJ2lvbi1wYWdlJ10pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHRhYiwgYWN0aXZlLCBjb21wb25lbnQgfSA9IHRoaXM7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgcm9sZTogXCJ0YWJwYW5lbFwiLCBcImFyaWEtaGlkZGVuXCI6ICFhY3RpdmUgPyAndHJ1ZScgOiBudWxsLCBcImFyaWEtbGFiZWxsZWRieVwiOiBgdGFiLWJ1dHRvbi0ke3RhYn1gLCBjbGFzczoge1xuICAgICAgICAnaW9uLXBhZ2UnOiBjb21wb25lbnQgPT09IHVuZGVmaW5lZCxcbiAgICAgICAgJ3RhYi1oaWRkZW4nOiAhYWN0aXZlLFxuICAgICAgfSB9LCBoKFwic2xvdFwiLCBudWxsKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcImFjdGl2ZVwiOiBbXCJjaGFuZ2VBY3RpdmVcIl1cbiAgfTsgfVxufTtcblRhYi5zdHlsZSA9IHRhYkNzcztcblxuY29uc3QgdGFic0NzcyA9IFwiOmhvc3R7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246YWJzb2x1dGU7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtjb250YWluOmxheW91dCBzaXplIHN0eWxlO3otaW5kZXg6MH0udGFicy1pbm5lcntwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleDoxO2ZsZXg6MTtjb250YWluOmxheW91dCBzaXplIHN0eWxlfVwiO1xuXG5jb25zdCBUYWJzID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihob3N0UmVmKSB7XG4gICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzLCBob3N0UmVmKTtcbiAgICB0aGlzLmlvbk5hdldpbGxMb2FkID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25OYXZXaWxsTG9hZFwiLCA3KTtcbiAgICB0aGlzLmlvblRhYnNXaWxsQ2hhbmdlID0gY3JlYXRlRXZlbnQodGhpcywgXCJpb25UYWJzV2lsbENoYW5nZVwiLCAzKTtcbiAgICB0aGlzLmlvblRhYnNEaWRDaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblRhYnNEaWRDaGFuZ2VcIiwgMyk7XG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5vblRhYkNsaWNrZWQgPSAoZXYpID0+IHtcbiAgICAgIGNvbnN0IHsgaHJlZiwgdGFiIH0gPSBldi5kZXRhaWw7XG4gICAgICBpZiAodGhpcy51c2VSb3V0ZXIgJiYgaHJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHJvdXRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yb3V0ZXInKTtcbiAgICAgICAgaWYgKHJvdXRlcikge1xuICAgICAgICAgIHJvdXRlci5wdXNoKGhyZWYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5zZWxlY3QodGFiKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuc2VsZWN0ZWRUYWIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy51c2VSb3V0ZXIgPSBmYWxzZTtcbiAgfVxuICBhc3luYyBjb21wb25lbnRXaWxsTG9hZCgpIHtcbiAgICBpZiAoIXRoaXMudXNlUm91dGVyKSB7XG4gICAgICB0aGlzLnVzZVJvdXRlciA9ICEhZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW9uLXJvdXRlcicpICYmICF0aGlzLmVsLmNsb3Nlc3QoJ1tuby1yb3V0ZXJdJyk7XG4gICAgfVxuICAgIGlmICghdGhpcy51c2VSb3V0ZXIpIHtcbiAgICAgIGNvbnN0IHRhYnMgPSB0aGlzLnRhYnM7XG4gICAgICBpZiAodGFicy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2VsZWN0KHRhYnNbMF0pO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmlvbk5hdldpbGxMb2FkLmVtaXQoKTtcbiAgfVxuICBjb21wb25lbnRXaWxsUmVuZGVyKCkge1xuICAgIGNvbnN0IHRhYkJhciA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignaW9uLXRhYi1iYXInKTtcbiAgICBpZiAodGFiQmFyKSB7XG4gICAgICBjb25zdCB0YWIgPSB0aGlzLnNlbGVjdGVkVGFiID8gdGhpcy5zZWxlY3RlZFRhYi50YWIgOiB1bmRlZmluZWQ7XG4gICAgICB0YWJCYXIuc2VsZWN0ZWRUYWIgPSB0YWI7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBTZWxlY3QgYSB0YWIgYnkgdGhlIHZhbHVlIG9mIGl0cyBgdGFiYCBwcm9wZXJ0eSBvciBhbiBlbGVtZW50IHJlZmVyZW5jZS4gVGhpcyBtZXRob2QgaXMgb25seSBhdmFpbGFibGUgZm9yIHZhbmlsbGEgSmF2YVNjcmlwdCBwcm9qZWN0cy4gVGhlIEFuZ3VsYXIsIFJlYWN0LCBhbmQgVnVlIGltcGxlbWVudGF0aW9ucyBvZiB0YWJzIGFyZSBjb3VwbGVkIHRvIGVhY2ggZnJhbWV3b3JrJ3Mgcm91dGVyLlxuICAgKlxuICAgKiBAcGFyYW0gdGFiIFRoZSB0YWIgaW5zdGFuY2UgdG8gc2VsZWN0LiBJZiBwYXNzZWQgYSBzdHJpbmcsIGl0IHNob3VsZCBiZSB0aGUgdmFsdWUgb2YgdGhlIHRhYidzIGB0YWJgIHByb3BlcnR5LlxuICAgKi9cbiAgYXN5bmMgc2VsZWN0KHRhYikge1xuICAgIGNvbnN0IHNlbGVjdGVkVGFiID0gZ2V0VGFiKHRoaXMudGFicywgdGFiKTtcbiAgICBpZiAoIXRoaXMuc2hvdWxkU3dpdGNoKHNlbGVjdGVkVGFiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnNldEFjdGl2ZShzZWxlY3RlZFRhYik7XG4gICAgYXdhaXQgdGhpcy5ub3RpZnlSb3V0ZXIoKTtcbiAgICB0aGlzLnRhYlN3aXRjaCgpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBzcGVjaWZpYyB0YWIgYnkgdGhlIHZhbHVlIG9mIGl0cyBgdGFiYCBwcm9wZXJ0eSBvciBhbiBlbGVtZW50IHJlZmVyZW5jZS4gVGhpcyBtZXRob2QgaXMgb25seSBhdmFpbGFibGUgZm9yIHZhbmlsbGEgSmF2YVNjcmlwdCBwcm9qZWN0cy4gVGhlIEFuZ3VsYXIsIFJlYWN0LCBhbmQgVnVlIGltcGxlbWVudGF0aW9ucyBvZiB0YWJzIGFyZSBjb3VwbGVkIHRvIGVhY2ggZnJhbWV3b3JrJ3Mgcm91dGVyLlxuICAgKlxuICAgKiBAcGFyYW0gdGFiIFRoZSB0YWIgaW5zdGFuY2UgdG8gc2VsZWN0LiBJZiBwYXNzZWQgYSBzdHJpbmcsIGl0IHNob3VsZCBiZSB0aGUgdmFsdWUgb2YgdGhlIHRhYidzIGB0YWJgIHByb3BlcnR5LlxuICAgKi9cbiAgYXN5bmMgZ2V0VGFiKHRhYikge1xuICAgIHJldHVybiBnZXRUYWIodGhpcy50YWJzLCB0YWIpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0YWIuIFRoaXMgbWV0aG9kIGlzIG9ubHkgYXZhaWxhYmxlIGZvciB2YW5pbGxhIEphdmFTY3JpcHQgcHJvamVjdHMuIFRoZSBBbmd1bGFyLCBSZWFjdCwgYW5kIFZ1ZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGFicyBhcmUgY291cGxlZCB0byBlYWNoIGZyYW1ld29yaydzIHJvdXRlci5cbiAgICovXG4gIGdldFNlbGVjdGVkKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5zZWxlY3RlZFRhYiA/IHRoaXMuc2VsZWN0ZWRUYWIudGFiIDogdW5kZWZpbmVkKTtcbiAgfVxuICAvKiogQGludGVybmFsICovXG4gIGFzeW5jIHNldFJvdXRlSWQoaWQpIHtcbiAgICBjb25zdCBzZWxlY3RlZFRhYiA9IGdldFRhYih0aGlzLnRhYnMsIGlkKTtcbiAgICBpZiAoIXRoaXMuc2hvdWxkU3dpdGNoKHNlbGVjdGVkVGFiKSkge1xuICAgICAgcmV0dXJuIHsgY2hhbmdlZDogZmFsc2UsIGVsZW1lbnQ6IHRoaXMuc2VsZWN0ZWRUYWIgfTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5zZXRBY3RpdmUoc2VsZWN0ZWRUYWIpO1xuICAgIHJldHVybiB7XG4gICAgICBjaGFuZ2VkOiB0cnVlLFxuICAgICAgZWxlbWVudDogdGhpcy5zZWxlY3RlZFRhYixcbiAgICAgIG1hcmtWaXNpYmxlOiAoKSA9PiB0aGlzLnRhYlN3aXRjaCgpLFxuICAgIH07XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBhc3luYyBnZXRSb3V0ZUlkKCkge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCB0YWJJZCA9IChfYSA9IHRoaXMuc2VsZWN0ZWRUYWIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50YWI7XG4gICAgcmV0dXJuIHRhYklkICE9PSB1bmRlZmluZWQgPyB7IGlkOiB0YWJJZCwgZWxlbWVudDogdGhpcy5zZWxlY3RlZFRhYiB9IDogdW5kZWZpbmVkO1xuICB9XG4gIHNldEFjdGl2ZShzZWxlY3RlZFRhYikge1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgndHJhbnNpdGlvbmluZyBhbHJlYWR5IGhhcHBlbmluZycpO1xuICAgIH1cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgIHRoaXMubGVhdmluZ1RhYiA9IHRoaXMuc2VsZWN0ZWRUYWI7XG4gICAgdGhpcy5zZWxlY3RlZFRhYiA9IHNlbGVjdGVkVGFiO1xuICAgIHRoaXMuaW9uVGFic1dpbGxDaGFuZ2UuZW1pdCh7IHRhYjogc2VsZWN0ZWRUYWIudGFiIH0pO1xuICAgIHNlbGVjdGVkVGFiLmFjdGl2ZSA9IHRydWU7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIHRhYlN3aXRjaCgpIHtcbiAgICBjb25zdCBzZWxlY3RlZFRhYiA9IHRoaXMuc2VsZWN0ZWRUYWI7XG4gICAgY29uc3QgbGVhdmluZ1RhYiA9IHRoaXMubGVhdmluZ1RhYjtcbiAgICB0aGlzLmxlYXZpbmdUYWIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgaWYgKCFzZWxlY3RlZFRhYikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobGVhdmluZ1RhYiAhPT0gc2VsZWN0ZWRUYWIpIHtcbiAgICAgIGlmIChsZWF2aW5nVGFiKSB7XG4gICAgICAgIGxlYXZpbmdUYWIuYWN0aXZlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB0aGlzLmlvblRhYnNEaWRDaGFuZ2UuZW1pdCh7IHRhYjogc2VsZWN0ZWRUYWIudGFiIH0pO1xuICAgIH1cbiAgfVxuICBub3RpZnlSb3V0ZXIoKSB7XG4gICAgaWYgKHRoaXMudXNlUm91dGVyKSB7XG4gICAgICBjb25zdCByb3V0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpb24tcm91dGVyJyk7XG4gICAgICBpZiAocm91dGVyKSB7XG4gICAgICAgIHJldHVybiByb3V0ZXIubmF2Q2hhbmdlZCgnZm9yd2FyZCcpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbiAgfVxuICBzaG91bGRTd2l0Y2goc2VsZWN0ZWRUYWIpIHtcbiAgICBjb25zdCBsZWF2aW5nVGFiID0gdGhpcy5zZWxlY3RlZFRhYjtcbiAgICByZXR1cm4gc2VsZWN0ZWRUYWIgIT09IHVuZGVmaW5lZCAmJiBzZWxlY3RlZFRhYiAhPT0gbGVhdmluZ1RhYiAmJiAhdGhpcy50cmFuc2l0aW9uaW5nO1xuICB9XG4gIGdldCB0YWJzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnaW9uLXRhYicpKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChoKEhvc3QsIHsgb25Jb25UYWJCdXR0b25DbGljazogdGhpcy5vblRhYkNsaWNrZWQgfSwgaChcInNsb3RcIiwgeyBuYW1lOiBcInRvcFwiIH0pLCBoKFwiZGl2XCIsIHsgY2xhc3M6IFwidGFicy1pbm5lclwiIH0sIGgoXCJzbG90XCIsIG51bGwpKSwgaChcInNsb3RcIiwgeyBuYW1lOiBcImJvdHRvbVwiIH0pKSk7XG4gIH1cbiAgZ2V0IGVsKCkgeyByZXR1cm4gZ2V0RWxlbWVudCh0aGlzKTsgfVxufTtcbmNvbnN0IGdldFRhYiA9ICh0YWJzLCB0YWIpID0+IHtcbiAgY29uc3QgdGFiRWwgPSB0eXBlb2YgdGFiID09PSAnc3RyaW5nJyA/IHRhYnMuZmluZCgodCkgPT4gdC50YWIgPT09IHRhYikgOiB0YWI7XG4gIGlmICghdGFiRWwpIHtcbiAgICBjb25zb2xlLmVycm9yKGB0YWIgd2l0aCBpZDogXCIke3RhYkVsfVwiIGRvZXMgbm90IGV4aXN0YCk7XG4gIH1cbiAgcmV0dXJuIHRhYkVsO1xufTtcblRhYnMuc3R5bGUgPSB0YWJzQ3NzO1xuXG5leHBvcnQgeyBUYWIgYXMgaW9uX3RhYiwgVGFicyBhcyBpb25fdGFicyB9O1xuIl0sIm5hbWVzIjpbInIiLCJyZWdpc3Rlckluc3RhbmNlIiwiaCIsIkgiLCJIb3N0IiwiZiIsImdldEVsZW1lbnQiLCJkIiwiY3JlYXRlRXZlbnQiLCJhIiwiYXR0YWNoQ29tcG9uZW50IiwidGFiQ3NzIiwiVGFiIiwiY29uc3RydWN0b3IiLCJob3N0UmVmIiwibG9hZGVkIiwiYWN0aXZlIiwiZGVsZWdhdGUiLCJ1bmRlZmluZWQiLCJ0YWIiLCJjb21wb25lbnQiLCJjb21wb25lbnRXaWxsTG9hZCIsIl90aGlzIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJzZXRBY3RpdmUiLCJfdGhpczIiLCJwcmVwYXJlTGF6eUxvYWRlZCIsImNoYW5nZUFjdGl2ZSIsImlzQWN0aXZlIiwiZWwiLCJlIiwiY29uc29sZSIsImVycm9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZW5kZXIiLCJyb2xlIiwiY2xhc3MiLCJ3YXRjaGVycyIsInN0eWxlIiwidGFic0NzcyIsIlRhYnMiLCJpb25OYXZXaWxsTG9hZCIsImlvblRhYnNXaWxsQ2hhbmdlIiwiaW9uVGFic0RpZENoYW5nZSIsInRyYW5zaXRpb25pbmciLCJvblRhYkNsaWNrZWQiLCJldiIsImhyZWYiLCJkZXRhaWwiLCJ1c2VSb3V0ZXIiLCJyb3V0ZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJwdXNoIiwic2VsZWN0Iiwic2VsZWN0ZWRUYWIiLCJfdGhpczMiLCJjbG9zZXN0IiwidGFicyIsImxlbmd0aCIsImVtaXQiLCJjb21wb25lbnRXaWxsUmVuZGVyIiwidGFiQmFyIiwiX3RoaXM0IiwiZ2V0VGFiIiwic2hvdWxkU3dpdGNoIiwibm90aWZ5Um91dGVyIiwidGFiU3dpdGNoIiwiX3RoaXM1IiwiZ2V0U2VsZWN0ZWQiLCJzZXRSb3V0ZUlkIiwiaWQiLCJfdGhpczYiLCJjaGFuZ2VkIiwiZWxlbWVudCIsIm1hcmtWaXNpYmxlIiwiZ2V0Um91dGVJZCIsIl90aGlzNyIsIl9hIiwidGFiSWQiLCJyZWplY3QiLCJsZWF2aW5nVGFiIiwibmF2Q2hhbmdlZCIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJvbklvblRhYkJ1dHRvbkNsaWNrIiwibmFtZSIsInRhYkVsIiwiZmluZCIsInQiLCJpb25fdGFiIiwiaW9uX3RhYnMiXSwic291cmNlUm9vdCI6IndlYnBhY2s6Ly8vIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzBdfQ==